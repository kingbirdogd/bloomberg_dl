/* soapH.h
   Generated by gSOAP 2.8.112 for bloomberg_dl_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DLCategory2_DEFINED
#define SOAP_TYPE_ns1__DLCategory2_DEFINED

inline void soap_default_ns1__DLCategory2(struct soap *soap, enum ns1__DLCategory2 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DLCategory2
	*a = SOAP_DEFAULT_ns1__DLCategory2;
#else
	*a = (enum ns1__DLCategory2)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DLCategory2(struct soap*, const char*, int, const enum ns1__DLCategory2 *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DLCategory22s(struct soap*, enum ns1__DLCategory2);
SOAP_FMAC3 enum ns1__DLCategory2 * SOAP_FMAC4 soap_in_ns1__DLCategory2(struct soap*, const char*, enum ns1__DLCategory2 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DLCategory2(struct soap*, const char*, enum ns1__DLCategory2 *);

SOAP_FMAC3 enum ns1__DLCategory2 * SOAP_FMAC4 soap_new_ns1__DLCategory2(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DLCategory2(struct soap*, const enum ns1__DLCategory2 *, const char*, const char*);

inline int soap_write_ns1__DLCategory2(struct soap *soap, enum ns1__DLCategory2 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DLCategory2(soap, p, "ns1:DLCategory2", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DLCategory2(struct soap *soap, const char *URL, enum ns1__DLCategory2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory2(soap, p, "ns1:DLCategory2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DLCategory2(struct soap *soap, const char *URL, enum ns1__DLCategory2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory2(soap, p, "ns1:DLCategory2", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DLCategory2(struct soap *soap, const char *URL, enum ns1__DLCategory2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory2(soap, p, "ns1:DLCategory2", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DLCategory2 * SOAP_FMAC4 soap_get_ns1__DLCategory2(struct soap*, enum ns1__DLCategory2 *, const char*, const char*);

inline int soap_read_ns1__DLCategory2(struct soap *soap, enum ns1__DLCategory2 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DLCategory2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DLCategory2(struct soap *soap, const char *URL, enum ns1__DLCategory2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DLCategory2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DLCategory2(struct soap *soap, enum ns1__DLCategory2 *p)
{
	if (::soap_read_ns1__DLCategory2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DLCategory_DEFINED
#define SOAP_TYPE_ns1__DLCategory_DEFINED

inline void soap_default_ns1__DLCategory(struct soap *soap, enum ns1__DLCategory *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DLCategory
	*a = SOAP_DEFAULT_ns1__DLCategory;
#else
	*a = (enum ns1__DLCategory)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DLCategory(struct soap*, const char*, int, const enum ns1__DLCategory *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DLCategory2s(struct soap*, enum ns1__DLCategory);
SOAP_FMAC3 enum ns1__DLCategory * SOAP_FMAC4 soap_in_ns1__DLCategory(struct soap*, const char*, enum ns1__DLCategory *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DLCategory(struct soap*, const char*, enum ns1__DLCategory *);

SOAP_FMAC3 enum ns1__DLCategory * SOAP_FMAC4 soap_new_ns1__DLCategory(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DLCategory(struct soap*, const enum ns1__DLCategory *, const char*, const char*);

inline int soap_write_ns1__DLCategory(struct soap *soap, enum ns1__DLCategory const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DLCategory(soap, p, "ns1:DLCategory", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DLCategory(struct soap *soap, const char *URL, enum ns1__DLCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory(soap, p, "ns1:DLCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DLCategory(struct soap *soap, const char *URL, enum ns1__DLCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory(soap, p, "ns1:DLCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DLCategory(struct soap *soap, const char *URL, enum ns1__DLCategory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DLCategory(soap, p, "ns1:DLCategory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DLCategory * SOAP_FMAC4 soap_get_ns1__DLCategory(struct soap*, enum ns1__DLCategory *, const char*, const char*);

inline int soap_read_ns1__DLCategory(struct soap *soap, enum ns1__DLCategory *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DLCategory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DLCategory(struct soap *soap, const char *URL, enum ns1__DLCategory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DLCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DLCategory(struct soap *soap, enum ns1__DLCategory *p)
{
	if (::soap_read_ns1__DLCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BvalFieldMacro_DEFINED
#define SOAP_TYPE_ns1__BvalFieldMacro_DEFINED

inline void soap_default_ns1__BvalFieldMacro(struct soap *soap, enum ns1__BvalFieldMacro *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__BvalFieldMacro
	*a = SOAP_DEFAULT_ns1__BvalFieldMacro;
#else
	*a = (enum ns1__BvalFieldMacro)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BvalFieldMacro(struct soap*, const char*, int, const enum ns1__BvalFieldMacro *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__BvalFieldMacro2s(struct soap*, enum ns1__BvalFieldMacro);
SOAP_FMAC3 enum ns1__BvalFieldMacro * SOAP_FMAC4 soap_in_ns1__BvalFieldMacro(struct soap*, const char*, enum ns1__BvalFieldMacro *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__BvalFieldMacro(struct soap*, const char*, enum ns1__BvalFieldMacro *);

SOAP_FMAC3 enum ns1__BvalFieldMacro * SOAP_FMAC4 soap_new_ns1__BvalFieldMacro(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BvalFieldMacro(struct soap*, const enum ns1__BvalFieldMacro *, const char*, const char*);

inline int soap_write_ns1__BvalFieldMacro(struct soap *soap, enum ns1__BvalFieldMacro const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__BvalFieldMacro(soap, p, "ns1:BvalFieldMacro", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__BvalFieldMacro(struct soap *soap, const char *URL, enum ns1__BvalFieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalFieldMacro(soap, p, "ns1:BvalFieldMacro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BvalFieldMacro(struct soap *soap, const char *URL, enum ns1__BvalFieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalFieldMacro(soap, p, "ns1:BvalFieldMacro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BvalFieldMacro(struct soap *soap, const char *URL, enum ns1__BvalFieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalFieldMacro(soap, p, "ns1:BvalFieldMacro", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__BvalFieldMacro * SOAP_FMAC4 soap_get_ns1__BvalFieldMacro(struct soap*, enum ns1__BvalFieldMacro *, const char*, const char*);

inline int soap_read_ns1__BvalFieldMacro(struct soap *soap, enum ns1__BvalFieldMacro *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__BvalFieldMacro(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BvalFieldMacro(struct soap *soap, const char *URL, enum ns1__BvalFieldMacro *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BvalFieldMacro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BvalFieldMacro(struct soap *soap, enum ns1__BvalFieldMacro *p)
{
	if (::soap_read_ns1__BvalFieldMacro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldMacro_DEFINED
#define SOAP_TYPE_ns1__FieldMacro_DEFINED

inline void soap_default_ns1__FieldMacro(struct soap *soap, enum ns1__FieldMacro *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__FieldMacro
	*a = SOAP_DEFAULT_ns1__FieldMacro;
#else
	*a = (enum ns1__FieldMacro)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldMacro(struct soap*, const char*, int, const enum ns1__FieldMacro *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__FieldMacro2s(struct soap*, enum ns1__FieldMacro);
SOAP_FMAC3 enum ns1__FieldMacro * SOAP_FMAC4 soap_in_ns1__FieldMacro(struct soap*, const char*, enum ns1__FieldMacro *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__FieldMacro(struct soap*, const char*, enum ns1__FieldMacro *);

SOAP_FMAC3 enum ns1__FieldMacro * SOAP_FMAC4 soap_new_ns1__FieldMacro(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__FieldMacro(struct soap*, const enum ns1__FieldMacro *, const char*, const char*);

inline int soap_write_ns1__FieldMacro(struct soap *soap, enum ns1__FieldMacro const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__FieldMacro(soap, p, "ns1:FieldMacro", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldMacro(struct soap *soap, const char *URL, enum ns1__FieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldMacro(soap, p, "ns1:FieldMacro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldMacro(struct soap *soap, const char *URL, enum ns1__FieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldMacro(soap, p, "ns1:FieldMacro", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldMacro(struct soap *soap, const char *URL, enum ns1__FieldMacro const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldMacro(soap, p, "ns1:FieldMacro", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__FieldMacro * SOAP_FMAC4 soap_get_ns1__FieldMacro(struct soap*, enum ns1__FieldMacro *, const char*, const char*);

inline int soap_read_ns1__FieldMacro(struct soap *soap, enum ns1__FieldMacro *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__FieldMacro(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldMacro(struct soap *soap, const char *URL, enum ns1__FieldMacro *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldMacro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldMacro(struct soap *soap, enum ns1__FieldMacro *p)
{
	if (::soap_read_ns1__FieldMacro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RegSolvency_DEFINED
#define SOAP_TYPE_ns1__RegSolvency_DEFINED

inline void soap_default_ns1__RegSolvency(struct soap *soap, enum ns1__RegSolvency *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__RegSolvency
	*a = SOAP_DEFAULT_ns1__RegSolvency;
#else
	*a = (enum ns1__RegSolvency)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegSolvency(struct soap*, const char*, int, const enum ns1__RegSolvency *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__RegSolvency2s(struct soap*, enum ns1__RegSolvency);
SOAP_FMAC3 enum ns1__RegSolvency * SOAP_FMAC4 soap_in_ns1__RegSolvency(struct soap*, const char*, enum ns1__RegSolvency *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__RegSolvency(struct soap*, const char*, enum ns1__RegSolvency *);

SOAP_FMAC3 enum ns1__RegSolvency * SOAP_FMAC4 soap_new_ns1__RegSolvency(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegSolvency(struct soap*, const enum ns1__RegSolvency *, const char*, const char*);

inline int soap_write_ns1__RegSolvency(struct soap *soap, enum ns1__RegSolvency const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__RegSolvency(soap, p, "ns1:RegSolvency", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegSolvency(struct soap *soap, const char *URL, enum ns1__RegSolvency const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegSolvency(soap, p, "ns1:RegSolvency", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RegSolvency(struct soap *soap, const char *URL, enum ns1__RegSolvency const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegSolvency(soap, p, "ns1:RegSolvency", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegSolvency(struct soap *soap, const char *URL, enum ns1__RegSolvency const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegSolvency(soap, p, "ns1:RegSolvency", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__RegSolvency * SOAP_FMAC4 soap_get_ns1__RegSolvency(struct soap*, enum ns1__RegSolvency *, const char*, const char*);

inline int soap_read_ns1__RegSolvency(struct soap *soap, enum ns1__RegSolvency *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__RegSolvency(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegSolvency(struct soap *soap, const char *URL, enum ns1__RegSolvency *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegSolvency(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RegSolvency(struct soap *soap, enum ns1__RegSolvency *p)
{
	if (::soap_read_ns1__RegSolvency(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OtcBvalAction_DEFINED
#define SOAP_TYPE_ns1__OtcBvalAction_DEFINED

inline void soap_default_ns1__OtcBvalAction(struct soap *soap, enum ns1__OtcBvalAction *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__OtcBvalAction
	*a = SOAP_DEFAULT_ns1__OtcBvalAction;
#else
	*a = (enum ns1__OtcBvalAction)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OtcBvalAction(struct soap*, const char*, int, const enum ns1__OtcBvalAction *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__OtcBvalAction2s(struct soap*, enum ns1__OtcBvalAction);
SOAP_FMAC3 enum ns1__OtcBvalAction * SOAP_FMAC4 soap_in_ns1__OtcBvalAction(struct soap*, const char*, enum ns1__OtcBvalAction *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__OtcBvalAction(struct soap*, const char*, enum ns1__OtcBvalAction *);

SOAP_FMAC3 enum ns1__OtcBvalAction * SOAP_FMAC4 soap_new_ns1__OtcBvalAction(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__OtcBvalAction(struct soap*, const enum ns1__OtcBvalAction *, const char*, const char*);

inline int soap_write_ns1__OtcBvalAction(struct soap *soap, enum ns1__OtcBvalAction const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__OtcBvalAction(soap, p, "ns1:OtcBvalAction", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__OtcBvalAction(struct soap *soap, const char *URL, enum ns1__OtcBvalAction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__OtcBvalAction(soap, p, "ns1:OtcBvalAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OtcBvalAction(struct soap *soap, const char *URL, enum ns1__OtcBvalAction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__OtcBvalAction(soap, p, "ns1:OtcBvalAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OtcBvalAction(struct soap *soap, const char *URL, enum ns1__OtcBvalAction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__OtcBvalAction(soap, p, "ns1:OtcBvalAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__OtcBvalAction * SOAP_FMAC4 soap_get_ns1__OtcBvalAction(struct soap*, enum ns1__OtcBvalAction *, const char*, const char*);

inline int soap_read_ns1__OtcBvalAction(struct soap *soap, enum ns1__OtcBvalAction *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__OtcBvalAction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OtcBvalAction(struct soap *soap, const char *URL, enum ns1__OtcBvalAction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OtcBvalAction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OtcBvalAction(struct soap *soap, enum ns1__OtcBvalAction *p)
{
	if (::soap_read_ns1__OtcBvalAction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActionsDate_DEFINED
#define SOAP_TYPE_ns1__ActionsDate_DEFINED

inline void soap_default_ns1__ActionsDate(struct soap *soap, enum ns1__ActionsDate *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ActionsDate
	*a = SOAP_DEFAULT_ns1__ActionsDate;
#else
	*a = (enum ns1__ActionsDate)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionsDate(struct soap*, const char*, int, const enum ns1__ActionsDate *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ActionsDate2s(struct soap*, enum ns1__ActionsDate);
SOAP_FMAC3 enum ns1__ActionsDate * SOAP_FMAC4 soap_in_ns1__ActionsDate(struct soap*, const char*, enum ns1__ActionsDate *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ActionsDate(struct soap*, const char*, enum ns1__ActionsDate *);

SOAP_FMAC3 enum ns1__ActionsDate * SOAP_FMAC4 soap_new_ns1__ActionsDate(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ActionsDate(struct soap*, const enum ns1__ActionsDate *, const char*, const char*);

inline int soap_write_ns1__ActionsDate(struct soap *soap, enum ns1__ActionsDate const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ActionsDate(soap, p, "ns1:ActionsDate", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionsDate(struct soap *soap, const char *URL, enum ns1__ActionsDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActionsDate(soap, p, "ns1:ActionsDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActionsDate(struct soap *soap, const char *URL, enum ns1__ActionsDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActionsDate(soap, p, "ns1:ActionsDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionsDate(struct soap *soap, const char *URL, enum ns1__ActionsDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActionsDate(soap, p, "ns1:ActionsDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ActionsDate * SOAP_FMAC4 soap_get_ns1__ActionsDate(struct soap*, enum ns1__ActionsDate *, const char*, const char*);

inline int soap_read_ns1__ActionsDate(struct soap *soap, enum ns1__ActionsDate *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ActionsDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionsDate(struct soap *soap, const char *URL, enum ns1__ActionsDate *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActionsDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActionsDate(struct soap *soap, enum ns1__ActionsDate *p)
{
	if (::soap_read_ns1__ActionsDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PortSecDes_DEFINED
#define SOAP_TYPE_ns1__PortSecDes_DEFINED

inline void soap_default_ns1__PortSecDes(struct soap *soap, enum ns1__PortSecDes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__PortSecDes
	*a = SOAP_DEFAULT_ns1__PortSecDes;
#else
	*a = (enum ns1__PortSecDes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PortSecDes(struct soap*, const char*, int, const enum ns1__PortSecDes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__PortSecDes2s(struct soap*, enum ns1__PortSecDes);
SOAP_FMAC3 enum ns1__PortSecDes * SOAP_FMAC4 soap_in_ns1__PortSecDes(struct soap*, const char*, enum ns1__PortSecDes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__PortSecDes(struct soap*, const char*, enum ns1__PortSecDes *);

SOAP_FMAC3 enum ns1__PortSecDes * SOAP_FMAC4 soap_new_ns1__PortSecDes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PortSecDes(struct soap*, const enum ns1__PortSecDes *, const char*, const char*);

inline int soap_write_ns1__PortSecDes(struct soap *soap, enum ns1__PortSecDes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__PortSecDes(soap, p, "ns1:PortSecDes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__PortSecDes(struct soap *soap, const char *URL, enum ns1__PortSecDes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PortSecDes(soap, p, "ns1:PortSecDes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PortSecDes(struct soap *soap, const char *URL, enum ns1__PortSecDes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PortSecDes(soap, p, "ns1:PortSecDes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PortSecDes(struct soap *soap, const char *URL, enum ns1__PortSecDes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PortSecDes(soap, p, "ns1:PortSecDes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__PortSecDes * SOAP_FMAC4 soap_get_ns1__PortSecDes(struct soap*, enum ns1__PortSecDes *, const char*, const char*);

inline int soap_read_ns1__PortSecDes(struct soap *soap, enum ns1__PortSecDes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__PortSecDes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PortSecDes(struct soap *soap, const char *URL, enum ns1__PortSecDes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PortSecDes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PortSecDes(struct soap *soap, enum ns1__PortSecDes *p)
{
	if (::soap_read_ns1__PortSecDes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CancelStatus_DEFINED
#define SOAP_TYPE_ns1__CancelStatus_DEFINED

inline void soap_default_ns1__CancelStatus(struct soap *soap, enum ns1__CancelStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__CancelStatus
	*a = SOAP_DEFAULT_ns1__CancelStatus;
#else
	*a = (enum ns1__CancelStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CancelStatus(struct soap*, const char*, int, const enum ns1__CancelStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__CancelStatus2s(struct soap*, enum ns1__CancelStatus);
SOAP_FMAC3 enum ns1__CancelStatus * SOAP_FMAC4 soap_in_ns1__CancelStatus(struct soap*, const char*, enum ns1__CancelStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__CancelStatus(struct soap*, const char*, enum ns1__CancelStatus *);

SOAP_FMAC3 enum ns1__CancelStatus * SOAP_FMAC4 soap_new_ns1__CancelStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CancelStatus(struct soap*, const enum ns1__CancelStatus *, const char*, const char*);

inline int soap_write_ns1__CancelStatus(struct soap *soap, enum ns1__CancelStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__CancelStatus(soap, p, "ns1:CancelStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__CancelStatus(struct soap *soap, const char *URL, enum ns1__CancelStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CancelStatus(soap, p, "ns1:CancelStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CancelStatus(struct soap *soap, const char *URL, enum ns1__CancelStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CancelStatus(soap, p, "ns1:CancelStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CancelStatus(struct soap *soap, const char *URL, enum ns1__CancelStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CancelStatus(soap, p, "ns1:CancelStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__CancelStatus * SOAP_FMAC4 soap_get_ns1__CancelStatus(struct soap*, enum ns1__CancelStatus *, const char*, const char*);

inline int soap_read_ns1__CancelStatus(struct soap *soap, enum ns1__CancelStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__CancelStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CancelStatus(struct soap *soap, const char *URL, enum ns1__CancelStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CancelStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CancelStatus(struct soap *soap, enum ns1__CancelStatus *p)
{
	if (::soap_read_ns1__CancelStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BvalSnapshot_DEFINED
#define SOAP_TYPE_ns1__BvalSnapshot_DEFINED

inline void soap_default_ns1__BvalSnapshot(struct soap *soap, enum ns1__BvalSnapshot *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__BvalSnapshot
	*a = SOAP_DEFAULT_ns1__BvalSnapshot;
#else
	*a = (enum ns1__BvalSnapshot)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BvalSnapshot(struct soap*, const char*, int, const enum ns1__BvalSnapshot *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__BvalSnapshot2s(struct soap*, enum ns1__BvalSnapshot);
SOAP_FMAC3 enum ns1__BvalSnapshot * SOAP_FMAC4 soap_in_ns1__BvalSnapshot(struct soap*, const char*, enum ns1__BvalSnapshot *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__BvalSnapshot(struct soap*, const char*, enum ns1__BvalSnapshot *);

SOAP_FMAC3 enum ns1__BvalSnapshot * SOAP_FMAC4 soap_new_ns1__BvalSnapshot(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BvalSnapshot(struct soap*, const enum ns1__BvalSnapshot *, const char*, const char*);

inline int soap_write_ns1__BvalSnapshot(struct soap *soap, enum ns1__BvalSnapshot const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__BvalSnapshot(soap, p, "ns1:BvalSnapshot", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__BvalSnapshot(struct soap *soap, const char *URL, enum ns1__BvalSnapshot const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalSnapshot(soap, p, "ns1:BvalSnapshot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BvalSnapshot(struct soap *soap, const char *URL, enum ns1__BvalSnapshot const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalSnapshot(soap, p, "ns1:BvalSnapshot", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BvalSnapshot(struct soap *soap, const char *URL, enum ns1__BvalSnapshot const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalSnapshot(soap, p, "ns1:BvalSnapshot", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__BvalSnapshot * SOAP_FMAC4 soap_get_ns1__BvalSnapshot(struct soap*, enum ns1__BvalSnapshot *, const char*, const char*);

inline int soap_read_ns1__BvalSnapshot(struct soap *soap, enum ns1__BvalSnapshot *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__BvalSnapshot(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BvalSnapshot(struct soap *soap, const char *URL, enum ns1__BvalSnapshot *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BvalSnapshot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BvalSnapshot(struct soap *soap, enum ns1__BvalSnapshot *p)
{
	if (::soap_read_ns1__BvalSnapshot(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BvalTier_DEFINED
#define SOAP_TYPE_ns1__BvalTier_DEFINED

inline void soap_default_ns1__BvalTier(struct soap *soap, enum ns1__BvalTier *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__BvalTier
	*a = SOAP_DEFAULT_ns1__BvalTier;
#else
	*a = (enum ns1__BvalTier)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BvalTier(struct soap*, const char*, int, const enum ns1__BvalTier *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__BvalTier2s(struct soap*, enum ns1__BvalTier);
SOAP_FMAC3 enum ns1__BvalTier * SOAP_FMAC4 soap_in_ns1__BvalTier(struct soap*, const char*, enum ns1__BvalTier *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__BvalTier(struct soap*, const char*, enum ns1__BvalTier *);

SOAP_FMAC3 enum ns1__BvalTier * SOAP_FMAC4 soap_new_ns1__BvalTier(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BvalTier(struct soap*, const enum ns1__BvalTier *, const char*, const char*);

inline int soap_write_ns1__BvalTier(struct soap *soap, enum ns1__BvalTier const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__BvalTier(soap, p, "ns1:BvalTier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__BvalTier(struct soap *soap, const char *URL, enum ns1__BvalTier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalTier(soap, p, "ns1:BvalTier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BvalTier(struct soap *soap, const char *URL, enum ns1__BvalTier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalTier(soap, p, "ns1:BvalTier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BvalTier(struct soap *soap, const char *URL, enum ns1__BvalTier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BvalTier(soap, p, "ns1:BvalTier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__BvalTier * SOAP_FMAC4 soap_get_ns1__BvalTier(struct soap*, enum ns1__BvalTier *, const char*, const char*);

inline int soap_read_ns1__BvalTier(struct soap *soap, enum ns1__BvalTier *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__BvalTier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BvalTier(struct soap *soap, const char *URL, enum ns1__BvalTier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BvalTier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BvalTier(struct soap *soap, enum ns1__BvalTier *p)
{
	if (::soap_read_ns1__BvalTier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Periodicity_DEFINED
#define SOAP_TYPE_ns1__Periodicity_DEFINED

inline void soap_default_ns1__Periodicity(struct soap *soap, enum ns1__Periodicity *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Periodicity
	*a = SOAP_DEFAULT_ns1__Periodicity;
#else
	*a = (enum ns1__Periodicity)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Periodicity(struct soap*, const char*, int, const enum ns1__Periodicity *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Periodicity2s(struct soap*, enum ns1__Periodicity);
SOAP_FMAC3 enum ns1__Periodicity * SOAP_FMAC4 soap_in_ns1__Periodicity(struct soap*, const char*, enum ns1__Periodicity *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Periodicity(struct soap*, const char*, enum ns1__Periodicity *);

SOAP_FMAC3 enum ns1__Periodicity * SOAP_FMAC4 soap_new_ns1__Periodicity(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Periodicity(struct soap*, const enum ns1__Periodicity *, const char*, const char*);

inline int soap_write_ns1__Periodicity(struct soap *soap, enum ns1__Periodicity const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Periodicity(soap, p, "ns1:Periodicity", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Periodicity(struct soap *soap, const char *URL, enum ns1__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Periodicity(soap, p, "ns1:Periodicity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Periodicity(struct soap *soap, const char *URL, enum ns1__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Periodicity(soap, p, "ns1:Periodicity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Periodicity(struct soap *soap, const char *URL, enum ns1__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Periodicity(soap, p, "ns1:Periodicity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Periodicity * SOAP_FMAC4 soap_get_ns1__Periodicity(struct soap*, enum ns1__Periodicity *, const char*, const char*);

inline int soap_read_ns1__Periodicity(struct soap *soap, enum ns1__Periodicity *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Periodicity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Periodicity(struct soap *soap, const char *URL, enum ns1__Periodicity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Periodicity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Periodicity(struct soap *soap, enum ns1__Periodicity *p)
{
	if (::soap_read_ns1__Periodicity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FilingStatus_DEFINED
#define SOAP_TYPE_ns1__FilingStatus_DEFINED

inline void soap_default_ns1__FilingStatus(struct soap *soap, enum ns1__FilingStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__FilingStatus
	*a = SOAP_DEFAULT_ns1__FilingStatus;
#else
	*a = (enum ns1__FilingStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FilingStatus(struct soap*, const char*, int, const enum ns1__FilingStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__FilingStatus2s(struct soap*, enum ns1__FilingStatus);
SOAP_FMAC3 enum ns1__FilingStatus * SOAP_FMAC4 soap_in_ns1__FilingStatus(struct soap*, const char*, enum ns1__FilingStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__FilingStatus(struct soap*, const char*, enum ns1__FilingStatus *);

SOAP_FMAC3 enum ns1__FilingStatus * SOAP_FMAC4 soap_new_ns1__FilingStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__FilingStatus(struct soap*, const enum ns1__FilingStatus *, const char*, const char*);

inline int soap_write_ns1__FilingStatus(struct soap *soap, enum ns1__FilingStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__FilingStatus(soap, p, "ns1:FilingStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__FilingStatus(struct soap *soap, const char *URL, enum ns1__FilingStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FilingStatus(soap, p, "ns1:FilingStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FilingStatus(struct soap *soap, const char *URL, enum ns1__FilingStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FilingStatus(soap, p, "ns1:FilingStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FilingStatus(struct soap *soap, const char *URL, enum ns1__FilingStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FilingStatus(soap, p, "ns1:FilingStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__FilingStatus * SOAP_FMAC4 soap_get_ns1__FilingStatus(struct soap*, enum ns1__FilingStatus *, const char*, const char*);

inline int soap_read_ns1__FilingStatus(struct soap *soap, enum ns1__FilingStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__FilingStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FilingStatus(struct soap *soap, const char *URL, enum ns1__FilingStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FilingStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FilingStatus(struct soap *soap, enum ns1__FilingStatus *p)
{
	if (::soap_read_ns1__FilingStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__HistOption_DEFINED
#define SOAP_TYPE_ns1__HistOption_DEFINED

inline void soap_default_ns1__HistOption(struct soap *soap, enum ns1__HistOption *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__HistOption
	*a = SOAP_DEFAULT_ns1__HistOption;
#else
	*a = (enum ns1__HistOption)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HistOption(struct soap*, const char*, int, const enum ns1__HistOption *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__HistOption2s(struct soap*, enum ns1__HistOption);
SOAP_FMAC3 enum ns1__HistOption * SOAP_FMAC4 soap_in_ns1__HistOption(struct soap*, const char*, enum ns1__HistOption *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__HistOption(struct soap*, const char*, enum ns1__HistOption *);

SOAP_FMAC3 enum ns1__HistOption * SOAP_FMAC4 soap_new_ns1__HistOption(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__HistOption(struct soap*, const enum ns1__HistOption *, const char*, const char*);

inline int soap_write_ns1__HistOption(struct soap *soap, enum ns1__HistOption const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__HistOption(soap, p, "ns1:HistOption", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__HistOption(struct soap *soap, const char *URL, enum ns1__HistOption const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistOption(soap, p, "ns1:HistOption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__HistOption(struct soap *soap, const char *URL, enum ns1__HistOption const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistOption(soap, p, "ns1:HistOption", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__HistOption(struct soap *soap, const char *URL, enum ns1__HistOption const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistOption(soap, p, "ns1:HistOption", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__HistOption * SOAP_FMAC4 soap_get_ns1__HistOption(struct soap*, enum ns1__HistOption *, const char*, const char*);

inline int soap_read_ns1__HistOption(struct soap *soap, enum ns1__HistOption *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__HistOption(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__HistOption(struct soap *soap, const char *URL, enum ns1__HistOption *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__HistOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__HistOption(struct soap *soap, enum ns1__HistOption *p)
{
	if (::soap_read_ns1__HistOption(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__HistPeriod_DEFINED
#define SOAP_TYPE_ns1__HistPeriod_DEFINED

inline void soap_default_ns1__HistPeriod(struct soap *soap, enum ns1__HistPeriod *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__HistPeriod
	*a = SOAP_DEFAULT_ns1__HistPeriod;
#else
	*a = (enum ns1__HistPeriod)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HistPeriod(struct soap*, const char*, int, const enum ns1__HistPeriod *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__HistPeriod2s(struct soap*, enum ns1__HistPeriod);
SOAP_FMAC3 enum ns1__HistPeriod * SOAP_FMAC4 soap_in_ns1__HistPeriod(struct soap*, const char*, enum ns1__HistPeriod *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__HistPeriod(struct soap*, const char*, enum ns1__HistPeriod *);

SOAP_FMAC3 enum ns1__HistPeriod * SOAP_FMAC4 soap_new_ns1__HistPeriod(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__HistPeriod(struct soap*, const enum ns1__HistPeriod *, const char*, const char*);

inline int soap_write_ns1__HistPeriod(struct soap *soap, enum ns1__HistPeriod const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__HistPeriod(soap, p, "ns1:HistPeriod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__HistPeriod(struct soap *soap, const char *URL, enum ns1__HistPeriod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistPeriod(soap, p, "ns1:HistPeriod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__HistPeriod(struct soap *soap, const char *URL, enum ns1__HistPeriod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistPeriod(soap, p, "ns1:HistPeriod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__HistPeriod(struct soap *soap, const char *URL, enum ns1__HistPeriod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__HistPeriod(soap, p, "ns1:HistPeriod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__HistPeriod * SOAP_FMAC4 soap_get_ns1__HistPeriod(struct soap*, enum ns1__HistPeriod *, const char*, const char*);

inline int soap_read_ns1__HistPeriod(struct soap *soap, enum ns1__HistPeriod *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__HistPeriod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__HistPeriod(struct soap *soap, const char *URL, enum ns1__HistPeriod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__HistPeriod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__HistPeriod(struct soap *soap, enum ns1__HistPeriod *p)
{
	if (::soap_read_ns1__HistPeriod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldType_DEFINED
#define SOAP_TYPE_ns1__FieldType_DEFINED

inline void soap_default_ns1__FieldType(struct soap *soap, enum ns1__FieldType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__FieldType
	*a = SOAP_DEFAULT_ns1__FieldType;
#else
	*a = (enum ns1__FieldType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldType(struct soap*, const char*, int, const enum ns1__FieldType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__FieldType2s(struct soap*, enum ns1__FieldType);
SOAP_FMAC3 enum ns1__FieldType * SOAP_FMAC4 soap_in_ns1__FieldType(struct soap*, const char*, enum ns1__FieldType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__FieldType(struct soap*, const char*, enum ns1__FieldType *);

SOAP_FMAC3 enum ns1__FieldType * SOAP_FMAC4 soap_new_ns1__FieldType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__FieldType(struct soap*, const enum ns1__FieldType *, const char*, const char*);

inline int soap_write_ns1__FieldType(struct soap *soap, enum ns1__FieldType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__FieldType(soap, p, "ns1:FieldType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldType(struct soap *soap, const char *URL, enum ns1__FieldType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldType(soap, p, "ns1:FieldType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldType(struct soap *soap, const char *URL, enum ns1__FieldType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldType(soap, p, "ns1:FieldType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldType(struct soap *soap, const char *URL, enum ns1__FieldType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__FieldType(soap, p, "ns1:FieldType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__FieldType * SOAP_FMAC4 soap_get_ns1__FieldType(struct soap*, enum ns1__FieldType *, const char*, const char*);

inline int soap_read_ns1__FieldType(struct soap *soap, enum ns1__FieldType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__FieldType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldType(struct soap *soap, const char *URL, enum ns1__FieldType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldType(struct soap *soap, enum ns1__FieldType *p)
{
	if (::soap_read_ns1__FieldType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DateFormat_DEFINED
#define SOAP_TYPE_ns1__DateFormat_DEFINED

inline void soap_default_ns1__DateFormat(struct soap *soap, enum ns1__DateFormat *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DateFormat
	*a = SOAP_DEFAULT_ns1__DateFormat;
#else
	*a = (enum ns1__DateFormat)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DateFormat(struct soap*, const char*, int, const enum ns1__DateFormat *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DateFormat2s(struct soap*, enum ns1__DateFormat);
SOAP_FMAC3 enum ns1__DateFormat * SOAP_FMAC4 soap_in_ns1__DateFormat(struct soap*, const char*, enum ns1__DateFormat *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DateFormat(struct soap*, const char*, enum ns1__DateFormat *);

SOAP_FMAC3 enum ns1__DateFormat * SOAP_FMAC4 soap_new_ns1__DateFormat(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DateFormat(struct soap*, const enum ns1__DateFormat *, const char*, const char*);

inline int soap_write_ns1__DateFormat(struct soap *soap, enum ns1__DateFormat const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DateFormat(soap, p, "ns1:DateFormat", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DateFormat(struct soap *soap, const char *URL, enum ns1__DateFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DateFormat(soap, p, "ns1:DateFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DateFormat(struct soap *soap, const char *URL, enum ns1__DateFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DateFormat(soap, p, "ns1:DateFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DateFormat(struct soap *soap, const char *URL, enum ns1__DateFormat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DateFormat(soap, p, "ns1:DateFormat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DateFormat * SOAP_FMAC4 soap_get_ns1__DateFormat(struct soap*, enum ns1__DateFormat *, const char*, const char*);

inline int soap_read_ns1__DateFormat(struct soap *soap, enum ns1__DateFormat *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DateFormat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DateFormat(struct soap *soap, const char *URL, enum ns1__DateFormat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DateFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DateFormat(struct soap *soap, enum ns1__DateFormat *p)
{
	if (::soap_read_ns1__DateFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DiffFlag_DEFINED
#define SOAP_TYPE_ns1__DiffFlag_DEFINED

inline void soap_default_ns1__DiffFlag(struct soap *soap, enum ns1__DiffFlag *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DiffFlag
	*a = SOAP_DEFAULT_ns1__DiffFlag;
#else
	*a = (enum ns1__DiffFlag)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiffFlag(struct soap*, const char*, int, const enum ns1__DiffFlag *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DiffFlag2s(struct soap*, enum ns1__DiffFlag);
SOAP_FMAC3 enum ns1__DiffFlag * SOAP_FMAC4 soap_in_ns1__DiffFlag(struct soap*, const char*, enum ns1__DiffFlag *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DiffFlag(struct soap*, const char*, enum ns1__DiffFlag *);

SOAP_FMAC3 enum ns1__DiffFlag * SOAP_FMAC4 soap_new_ns1__DiffFlag(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DiffFlag(struct soap*, const enum ns1__DiffFlag *, const char*, const char*);

inline int soap_write_ns1__DiffFlag(struct soap *soap, enum ns1__DiffFlag const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DiffFlag(soap, p, "ns1:DiffFlag", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiffFlag(struct soap *soap, const char *URL, enum ns1__DiffFlag const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DiffFlag(soap, p, "ns1:DiffFlag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DiffFlag(struct soap *soap, const char *URL, enum ns1__DiffFlag const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DiffFlag(soap, p, "ns1:DiffFlag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiffFlag(struct soap *soap, const char *URL, enum ns1__DiffFlag const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DiffFlag(soap, p, "ns1:DiffFlag", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DiffFlag * SOAP_FMAC4 soap_get_ns1__DiffFlag(struct soap*, enum ns1__DiffFlag *, const char*, const char*);

inline int soap_read_ns1__DiffFlag(struct soap *soap, enum ns1__DiffFlag *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DiffFlag(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiffFlag(struct soap *soap, const char *URL, enum ns1__DiffFlag *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DiffFlag(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DiffFlag(struct soap *soap, enum ns1__DiffFlag *p)
{
	if (::soap_read_ns1__DiffFlag(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Version_DEFINED
#define SOAP_TYPE_ns1__Version_DEFINED

inline void soap_default_ns1__Version(struct soap *soap, enum ns1__Version *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Version
	*a = SOAP_DEFAULT_ns1__Version;
#else
	*a = (enum ns1__Version)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Version(struct soap*, const char*, int, const enum ns1__Version *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Version2s(struct soap*, enum ns1__Version);
SOAP_FMAC3 enum ns1__Version * SOAP_FMAC4 soap_in_ns1__Version(struct soap*, const char*, enum ns1__Version *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Version(struct soap*, const char*, enum ns1__Version *);

SOAP_FMAC3 enum ns1__Version * SOAP_FMAC4 soap_new_ns1__Version(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Version(struct soap*, const enum ns1__Version *, const char*, const char*);

inline int soap_write_ns1__Version(struct soap *soap, enum ns1__Version const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Version(soap, p, "ns1:Version", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Version(struct soap *soap, const char *URL, enum ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Version(soap, p, "ns1:Version", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Version(struct soap *soap, const char *URL, enum ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Version(soap, p, "ns1:Version", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Version(struct soap *soap, const char *URL, enum ns1__Version const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Version(soap, p, "ns1:Version", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Version * SOAP_FMAC4 soap_get_ns1__Version(struct soap*, enum ns1__Version *, const char*, const char*);

inline int soap_read_ns1__Version(struct soap *soap, enum ns1__Version *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Version(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Version(struct soap *soap, const char *URL, enum ns1__Version *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Version(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Version(struct soap *soap, enum ns1__Version *p)
{
	if (::soap_read_ns1__Version(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ProgramFlag_DEFINED
#define SOAP_TYPE_ns1__ProgramFlag_DEFINED

inline void soap_default_ns1__ProgramFlag(struct soap *soap, enum ns1__ProgramFlag *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ProgramFlag
	*a = SOAP_DEFAULT_ns1__ProgramFlag;
#else
	*a = (enum ns1__ProgramFlag)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProgramFlag(struct soap*, const char*, int, const enum ns1__ProgramFlag *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ProgramFlag2s(struct soap*, enum ns1__ProgramFlag);
SOAP_FMAC3 enum ns1__ProgramFlag * SOAP_FMAC4 soap_in_ns1__ProgramFlag(struct soap*, const char*, enum ns1__ProgramFlag *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ProgramFlag(struct soap*, const char*, enum ns1__ProgramFlag *);

SOAP_FMAC3 enum ns1__ProgramFlag * SOAP_FMAC4 soap_new_ns1__ProgramFlag(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ProgramFlag(struct soap*, const enum ns1__ProgramFlag *, const char*, const char*);

inline int soap_write_ns1__ProgramFlag(struct soap *soap, enum ns1__ProgramFlag const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ProgramFlag(soap, p, "ns1:ProgramFlag", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ProgramFlag(struct soap *soap, const char *URL, enum ns1__ProgramFlag const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ProgramFlag(soap, p, "ns1:ProgramFlag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ProgramFlag(struct soap *soap, const char *URL, enum ns1__ProgramFlag const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ProgramFlag(soap, p, "ns1:ProgramFlag", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ProgramFlag(struct soap *soap, const char *URL, enum ns1__ProgramFlag const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ProgramFlag(soap, p, "ns1:ProgramFlag", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ProgramFlag * SOAP_FMAC4 soap_get_ns1__ProgramFlag(struct soap*, enum ns1__ProgramFlag *, const char*, const char*);

inline int soap_read_ns1__ProgramFlag(struct soap *soap, enum ns1__ProgramFlag *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ProgramFlag(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ProgramFlag(struct soap *soap, const char *URL, enum ns1__ProgramFlag *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ProgramFlag(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ProgramFlag(struct soap *soap, enum ns1__ProgramFlag *p)
{
	if (::soap_read_ns1__ProgramFlag(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SpecialChar_DEFINED
#define SOAP_TYPE_ns1__SpecialChar_DEFINED

inline void soap_default_ns1__SpecialChar(struct soap *soap, enum ns1__SpecialChar *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SpecialChar
	*a = SOAP_DEFAULT_ns1__SpecialChar;
#else
	*a = (enum ns1__SpecialChar)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SpecialChar(struct soap*, const char*, int, const enum ns1__SpecialChar *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SpecialChar2s(struct soap*, enum ns1__SpecialChar);
SOAP_FMAC3 enum ns1__SpecialChar * SOAP_FMAC4 soap_in_ns1__SpecialChar(struct soap*, const char*, enum ns1__SpecialChar *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SpecialChar(struct soap*, const char*, enum ns1__SpecialChar *);

SOAP_FMAC3 enum ns1__SpecialChar * SOAP_FMAC4 soap_new_ns1__SpecialChar(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SpecialChar(struct soap*, const enum ns1__SpecialChar *, const char*, const char*);

inline int soap_write_ns1__SpecialChar(struct soap *soap, enum ns1__SpecialChar const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__SpecialChar(soap, p, "ns1:SpecialChar", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__SpecialChar(struct soap *soap, const char *URL, enum ns1__SpecialChar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SpecialChar(soap, p, "ns1:SpecialChar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SpecialChar(struct soap *soap, const char *URL, enum ns1__SpecialChar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SpecialChar(soap, p, "ns1:SpecialChar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SpecialChar(struct soap *soap, const char *URL, enum ns1__SpecialChar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SpecialChar(soap, p, "ns1:SpecialChar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__SpecialChar * SOAP_FMAC4 soap_get_ns1__SpecialChar(struct soap*, enum ns1__SpecialChar *, const char*, const char*);

inline int soap_read_ns1__SpecialChar(struct soap *soap, enum ns1__SpecialChar *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__SpecialChar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SpecialChar(struct soap *soap, const char *URL, enum ns1__SpecialChar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SpecialChar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SpecialChar(struct soap *soap, enum ns1__SpecialChar *p)
{
	if (::soap_read_ns1__SpecialChar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InstrumentType_DEFINED
#define SOAP_TYPE_ns1__InstrumentType_DEFINED

inline void soap_default_ns1__InstrumentType(struct soap *soap, enum ns1__InstrumentType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__InstrumentType
	*a = SOAP_DEFAULT_ns1__InstrumentType;
#else
	*a = (enum ns1__InstrumentType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstrumentType(struct soap*, const char*, int, const enum ns1__InstrumentType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__InstrumentType2s(struct soap*, enum ns1__InstrumentType);
SOAP_FMAC3 enum ns1__InstrumentType * SOAP_FMAC4 soap_in_ns1__InstrumentType(struct soap*, const char*, enum ns1__InstrumentType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__InstrumentType(struct soap*, const char*, enum ns1__InstrumentType *);

SOAP_FMAC3 enum ns1__InstrumentType * SOAP_FMAC4 soap_new_ns1__InstrumentType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__InstrumentType(struct soap*, const enum ns1__InstrumentType *, const char*, const char*);

inline int soap_write_ns1__InstrumentType(struct soap *soap, enum ns1__InstrumentType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__InstrumentType(soap, p, "ns1:InstrumentType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstrumentType(struct soap *soap, const char *URL, enum ns1__InstrumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__InstrumentType(soap, p, "ns1:InstrumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InstrumentType(struct soap *soap, const char *URL, enum ns1__InstrumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__InstrumentType(soap, p, "ns1:InstrumentType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstrumentType(struct soap *soap, const char *URL, enum ns1__InstrumentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__InstrumentType(soap, p, "ns1:InstrumentType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__InstrumentType * SOAP_FMAC4 soap_get_ns1__InstrumentType(struct soap*, enum ns1__InstrumentType *, const char*, const char*);

inline int soap_read_ns1__InstrumentType(struct soap *soap, enum ns1__InstrumentType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__InstrumentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstrumentType(struct soap *soap, const char *URL, enum ns1__InstrumentType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InstrumentType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InstrumentType(struct soap *soap, enum ns1__InstrumentType *p)
{
	if (::soap_read_ns1__InstrumentType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SecondaryQualifierType_DEFINED
#define SOAP_TYPE_ns1__SecondaryQualifierType_DEFINED

inline void soap_default_ns1__SecondaryQualifierType(struct soap *soap, enum ns1__SecondaryQualifierType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SecondaryQualifierType
	*a = SOAP_DEFAULT_ns1__SecondaryQualifierType;
#else
	*a = (enum ns1__SecondaryQualifierType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SecondaryQualifierType(struct soap*, const char*, int, const enum ns1__SecondaryQualifierType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SecondaryQualifierType2s(struct soap*, enum ns1__SecondaryQualifierType);
SOAP_FMAC3 enum ns1__SecondaryQualifierType * SOAP_FMAC4 soap_in_ns1__SecondaryQualifierType(struct soap*, const char*, enum ns1__SecondaryQualifierType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SecondaryQualifierType(struct soap*, const char*, enum ns1__SecondaryQualifierType *);

SOAP_FMAC3 enum ns1__SecondaryQualifierType * SOAP_FMAC4 soap_new_ns1__SecondaryQualifierType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SecondaryQualifierType(struct soap*, const enum ns1__SecondaryQualifierType *, const char*, const char*);

inline int soap_write_ns1__SecondaryQualifierType(struct soap *soap, enum ns1__SecondaryQualifierType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__SecondaryQualifierType(soap, p, "ns1:SecondaryQualifierType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__SecondaryQualifierType(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierType(soap, p, "ns1:SecondaryQualifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SecondaryQualifierType(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierType(soap, p, "ns1:SecondaryQualifierType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SecondaryQualifierType(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierType(soap, p, "ns1:SecondaryQualifierType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__SecondaryQualifierType * SOAP_FMAC4 soap_get_ns1__SecondaryQualifierType(struct soap*, enum ns1__SecondaryQualifierType *, const char*, const char*);

inline int soap_read_ns1__SecondaryQualifierType(struct soap *soap, enum ns1__SecondaryQualifierType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__SecondaryQualifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SecondaryQualifierType(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SecondaryQualifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SecondaryQualifierType(struct soap *soap, enum ns1__SecondaryQualifierType *p)
{
	if (::soap_read_ns1__SecondaryQualifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SecondaryQualifierOperator_DEFINED
#define SOAP_TYPE_ns1__SecondaryQualifierOperator_DEFINED

inline void soap_default_ns1__SecondaryQualifierOperator(struct soap *soap, enum ns1__SecondaryQualifierOperator *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__SecondaryQualifierOperator
	*a = SOAP_DEFAULT_ns1__SecondaryQualifierOperator;
#else
	*a = (enum ns1__SecondaryQualifierOperator)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SecondaryQualifierOperator(struct soap*, const char*, int, const enum ns1__SecondaryQualifierOperator *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__SecondaryQualifierOperator2s(struct soap*, enum ns1__SecondaryQualifierOperator);
SOAP_FMAC3 enum ns1__SecondaryQualifierOperator * SOAP_FMAC4 soap_in_ns1__SecondaryQualifierOperator(struct soap*, const char*, enum ns1__SecondaryQualifierOperator *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__SecondaryQualifierOperator(struct soap*, const char*, enum ns1__SecondaryQualifierOperator *);

SOAP_FMAC3 enum ns1__SecondaryQualifierOperator * SOAP_FMAC4 soap_new_ns1__SecondaryQualifierOperator(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SecondaryQualifierOperator(struct soap*, const enum ns1__SecondaryQualifierOperator *, const char*, const char*);

inline int soap_write_ns1__SecondaryQualifierOperator(struct soap *soap, enum ns1__SecondaryQualifierOperator const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__SecondaryQualifierOperator(soap, p, "ns1:SecondaryQualifierOperator", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__SecondaryQualifierOperator(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierOperator const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierOperator(soap, p, "ns1:SecondaryQualifierOperator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SecondaryQualifierOperator(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierOperator const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierOperator(soap, p, "ns1:SecondaryQualifierOperator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SecondaryQualifierOperator(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierOperator const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__SecondaryQualifierOperator(soap, p, "ns1:SecondaryQualifierOperator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__SecondaryQualifierOperator * SOAP_FMAC4 soap_get_ns1__SecondaryQualifierOperator(struct soap*, enum ns1__SecondaryQualifierOperator *, const char*, const char*);

inline int soap_read_ns1__SecondaryQualifierOperator(struct soap *soap, enum ns1__SecondaryQualifierOperator *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__SecondaryQualifierOperator(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SecondaryQualifierOperator(struct soap *soap, const char *URL, enum ns1__SecondaryQualifierOperator *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SecondaryQualifierOperator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SecondaryQualifierOperator(struct soap *soap, enum ns1__SecondaryQualifierOperator *p)
{
	if (::soap_read_ns1__SecondaryQualifierOperator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MacroType_DEFINED
#define SOAP_TYPE_ns1__MacroType_DEFINED

inline void soap_default_ns1__MacroType(struct soap *soap, enum ns1__MacroType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__MacroType
	*a = SOAP_DEFAULT_ns1__MacroType;
#else
	*a = (enum ns1__MacroType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MacroType(struct soap*, const char*, int, const enum ns1__MacroType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MacroType2s(struct soap*, enum ns1__MacroType);
SOAP_FMAC3 enum ns1__MacroType * SOAP_FMAC4 soap_in_ns1__MacroType(struct soap*, const char*, enum ns1__MacroType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MacroType(struct soap*, const char*, enum ns1__MacroType *);

SOAP_FMAC3 enum ns1__MacroType * SOAP_FMAC4 soap_new_ns1__MacroType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MacroType(struct soap*, const enum ns1__MacroType *, const char*, const char*);

inline int soap_write_ns1__MacroType(struct soap *soap, enum ns1__MacroType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__MacroType(soap, p, "ns1:MacroType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__MacroType(struct soap *soap, const char *URL, enum ns1__MacroType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MacroType(soap, p, "ns1:MacroType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MacroType(struct soap *soap, const char *URL, enum ns1__MacroType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MacroType(soap, p, "ns1:MacroType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MacroType(struct soap *soap, const char *URL, enum ns1__MacroType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MacroType(soap, p, "ns1:MacroType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__MacroType * SOAP_FMAC4 soap_get_ns1__MacroType(struct soap*, enum ns1__MacroType *, const char*, const char*);

inline int soap_read_ns1__MacroType(struct soap *soap, enum ns1__MacroType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__MacroType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MacroType(struct soap *soap, const char *URL, enum ns1__MacroType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MacroType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MacroType(struct soap *soap, enum ns1__MacroType *p)
{
	if (::soap_read_ns1__MacroType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MarketSector_DEFINED
#define SOAP_TYPE_ns1__MarketSector_DEFINED

inline void soap_default_ns1__MarketSector(struct soap *soap, enum ns1__MarketSector *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__MarketSector
	*a = SOAP_DEFAULT_ns1__MarketSector;
#else
	*a = (enum ns1__MarketSector)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MarketSector(struct soap*, const char*, int, const enum ns1__MarketSector *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MarketSector2s(struct soap*, enum ns1__MarketSector);
SOAP_FMAC3 enum ns1__MarketSector * SOAP_FMAC4 soap_in_ns1__MarketSector(struct soap*, const char*, enum ns1__MarketSector *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MarketSector(struct soap*, const char*, enum ns1__MarketSector *);

SOAP_FMAC3 enum ns1__MarketSector * SOAP_FMAC4 soap_new_ns1__MarketSector(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MarketSector(struct soap*, const enum ns1__MarketSector *, const char*, const char*);

inline int soap_write_ns1__MarketSector(struct soap *soap, enum ns1__MarketSector const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__MarketSector(soap, p, "ns1:MarketSector", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__MarketSector(struct soap *soap, const char *URL, enum ns1__MarketSector const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MarketSector(soap, p, "ns1:MarketSector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MarketSector(struct soap *soap, const char *URL, enum ns1__MarketSector const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MarketSector(soap, p, "ns1:MarketSector", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MarketSector(struct soap *soap, const char *URL, enum ns1__MarketSector const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MarketSector(soap, p, "ns1:MarketSector", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__MarketSector * SOAP_FMAC4 soap_get_ns1__MarketSector(struct soap*, enum ns1__MarketSector *, const char*, const char*);

inline int soap_read_ns1__MarketSector(struct soap *soap, enum ns1__MarketSector *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__MarketSector(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MarketSector(struct soap *soap, const char *URL, enum ns1__MarketSector *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MarketSector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MarketSector(struct soap *soap, enum ns1__MarketSector *p)
{
	if (::soap_read_ns1__MarketSector(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap*, const char*, int, const ns1__RetrieveMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_in_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap*, const char*, ns1__RetrieveMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveMmktBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveMmktBvalDealsUploadResponse * soap_new_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveMmktBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveMmktBvalDealsUploadResponse * soap_new_req_ns1__RetrieveMmktBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveMmktBvalDealsUploadResponse *_p = ::soap_new_ns1__RetrieveMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveMmktBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveMmktBvalDealsUploadResponse * soap_new_set_ns1__RetrieveMmktBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	time_t *timestarted,
	ns1__MmktBvalDealInfos *deals,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveMmktBvalDealsUploadResponse *_p = ::soap_new_ns1__RetrieveMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveMmktBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__RetrieveMmktBvalDealsUploadResponse::timestarted = timestarted;
		_p->ns1__RetrieveMmktBvalDealsUploadResponse::deals = deals;
		_p->ns1__RetrieveMmktBvalDealsUploadResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_get_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap*, ns1__RetrieveMmktBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveMmktBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveMmktBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadResponse *p)
{
	if (::soap_read_ns1__RetrieveMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MmktBvalDealInfos_DEFINED
#define SOAP_TYPE_ns1__MmktBvalDealInfos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MmktBvalDealInfos(struct soap*, const char*, int, const ns1__MmktBvalDealInfos *, const char*);
SOAP_FMAC3 ns1__MmktBvalDealInfos * SOAP_FMAC4 soap_in_ns1__MmktBvalDealInfos(struct soap*, const char*, ns1__MmktBvalDealInfos *, const char*);
SOAP_FMAC1 ns1__MmktBvalDealInfos * SOAP_FMAC2 soap_instantiate_ns1__MmktBvalDealInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MmktBvalDealInfos * soap_new_ns1__MmktBvalDealInfos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MmktBvalDealInfos(soap, n, NULL, NULL, NULL);
}

inline ns1__MmktBvalDealInfos * soap_new_req_ns1__MmktBvalDealInfos(
	struct soap *soap)
{
	ns1__MmktBvalDealInfos *_p = ::soap_new_ns1__MmktBvalDealInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__MmktBvalDealInfos * soap_new_set_ns1__MmktBvalDealInfos(
	struct soap *soap,
	const std::vector<ns1__MmktBvalDealInformation *> & deal)
{
	ns1__MmktBvalDealInfos *_p = ::soap_new_ns1__MmktBvalDealInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MmktBvalDealInfos::deal = deal;
	}
	return _p;
}

inline int soap_write_ns1__MmktBvalDealInfos(struct soap *soap, ns1__MmktBvalDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInfos", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInfos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MmktBvalDealInfos(struct soap *soap, const char *URL, ns1__MmktBvalDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInfos", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MmktBvalDealInfos(struct soap *soap, const char *URL, ns1__MmktBvalDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInfos", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MmktBvalDealInfos(struct soap *soap, const char *URL, ns1__MmktBvalDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInfos", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInfos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MmktBvalDealInfos * SOAP_FMAC4 soap_get_ns1__MmktBvalDealInfos(struct soap*, ns1__MmktBvalDealInfos *, const char*, const char*);

inline int soap_read_ns1__MmktBvalDealInfos(struct soap *soap, ns1__MmktBvalDealInfos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MmktBvalDealInfos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MmktBvalDealInfos(struct soap *soap, const char *URL, ns1__MmktBvalDealInfos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MmktBvalDealInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MmktBvalDealInfos(struct soap *soap, ns1__MmktBvalDealInfos *p)
{
	if (::soap_read_ns1__MmktBvalDealInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MmktBvalDealInformation_DEFINED
#define SOAP_TYPE_ns1__MmktBvalDealInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MmktBvalDealInformation(struct soap*, const char*, int, const ns1__MmktBvalDealInformation *, const char*);
SOAP_FMAC3 ns1__MmktBvalDealInformation * SOAP_FMAC4 soap_in_ns1__MmktBvalDealInformation(struct soap*, const char*, ns1__MmktBvalDealInformation *, const char*);
SOAP_FMAC1 ns1__MmktBvalDealInformation * SOAP_FMAC2 soap_instantiate_ns1__MmktBvalDealInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MmktBvalDealInformation * soap_new_ns1__MmktBvalDealInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MmktBvalDealInformation(soap, n, NULL, NULL, NULL);
}

inline ns1__MmktBvalDealInformation * soap_new_req_ns1__MmktBvalDealInformation(
	struct soap *soap,
	ns1__ResponseStatus *statusCode)
{
	ns1__MmktBvalDealInformation *_p = ::soap_new_ns1__MmktBvalDealInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MmktBvalDealInformation::statusCode = statusCode;
	}
	return _p;
}

inline ns1__MmktBvalDealInformation * soap_new_set_ns1__MmktBvalDealInformation(
	struct soap *soap,
	ns1__ResponseStatus *statusCode,
	std::string *clientDealId,
	std::string *bbDealId,
	std::string *dtcCusip,
	std::string *ticker,
	std::string *programType,
	std::string *currency,
	std::string *maturity)
{
	ns1__MmktBvalDealInformation *_p = ::soap_new_ns1__MmktBvalDealInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MmktBvalDealInformation::statusCode = statusCode;
		_p->ns1__MmktBvalDealInformation::clientDealId = clientDealId;
		_p->ns1__MmktBvalDealInformation::bbDealId = bbDealId;
		_p->ns1__MmktBvalDealInformation::dtcCusip = dtcCusip;
		_p->ns1__MmktBvalDealInformation::ticker = ticker;
		_p->ns1__MmktBvalDealInformation::programType = programType;
		_p->ns1__MmktBvalDealInformation::currency = currency;
		_p->ns1__MmktBvalDealInformation::maturity = maturity;
	}
	return _p;
}

inline int soap_write_ns1__MmktBvalDealInformation(struct soap *soap, ns1__MmktBvalDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInformation", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MmktBvalDealInformation(struct soap *soap, const char *URL, ns1__MmktBvalDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInformation", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MmktBvalDealInformation(struct soap *soap, const char *URL, ns1__MmktBvalDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInformation", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MmktBvalDealInformation(struct soap *soap, const char *URL, ns1__MmktBvalDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalDealInformation", p->soap_type() == SOAP_TYPE_ns1__MmktBvalDealInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MmktBvalDealInformation * SOAP_FMAC4 soap_get_ns1__MmktBvalDealInformation(struct soap*, ns1__MmktBvalDealInformation *, const char*, const char*);

inline int soap_read_ns1__MmktBvalDealInformation(struct soap *soap, ns1__MmktBvalDealInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MmktBvalDealInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MmktBvalDealInformation(struct soap *soap, const char *URL, ns1__MmktBvalDealInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MmktBvalDealInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MmktBvalDealInformation(struct soap *soap, ns1__MmktBvalDealInformation *p)
{
	if (::soap_read_ns1__MmktBvalDealInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap*, const char*, int, const ns1__RetrieveMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_in_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap*, const char*, ns1__RetrieveMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveMmktBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveMmktBvalDealsUploadRequest * soap_new_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveMmktBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveMmktBvalDealsUploadRequest * soap_new_req_ns1__RetrieveMmktBvalDealsUploadRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveMmktBvalDealsUploadRequest *_p = ::soap_new_ns1__RetrieveMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveMmktBvalDealsUploadRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveMmktBvalDealsUploadRequest * soap_new_set_ns1__RetrieveMmktBvalDealsUploadRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveMmktBvalDealsUploadRequest *_p = ::soap_new_ns1__RetrieveMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveMmktBvalDealsUploadRequest::responseId = responseId;
		_p->ns1__RetrieveMmktBvalDealsUploadRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_get_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap*, ns1__RetrieveMmktBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveMmktBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveMmktBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveMmktBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveMmktBvalDealsUploadRequest *p)
{
	if (::soap_read_ns1__RetrieveMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitMmktBvalDealsUploadResponse(struct soap*, const char*, int, const ns1__SubmitMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_in_ns1__SubmitMmktBvalDealsUploadResponse(struct soap*, const char*, ns1__SubmitMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 ns1__SubmitMmktBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitMmktBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitMmktBvalDealsUploadResponse * soap_new_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitMmktBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitMmktBvalDealsUploadResponse * soap_new_req_ns1__SubmitMmktBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitMmktBvalDealsUploadResponse *_p = ::soap_new_ns1__SubmitMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitMmktBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitMmktBvalDealsUploadResponse * soap_new_set_ns1__SubmitMmktBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitMmktBvalDealsUploadResponse *_p = ::soap_new_ns1__SubmitMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitMmktBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, ns1__SubmitMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_get_ns1__SubmitMmktBvalDealsUploadResponse(struct soap*, ns1__SubmitMmktBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, ns1__SubmitMmktBvalDealsUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitMmktBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitMmktBvalDealsUploadResponse(struct soap *soap, ns1__SubmitMmktBvalDealsUploadResponse *p)
{
	if (::soap_read_ns1__SubmitMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitMmktBvalDealsUploadRequest(struct soap*, const char*, int, const ns1__SubmitMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_in_ns1__SubmitMmktBvalDealsUploadRequest(struct soap*, const char*, ns1__SubmitMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 ns1__SubmitMmktBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitMmktBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitMmktBvalDealsUploadRequest * soap_new_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitMmktBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitMmktBvalDealsUploadRequest * soap_new_req_ns1__SubmitMmktBvalDealsUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__MmktBvalHeaders *mmktBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitMmktBvalDealsUploadRequest *_p = ::soap_new_ns1__SubmitMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitMmktBvalDealsUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitMmktBvalDealsUploadRequest::mmktBvalHeaders = mmktBvalHeaders;
		_p->ns1__SubmitMmktBvalDealsUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline ns1__SubmitMmktBvalDealsUploadRequest * soap_new_set_ns1__SubmitMmktBvalDealsUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__MmktBvalHeaders *mmktBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitMmktBvalDealsUploadRequest *_p = ::soap_new_ns1__SubmitMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitMmktBvalDealsUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitMmktBvalDealsUploadRequest::mmktBvalHeaders = mmktBvalHeaders;
		_p->ns1__SubmitMmktBvalDealsUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline int soap_write_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, ns1__SubmitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitMmktBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitMmktBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_get_ns1__SubmitMmktBvalDealsUploadRequest(struct soap*, ns1__SubmitMmktBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, ns1__SubmitMmktBvalDealsUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitMmktBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitMmktBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitMmktBvalDealsUploadRequest(struct soap *soap, ns1__SubmitMmktBvalDealsUploadRequest *p)
{
	if (::soap_read_ns1__SubmitMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MmktBvalHeaders_DEFINED
#define SOAP_TYPE_ns1__MmktBvalHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MmktBvalHeaders(struct soap*, const char*, int, const ns1__MmktBvalHeaders *, const char*);
SOAP_FMAC3 ns1__MmktBvalHeaders * SOAP_FMAC4 soap_in_ns1__MmktBvalHeaders(struct soap*, const char*, ns1__MmktBvalHeaders *, const char*);
SOAP_FMAC1 ns1__MmktBvalHeaders * SOAP_FMAC2 soap_instantiate_ns1__MmktBvalHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MmktBvalHeaders * soap_new_ns1__MmktBvalHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MmktBvalHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__MmktBvalHeaders * soap_new_req_ns1__MmktBvalHeaders(
	struct soap *soap,
	const std::string& contentType,
	const std::string& mimeVersion,
	const std::string& contentEncoding,
	const std::string& contentDisposition,
	const std::string& fileName)
{
	ns1__MmktBvalHeaders *_p = ::soap_new_ns1__MmktBvalHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MmktBvalHeaders::contentType = contentType;
		_p->ns1__MmktBvalHeaders::mimeVersion = mimeVersion;
		_p->ns1__MmktBvalHeaders::contentEncoding = contentEncoding;
		_p->ns1__MmktBvalHeaders::contentDisposition = contentDisposition;
		_p->ns1__MmktBvalHeaders::fileName = fileName;
	}
	return _p;
}

inline ns1__MmktBvalHeaders * soap_new_set_ns1__MmktBvalHeaders(
	struct soap *soap,
	const std::string& contentType,
	const std::string& mimeVersion,
	const std::string& contentEncoding,
	const std::string& contentDisposition,
	const std::string& fileName)
{
	ns1__MmktBvalHeaders *_p = ::soap_new_ns1__MmktBvalHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MmktBvalHeaders::contentType = contentType;
		_p->ns1__MmktBvalHeaders::mimeVersion = mimeVersion;
		_p->ns1__MmktBvalHeaders::contentEncoding = contentEncoding;
		_p->ns1__MmktBvalHeaders::contentDisposition = contentDisposition;
		_p->ns1__MmktBvalHeaders::fileName = fileName;
	}
	return _p;
}

inline int soap_write_ns1__MmktBvalHeaders(struct soap *soap, ns1__MmktBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__MmktBvalHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MmktBvalHeaders(struct soap *soap, const char *URL, ns1__MmktBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__MmktBvalHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MmktBvalHeaders(struct soap *soap, const char *URL, ns1__MmktBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__MmktBvalHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MmktBvalHeaders(struct soap *soap, const char *URL, ns1__MmktBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MmktBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__MmktBvalHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MmktBvalHeaders * SOAP_FMAC4 soap_get_ns1__MmktBvalHeaders(struct soap*, ns1__MmktBvalHeaders *, const char*, const char*);

inline int soap_read_ns1__MmktBvalHeaders(struct soap *soap, ns1__MmktBvalHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MmktBvalHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MmktBvalHeaders(struct soap *soap, const char *URL, ns1__MmktBvalHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MmktBvalHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MmktBvalHeaders(struct soap *soap, ns1__MmktBvalHeaders *p)
{
	if (::soap_read_ns1__MmktBvalHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetFieldsResponse_DEFINED
#define SOAP_TYPE_ns1__GetFieldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFieldsResponse(struct soap*, const char*, int, const ns1__GetFieldsResponse *, const char*);
SOAP_FMAC3 ns1__GetFieldsResponse * SOAP_FMAC4 soap_in_ns1__GetFieldsResponse(struct soap*, const char*, ns1__GetFieldsResponse *, const char*);
SOAP_FMAC1 ns1__GetFieldsResponse * SOAP_FMAC2 soap_instantiate_ns1__GetFieldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetFieldsResponse * soap_new_ns1__GetFieldsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetFieldsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__GetFieldsResponse * soap_new_req_ns1__GetFieldsResponse(
	struct soap *soap,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetFieldsResponse *_p = ::soap_new_ns1__GetFieldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__GetFieldsResponse * soap_new_set_ns1__GetFieldsResponse(
	struct soap *soap,
	ns1__FieldInfos *fields,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetFieldsResponse *_p = ::soap_new_ns1__GetFieldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetFieldsResponse::fields = fields;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__GetFieldsResponse(struct soap *soap, ns1__GetFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsResponse", p->soap_type() == SOAP_TYPE_ns1__GetFieldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetFieldsResponse(struct soap *soap, const char *URL, ns1__GetFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsResponse", p->soap_type() == SOAP_TYPE_ns1__GetFieldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetFieldsResponse(struct soap *soap, const char *URL, ns1__GetFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsResponse", p->soap_type() == SOAP_TYPE_ns1__GetFieldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetFieldsResponse(struct soap *soap, const char *URL, ns1__GetFieldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsResponse", p->soap_type() == SOAP_TYPE_ns1__GetFieldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetFieldsResponse * SOAP_FMAC4 soap_get_ns1__GetFieldsResponse(struct soap*, ns1__GetFieldsResponse *, const char*, const char*);

inline int soap_read_ns1__GetFieldsResponse(struct soap *soap, ns1__GetFieldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetFieldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetFieldsResponse(struct soap *soap, const char *URL, ns1__GetFieldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetFieldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetFieldsResponse(struct soap *soap, ns1__GetFieldsResponse *p)
{
	if (::soap_read_ns1__GetFieldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetFieldsRequest_DEFINED
#define SOAP_TYPE_ns1__GetFieldsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFieldsRequest(struct soap*, const char*, int, const ns1__GetFieldsRequest *, const char*);
SOAP_FMAC3 ns1__GetFieldsRequest * SOAP_FMAC4 soap_in_ns1__GetFieldsRequest(struct soap*, const char*, ns1__GetFieldsRequest *, const char*);
SOAP_FMAC1 ns1__GetFieldsRequest * SOAP_FMAC2 soap_instantiate_ns1__GetFieldsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetFieldsRequest * soap_new_ns1__GetFieldsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetFieldsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__GetFieldsRequest * soap_new_req_ns1__GetFieldsRequest(
	struct soap *soap,
	ns1__FieldSearchCriteria *criteria)
{
	ns1__GetFieldsRequest *_p = ::soap_new_ns1__GetFieldsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetFieldsRequest::criteria = criteria;
	}
	return _p;
}

inline ns1__GetFieldsRequest * soap_new_set_ns1__GetFieldsRequest(
	struct soap *soap,
	ns1__FieldSearchCriteria *criteria)
{
	ns1__GetFieldsRequest *_p = ::soap_new_ns1__GetFieldsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetFieldsRequest::criteria = criteria;
	}
	return _p;
}

inline int soap_write_ns1__GetFieldsRequest(struct soap *soap, ns1__GetFieldsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsRequest", p->soap_type() == SOAP_TYPE_ns1__GetFieldsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetFieldsRequest(struct soap *soap, const char *URL, ns1__GetFieldsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsRequest", p->soap_type() == SOAP_TYPE_ns1__GetFieldsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetFieldsRequest(struct soap *soap, const char *URL, ns1__GetFieldsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsRequest", p->soap_type() == SOAP_TYPE_ns1__GetFieldsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetFieldsRequest(struct soap *soap, const char *URL, ns1__GetFieldsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFieldsRequest", p->soap_type() == SOAP_TYPE_ns1__GetFieldsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetFieldsRequest * SOAP_FMAC4 soap_get_ns1__GetFieldsRequest(struct soap*, ns1__GetFieldsRequest *, const char*, const char*);

inline int soap_read_ns1__GetFieldsRequest(struct soap *soap, ns1__GetFieldsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetFieldsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetFieldsRequest(struct soap *soap, const char *URL, ns1__GetFieldsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetFieldsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetFieldsRequest(struct soap *soap, ns1__GetFieldsRequest *p)
{
	if (::soap_read_ns1__GetFieldsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap*, const char*, int, const ns1__RetrieveOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_in_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap*, const char*, ns1__RetrieveOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveOtcBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveOtcBvalDealsUploadResponse * soap_new_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveOtcBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveOtcBvalDealsUploadResponse * soap_new_req_ns1__RetrieveOtcBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveOtcBvalDealsUploadResponse *_p = ::soap_new_ns1__RetrieveOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveOtcBvalDealsUploadResponse * soap_new_set_ns1__RetrieveOtcBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	time_t *timestarted,
	ns1__OtcDealInfos *deals,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveOtcBvalDealsUploadResponse *_p = ::soap_new_ns1__RetrieveOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__RetrieveOtcBvalDealsUploadResponse::timestarted = timestarted;
		_p->ns1__RetrieveOtcBvalDealsUploadResponse::deals = deals;
		_p->ns1__RetrieveOtcBvalDealsUploadResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_get_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap*, ns1__RetrieveOtcBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveOtcBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveOtcBvalDealsUploadResponse(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadResponse *p)
{
	if (::soap_read_ns1__RetrieveOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap*, const char*, int, const ns1__RetrieveOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_in_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap*, const char*, ns1__RetrieveOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveOtcBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveOtcBvalDealsUploadRequest * soap_new_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveOtcBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveOtcBvalDealsUploadRequest * soap_new_req_ns1__RetrieveOtcBvalDealsUploadRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveOtcBvalDealsUploadRequest *_p = ::soap_new_ns1__RetrieveOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcBvalDealsUploadRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveOtcBvalDealsUploadRequest * soap_new_set_ns1__RetrieveOtcBvalDealsUploadRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveOtcBvalDealsUploadRequest *_p = ::soap_new_ns1__RetrieveOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcBvalDealsUploadRequest::responseId = responseId;
		_p->ns1__RetrieveOtcBvalDealsUploadRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_get_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap*, ns1__RetrieveOtcBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveOtcBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveOtcBvalDealsUploadRequest(struct soap *soap, ns1__RetrieveOtcBvalDealsUploadRequest *p)
{
	if (::soap_read_ns1__RetrieveOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitOtcBvalDealsUploadResponse(struct soap*, const char*, int, const ns1__SubmitOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_in_ns1__SubmitOtcBvalDealsUploadResponse(struct soap*, const char*, ns1__SubmitOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 ns1__SubmitOtcBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitOtcBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitOtcBvalDealsUploadResponse * soap_new_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitOtcBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitOtcBvalDealsUploadResponse * soap_new_req_ns1__SubmitOtcBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitOtcBvalDealsUploadResponse *_p = ::soap_new_ns1__SubmitOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitOtcBvalDealsUploadResponse * soap_new_set_ns1__SubmitOtcBvalDealsUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitOtcBvalDealsUploadResponse *_p = ::soap_new_ns1__SubmitOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcBvalDealsUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, ns1__SubmitOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_get_ns1__SubmitOtcBvalDealsUploadResponse(struct soap*, ns1__SubmitOtcBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, ns1__SubmitOtcBvalDealsUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitOtcBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitOtcBvalDealsUploadResponse(struct soap *soap, ns1__SubmitOtcBvalDealsUploadResponse *p)
{
	if (::soap_read_ns1__SubmitOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitOtcBvalDealsUploadRequest(struct soap*, const char*, int, const ns1__SubmitOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_in_ns1__SubmitOtcBvalDealsUploadRequest(struct soap*, const char*, ns1__SubmitOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 ns1__SubmitOtcBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitOtcBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitOtcBvalDealsUploadRequest * soap_new_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitOtcBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitOtcBvalDealsUploadRequest * soap_new_req_ns1__SubmitOtcBvalDealsUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__OtcBvalHeaders *otcBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitOtcBvalDealsUploadRequest *_p = ::soap_new_ns1__SubmitOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcBvalDealsUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitOtcBvalDealsUploadRequest::otcBvalHeaders = otcBvalHeaders;
		_p->ns1__SubmitOtcBvalDealsUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline ns1__SubmitOtcBvalDealsUploadRequest * soap_new_set_ns1__SubmitOtcBvalDealsUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__OtcBvalHeaders *otcBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitOtcBvalDealsUploadRequest *_p = ::soap_new_ns1__SubmitOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcBvalDealsUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitOtcBvalDealsUploadRequest::otcBvalHeaders = otcBvalHeaders;
		_p->ns1__SubmitOtcBvalDealsUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline int soap_write_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, ns1__SubmitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcBvalDealsUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcBvalDealsUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_get_ns1__SubmitOtcBvalDealsUploadRequest(struct soap*, ns1__SubmitOtcBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, ns1__SubmitOtcBvalDealsUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitOtcBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitOtcBvalDealsUploadRequest(struct soap *soap, ns1__SubmitOtcBvalDealsUploadRequest *p)
{
	if (::soap_read_ns1__SubmitOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveOtcbvalUploadResponse(struct soap*, const char*, int, const ns1__RetrieveOtcbvalUploadResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadResponse * SOAP_FMAC4 soap_in_ns1__RetrieveOtcbvalUploadResponse(struct soap*, const char*, ns1__RetrieveOtcbvalUploadResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveOtcbvalUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveOtcbvalUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveOtcbvalUploadResponse * soap_new_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveOtcbvalUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveOtcbvalUploadResponse * soap_new_req_ns1__RetrieveOtcbvalUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveOtcbvalUploadResponse *_p = ::soap_new_ns1__RetrieveOtcbvalUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcbvalUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveOtcbvalUploadResponse * soap_new_set_ns1__RetrieveOtcbvalUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	std::string *response,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveOtcbvalUploadResponse *_p = ::soap_new_ns1__RetrieveOtcbvalUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcbvalUploadResponse::responseId = responseId;
		_p->ns1__RetrieveOtcbvalUploadResponse::response = response;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, ns1__RetrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadResponse * SOAP_FMAC4 soap_get_ns1__RetrieveOtcbvalUploadResponse(struct soap*, ns1__RetrieveOtcbvalUploadResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, ns1__RetrieveOtcbvalUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveOtcbvalUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveOtcbvalUploadResponse(struct soap *soap, ns1__RetrieveOtcbvalUploadResponse *p)
{
	if (::soap_read_ns1__RetrieveOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveOtcbvalUploadRequest(struct soap*, const char*, int, const ns1__RetrieveOtcbvalUploadRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadRequest * SOAP_FMAC4 soap_in_ns1__RetrieveOtcbvalUploadRequest(struct soap*, const char*, ns1__RetrieveOtcbvalUploadRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveOtcbvalUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveOtcbvalUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveOtcbvalUploadRequest * soap_new_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveOtcbvalUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveOtcbvalUploadRequest * soap_new_req_ns1__RetrieveOtcbvalUploadRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveOtcbvalUploadRequest *_p = ::soap_new_ns1__RetrieveOtcbvalUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcbvalUploadRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveOtcbvalUploadRequest * soap_new_set_ns1__RetrieveOtcbvalUploadRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveOtcbvalUploadRequest *_p = ::soap_new_ns1__RetrieveOtcbvalUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveOtcbvalUploadRequest::responseId = responseId;
		_p->ns1__RetrieveOtcbvalUploadRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, ns1__RetrieveOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadRequest * SOAP_FMAC4 soap_get_ns1__RetrieveOtcbvalUploadRequest(struct soap*, ns1__RetrieveOtcbvalUploadRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, ns1__RetrieveOtcbvalUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveOtcbvalUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__RetrieveOtcbvalUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveOtcbvalUploadRequest(struct soap *soap, ns1__RetrieveOtcbvalUploadRequest *p)
{
	if (::soap_read_ns1__RetrieveOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitOtcbvalUploadResponse(struct soap*, const char*, int, const ns1__SubmitOtcbvalUploadResponse *, const char*);
SOAP_FMAC3 ns1__SubmitOtcbvalUploadResponse * SOAP_FMAC4 soap_in_ns1__SubmitOtcbvalUploadResponse(struct soap*, const char*, ns1__SubmitOtcbvalUploadResponse *, const char*);
SOAP_FMAC1 ns1__SubmitOtcbvalUploadResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitOtcbvalUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitOtcbvalUploadResponse * soap_new_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitOtcbvalUploadResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitOtcbvalUploadResponse * soap_new_req_ns1__SubmitOtcbvalUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitOtcbvalUploadResponse *_p = ::soap_new_ns1__SubmitOtcbvalUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcbvalUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitOtcbvalUploadResponse * soap_new_set_ns1__SubmitOtcbvalUploadResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitOtcbvalUploadResponse *_p = ::soap_new_ns1__SubmitOtcbvalUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcbvalUploadResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, ns1__SubmitOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitOtcbvalUploadResponse * SOAP_FMAC4 soap_get_ns1__SubmitOtcbvalUploadResponse(struct soap*, ns1__SubmitOtcbvalUploadResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, ns1__SubmitOtcbvalUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitOtcbvalUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitOtcbvalUploadResponse(struct soap *soap, ns1__SubmitOtcbvalUploadResponse *p)
{
	if (::soap_read_ns1__SubmitOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitOtcbvalUploadRequest(struct soap*, const char*, int, const ns1__SubmitOtcbvalUploadRequest *, const char*);
SOAP_FMAC3 ns1__SubmitOtcbvalUploadRequest * SOAP_FMAC4 soap_in_ns1__SubmitOtcbvalUploadRequest(struct soap*, const char*, ns1__SubmitOtcbvalUploadRequest *, const char*);
SOAP_FMAC1 ns1__SubmitOtcbvalUploadRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitOtcbvalUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitOtcbvalUploadRequest * soap_new_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitOtcbvalUploadRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitOtcbvalUploadRequest * soap_new_req_ns1__SubmitOtcbvalUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__OtcBvalHeaders *otcBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitOtcbvalUploadRequest *_p = ::soap_new_ns1__SubmitOtcbvalUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcbvalUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitOtcbvalUploadRequest::otcBvalHeaders = otcBvalHeaders;
		_p->ns1__SubmitOtcbvalUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline ns1__SubmitOtcbvalUploadRequest * soap_new_set_ns1__SubmitOtcbvalUploadRequest(
	struct soap *soap,
	int usernumber,
	ns1__OtcBvalHeaders *otcBvalHeaders,
	const std::string& fileContent)
{
	ns1__SubmitOtcbvalUploadRequest *_p = ::soap_new_ns1__SubmitOtcbvalUploadRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitOtcbvalUploadRequest::usernumber = usernumber;
		_p->ns1__SubmitOtcbvalUploadRequest::otcBvalHeaders = otcBvalHeaders;
		_p->ns1__SubmitOtcbvalUploadRequest::fileContent = fileContent;
	}
	return _p;
}

inline int soap_write_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, ns1__SubmitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitOtcbvalUploadRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitOtcbvalUploadRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitOtcbvalUploadRequest * SOAP_FMAC4 soap_get_ns1__SubmitOtcbvalUploadRequest(struct soap*, ns1__SubmitOtcbvalUploadRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, ns1__SubmitOtcbvalUploadRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitOtcbvalUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, const char *URL, ns1__SubmitOtcbvalUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitOtcbvalUploadRequest(struct soap *soap, ns1__SubmitOtcbvalUploadRequest *p)
{
	if (::soap_read_ns1__SubmitOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetAllQuotesResponse(struct soap*, const char*, int, const ns1__RetrieveGetAllQuotesResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetAllQuotesResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetAllQuotesResponse(struct soap*, const char*, ns1__RetrieveGetAllQuotesResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetAllQuotesResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetAllQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetAllQuotesResponse * soap_new_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetAllQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetAllQuotesResponse * soap_new_req_ns1__RetrieveGetAllQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetAllQuotesResponse *_p = ::soap_new_ns1__RetrieveGetAllQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetAllQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetAllQuotesResponse * soap_new_set_ns1__RetrieveGetAllQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__QuotesHeaders *headers,
	time_t *timestarted,
	ns1__AllQuotesInstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetAllQuotesResponse *_p = ::soap_new_ns1__RetrieveGetAllQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetAllQuotesResponse::responseId = responseId;
		_p->ns1__RetrieveGetAllQuotesResponse::headers = headers;
		_p->ns1__RetrieveGetAllQuotesResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetAllQuotesResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetAllQuotesResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, ns1__RetrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetAllQuotesResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetAllQuotesResponse(struct soap*, ns1__RetrieveGetAllQuotesResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, ns1__RetrieveGetAllQuotesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetAllQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetAllQuotesResponse(struct soap *soap, ns1__RetrieveGetAllQuotesResponse *p)
{
	if (::soap_read_ns1__RetrieveGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetAllQuotesRequest(struct soap*, const char*, int, const ns1__RetrieveGetAllQuotesRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetAllQuotesRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetAllQuotesRequest(struct soap*, const char*, ns1__RetrieveGetAllQuotesRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetAllQuotesRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetAllQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetAllQuotesRequest * soap_new_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetAllQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetAllQuotesRequest * soap_new_req_ns1__RetrieveGetAllQuotesRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetAllQuotesRequest *_p = ::soap_new_ns1__RetrieveGetAllQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetAllQuotesRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetAllQuotesRequest * soap_new_set_ns1__RetrieveGetAllQuotesRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetAllQuotesRequest *_p = ::soap_new_ns1__RetrieveGetAllQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetAllQuotesRequest::responseId = responseId;
		_p->ns1__RetrieveGetAllQuotesRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, ns1__RetrieveGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetAllQuotesRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetAllQuotesRequest(struct soap*, ns1__RetrieveGetAllQuotesRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, ns1__RetrieveGetAllQuotesRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetAllQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetAllQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetAllQuotesRequest(struct soap *soap, ns1__RetrieveGetAllQuotesRequest *p)
{
	if (::soap_read_ns1__RetrieveGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetAllQuotesResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetAllQuotesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetAllQuotesResponse(struct soap*, const char*, int, const ns1__SubmitGetAllQuotesResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetAllQuotesResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetAllQuotesResponse(struct soap*, const char*, ns1__SubmitGetAllQuotesResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetAllQuotesResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetAllQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetAllQuotesResponse * soap_new_ns1__SubmitGetAllQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetAllQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetAllQuotesResponse * soap_new_req_ns1__SubmitGetAllQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetAllQuotesResponse *_p = ::soap_new_ns1__SubmitGetAllQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetAllQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetAllQuotesResponse * soap_new_set_ns1__SubmitGetAllQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetAllQuotesResponse *_p = ::soap_new_ns1__SubmitGetAllQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetAllQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetAllQuotesResponse(struct soap *soap, ns1__SubmitGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetAllQuotesResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetAllQuotesResponse(struct soap*, ns1__SubmitGetAllQuotesResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetAllQuotesResponse(struct soap *soap, ns1__SubmitGetAllQuotesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetAllQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetAllQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetAllQuotesResponse(struct soap *soap, ns1__SubmitGetAllQuotesResponse *p)
{
	if (::soap_read_ns1__SubmitGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetAllQuotesRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetAllQuotesRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetAllQuotesRequest(struct soap*, const char*, int, const ns1__SubmitGetAllQuotesRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetAllQuotesRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetAllQuotesRequest(struct soap*, const char*, ns1__SubmitGetAllQuotesRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetAllQuotesRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetAllQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetAllQuotesRequest * soap_new_ns1__SubmitGetAllQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetAllQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetAllQuotesRequest * soap_new_req_ns1__SubmitGetAllQuotesRequest(
	struct soap *soap,
	ns1__QuotesHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetAllQuotesRequest *_p = ::soap_new_ns1__SubmitGetAllQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetAllQuotesRequest::headers = headers;
		_p->ns1__SubmitGetAllQuotesRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetAllQuotesRequest * soap_new_set_ns1__SubmitGetAllQuotesRequest(
	struct soap *soap,
	ns1__QuotesHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetAllQuotesRequest *_p = ::soap_new_ns1__SubmitGetAllQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetAllQuotesRequest::headers = headers;
		_p->ns1__SubmitGetAllQuotesRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetAllQuotesRequest(struct soap *soap, ns1__SubmitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetAllQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetAllQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetAllQuotesRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetAllQuotesRequest(struct soap*, ns1__SubmitGetAllQuotesRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetAllQuotesRequest(struct soap *soap, ns1__SubmitGetAllQuotesRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetAllQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetAllQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetAllQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetAllQuotesRequest(struct soap *soap, ns1__SubmitGetAllQuotesRequest *p)
{
	if (::soap_read_ns1__SubmitGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetQuotesResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetQuotesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetQuotesResponse(struct soap*, const char*, int, const ns1__RetrieveGetQuotesResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetQuotesResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetQuotesResponse(struct soap*, const char*, ns1__RetrieveGetQuotesResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetQuotesResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetQuotesResponse * soap_new_ns1__RetrieveGetQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetQuotesResponse * soap_new_req_ns1__RetrieveGetQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetQuotesResponse *_p = ::soap_new_ns1__RetrieveGetQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetQuotesResponse * soap_new_set_ns1__RetrieveGetQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__QuotesHeaders *headers,
	time_t *timestarted,
	ns1__QuotesInstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetQuotesResponse *_p = ::soap_new_ns1__RetrieveGetQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetQuotesResponse::responseId = responseId;
		_p->ns1__RetrieveGetQuotesResponse::headers = headers;
		_p->ns1__RetrieveGetQuotesResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetQuotesResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetQuotesResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetQuotesResponse(struct soap *soap, ns1__RetrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetQuotesResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetQuotesResponse(struct soap*, ns1__RetrieveGetQuotesResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetQuotesResponse(struct soap *soap, ns1__RetrieveGetQuotesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetQuotesResponse(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetQuotesResponse(struct soap *soap, ns1__RetrieveGetQuotesResponse *p)
{
	if (::soap_read_ns1__RetrieveGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetQuotesRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetQuotesRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetQuotesRequest(struct soap*, const char*, int, const ns1__RetrieveGetQuotesRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetQuotesRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetQuotesRequest(struct soap*, const char*, ns1__RetrieveGetQuotesRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetQuotesRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetQuotesRequest * soap_new_ns1__RetrieveGetQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetQuotesRequest * soap_new_req_ns1__RetrieveGetQuotesRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetQuotesRequest *_p = ::soap_new_ns1__RetrieveGetQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetQuotesRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetQuotesRequest * soap_new_set_ns1__RetrieveGetQuotesRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetQuotesRequest *_p = ::soap_new_ns1__RetrieveGetQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetQuotesRequest::responseId = responseId;
		_p->ns1__RetrieveGetQuotesRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetQuotesRequest(struct soap *soap, ns1__RetrieveGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetQuotesRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetQuotesRequest(struct soap*, ns1__RetrieveGetQuotesRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetQuotesRequest(struct soap *soap, ns1__RetrieveGetQuotesRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetQuotesRequest(struct soap *soap, const char *URL, ns1__RetrieveGetQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetQuotesRequest(struct soap *soap, ns1__RetrieveGetQuotesRequest *p)
{
	if (::soap_read_ns1__RetrieveGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetQuotesResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetQuotesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetQuotesResponse(struct soap*, const char*, int, const ns1__SubmitGetQuotesResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetQuotesResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetQuotesResponse(struct soap*, const char*, ns1__SubmitGetQuotesResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetQuotesResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetQuotesResponse * soap_new_ns1__SubmitGetQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetQuotesResponse * soap_new_req_ns1__SubmitGetQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetQuotesResponse *_p = ::soap_new_ns1__SubmitGetQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetQuotesResponse * soap_new_set_ns1__SubmitGetQuotesResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetQuotesResponse *_p = ::soap_new_ns1__SubmitGetQuotesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetQuotesResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetQuotesResponse(struct soap *soap, ns1__SubmitGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetQuotesResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetQuotesResponse(struct soap*, ns1__SubmitGetQuotesResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetQuotesResponse(struct soap *soap, ns1__SubmitGetQuotesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetQuotesResponse(struct soap *soap, const char *URL, ns1__SubmitGetQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetQuotesResponse(struct soap *soap, ns1__SubmitGetQuotesResponse *p)
{
	if (::soap_read_ns1__SubmitGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetQuotesRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetQuotesRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetQuotesRequest(struct soap*, const char*, int, const ns1__SubmitGetQuotesRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetQuotesRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetQuotesRequest(struct soap*, const char*, ns1__SubmitGetQuotesRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetQuotesRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetQuotesRequest * soap_new_ns1__SubmitGetQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetQuotesRequest * soap_new_req_ns1__SubmitGetQuotesRequest(
	struct soap *soap,
	ns1__QuotesHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetQuotesRequest *_p = ::soap_new_ns1__SubmitGetQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetQuotesRequest::headers = headers;
		_p->ns1__SubmitGetQuotesRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetQuotesRequest * soap_new_set_ns1__SubmitGetQuotesRequest(
	struct soap *soap,
	ns1__QuotesHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetQuotesRequest *_p = ::soap_new_ns1__SubmitGetQuotesRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetQuotesRequest::headers = headers;
		_p->ns1__SubmitGetQuotesRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetQuotesRequest(struct soap *soap, ns1__SubmitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetQuotesRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetQuotesRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetQuotesRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetQuotesRequest(struct soap*, ns1__SubmitGetQuotesRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetQuotesRequest(struct soap *soap, ns1__SubmitGetQuotesRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetQuotesRequest(struct soap *soap, const char *URL, ns1__SubmitGetQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetQuotesRequest(struct soap *soap, ns1__SubmitGetQuotesRequest *p)
{
	if (::soap_read_ns1__SubmitGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetActionsResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetActionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetActionsResponse(struct soap*, const char*, int, const ns1__RetrieveGetActionsResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetActionsResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetActionsResponse(struct soap*, const char*, ns1__RetrieveGetActionsResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetActionsResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetActionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetActionsResponse * soap_new_ns1__RetrieveGetActionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetActionsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetActionsResponse * soap_new_req_ns1__RetrieveGetActionsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetActionsResponse *_p = ::soap_new_ns1__RetrieveGetActionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetActionsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetActionsResponse * soap_new_set_ns1__RetrieveGetActionsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetActionsHeaders *headers,
	time_t *timestarted,
	ns1__ActionsInstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetActionsResponse *_p = ::soap_new_ns1__RetrieveGetActionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetActionsResponse::responseId = responseId;
		_p->ns1__RetrieveGetActionsResponse::headers = headers;
		_p->ns1__RetrieveGetActionsResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetActionsResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetActionsResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetActionsResponse(struct soap *soap, ns1__RetrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetActionsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetActionsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetActionsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetActionsResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetActionsResponse(struct soap*, ns1__RetrieveGetActionsResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetActionsResponse(struct soap *soap, ns1__RetrieveGetActionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetActionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetActionsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetActionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetActionsResponse(struct soap *soap, ns1__RetrieveGetActionsResponse *p)
{
	if (::soap_read_ns1__RetrieveGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetActionsRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetActionsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetActionsRequest(struct soap*, const char*, int, const ns1__RetrieveGetActionsRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetActionsRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetActionsRequest(struct soap*, const char*, ns1__RetrieveGetActionsRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetActionsRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetActionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetActionsRequest * soap_new_ns1__RetrieveGetActionsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetActionsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetActionsRequest * soap_new_req_ns1__RetrieveGetActionsRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetActionsRequest *_p = ::soap_new_ns1__RetrieveGetActionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetActionsRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetActionsRequest * soap_new_set_ns1__RetrieveGetActionsRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetActionsRequest *_p = ::soap_new_ns1__RetrieveGetActionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetActionsRequest::responseId = responseId;
		_p->ns1__RetrieveGetActionsRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetActionsRequest(struct soap *soap, ns1__RetrieveGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetActionsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetActionsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetActionsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetActionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetActionsRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetActionsRequest(struct soap*, ns1__RetrieveGetActionsRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetActionsRequest(struct soap *soap, ns1__RetrieveGetActionsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetActionsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetActionsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetActionsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetActionsRequest(struct soap *soap, ns1__RetrieveGetActionsRequest *p)
{
	if (::soap_read_ns1__RetrieveGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetActionsResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetActionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetActionsResponse(struct soap*, const char*, int, const ns1__SubmitGetActionsResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetActionsResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetActionsResponse(struct soap*, const char*, ns1__SubmitGetActionsResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetActionsResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetActionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetActionsResponse * soap_new_ns1__SubmitGetActionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetActionsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetActionsResponse * soap_new_req_ns1__SubmitGetActionsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetActionsResponse *_p = ::soap_new_ns1__SubmitGetActionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetActionsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetActionsResponse * soap_new_set_ns1__SubmitGetActionsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetActionsResponse *_p = ::soap_new_ns1__SubmitGetActionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetActionsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetActionsResponse(struct soap *soap, ns1__SubmitGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetActionsResponse(struct soap *soap, const char *URL, ns1__SubmitGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetActionsResponse(struct soap *soap, const char *URL, ns1__SubmitGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetActionsResponse(struct soap *soap, const char *URL, ns1__SubmitGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetActionsResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetActionsResponse(struct soap*, ns1__SubmitGetActionsResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetActionsResponse(struct soap *soap, ns1__SubmitGetActionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetActionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetActionsResponse(struct soap *soap, const char *URL, ns1__SubmitGetActionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetActionsResponse(struct soap *soap, ns1__SubmitGetActionsResponse *p)
{
	if (::soap_read_ns1__SubmitGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetActionsRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetActionsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetActionsRequest(struct soap*, const char*, int, const ns1__SubmitGetActionsRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetActionsRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetActionsRequest(struct soap*, const char*, ns1__SubmitGetActionsRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetActionsRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetActionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetActionsRequest * soap_new_ns1__SubmitGetActionsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetActionsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetActionsRequest * soap_new_req_ns1__SubmitGetActionsRequest(
	struct soap *soap,
	ns1__GetActionsHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetActionsRequest *_p = ::soap_new_ns1__SubmitGetActionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetActionsRequest::headers = headers;
		_p->ns1__SubmitGetActionsRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetActionsRequest * soap_new_set_ns1__SubmitGetActionsRequest(
	struct soap *soap,
	ns1__GetActionsHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetActionsRequest *_p = ::soap_new_ns1__SubmitGetActionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetActionsRequest::headers = headers;
		_p->ns1__SubmitGetActionsRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetActionsRequest(struct soap *soap, ns1__SubmitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetActionsRequest(struct soap *soap, const char *URL, ns1__SubmitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetActionsRequest(struct soap *soap, const char *URL, ns1__SubmitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetActionsRequest(struct soap *soap, const char *URL, ns1__SubmitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetActionsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetActionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetActionsRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetActionsRequest(struct soap*, ns1__SubmitGetActionsRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetActionsRequest(struct soap *soap, ns1__SubmitGetActionsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetActionsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetActionsRequest(struct soap *soap, const char *URL, ns1__SubmitGetActionsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetActionsRequest(struct soap *soap, ns1__SubmitGetActionsRequest *p)
{
	if (::soap_read_ns1__SubmitGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetPortfolioValidationResponse_DEFINED
#define SOAP_TYPE_ns1__GetPortfolioValidationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetPortfolioValidationResponse(struct soap*, const char*, int, const ns1__GetPortfolioValidationResponse *, const char*);
SOAP_FMAC3 ns1__GetPortfolioValidationResponse * SOAP_FMAC4 soap_in_ns1__GetPortfolioValidationResponse(struct soap*, const char*, ns1__GetPortfolioValidationResponse *, const char*);
SOAP_FMAC1 ns1__GetPortfolioValidationResponse * SOAP_FMAC2 soap_instantiate_ns1__GetPortfolioValidationResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetPortfolioValidationResponse * soap_new_ns1__GetPortfolioValidationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetPortfolioValidationResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__GetPortfolioValidationResponse * soap_new_req_ns1__GetPortfolioValidationResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetPortfolioValidationResponse *_p = ::soap_new_ns1__GetPortfolioValidationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPortfolioValidationResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__GetPortfolioValidationResponse * soap_new_set_ns1__GetPortfolioValidationResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetPortfolioValidationHeaders *headers,
	ns1__Fields *fields,
	time_t *timestarted,
	ns1__InstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetPortfolioValidationResponse *_p = ::soap_new_ns1__GetPortfolioValidationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPortfolioValidationResponse::responseId = responseId;
		_p->ns1__GetPortfolioValidationResponse::headers = headers;
		_p->ns1__GetPortfolioValidationResponse::fields = fields;
		_p->ns1__GetPortfolioValidationResponse::timestarted = timestarted;
		_p->ns1__GetPortfolioValidationResponse::instrumentDatas = instrumentDatas;
		_p->ns1__GetPortfolioValidationResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__GetPortfolioValidationResponse(struct soap *soap, ns1__GetPortfolioValidationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationResponse", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetPortfolioValidationResponse(struct soap *soap, const char *URL, ns1__GetPortfolioValidationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationResponse", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetPortfolioValidationResponse(struct soap *soap, const char *URL, ns1__GetPortfolioValidationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationResponse", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetPortfolioValidationResponse(struct soap *soap, const char *URL, ns1__GetPortfolioValidationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationResponse", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetPortfolioValidationResponse * SOAP_FMAC4 soap_get_ns1__GetPortfolioValidationResponse(struct soap*, ns1__GetPortfolioValidationResponse *, const char*, const char*);

inline int soap_read_ns1__GetPortfolioValidationResponse(struct soap *soap, ns1__GetPortfolioValidationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetPortfolioValidationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetPortfolioValidationResponse(struct soap *soap, const char *URL, ns1__GetPortfolioValidationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetPortfolioValidationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetPortfolioValidationResponse(struct soap *soap, ns1__GetPortfolioValidationResponse *p)
{
	if (::soap_read_ns1__GetPortfolioValidationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetPortfolioValidationRequest_DEFINED
#define SOAP_TYPE_ns1__GetPortfolioValidationRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetPortfolioValidationRequest(struct soap*, const char*, int, const ns1__GetPortfolioValidationRequest *, const char*);
SOAP_FMAC3 ns1__GetPortfolioValidationRequest * SOAP_FMAC4 soap_in_ns1__GetPortfolioValidationRequest(struct soap*, const char*, ns1__GetPortfolioValidationRequest *, const char*);
SOAP_FMAC1 ns1__GetPortfolioValidationRequest * SOAP_FMAC2 soap_instantiate_ns1__GetPortfolioValidationRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetPortfolioValidationRequest * soap_new_ns1__GetPortfolioValidationRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetPortfolioValidationRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__GetPortfolioValidationRequest * soap_new_req_ns1__GetPortfolioValidationRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__GetPortfolioValidationRequest *_p = ::soap_new_ns1__GetPortfolioValidationRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPortfolioValidationRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__GetPortfolioValidationRequest * soap_new_set_ns1__GetPortfolioValidationRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__GetPortfolioValidationRequest *_p = ::soap_new_ns1__GetPortfolioValidationRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPortfolioValidationRequest::responseId = responseId;
		_p->ns1__GetPortfolioValidationRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__GetPortfolioValidationRequest(struct soap *soap, ns1__GetPortfolioValidationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationRequest", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetPortfolioValidationRequest(struct soap *soap, const char *URL, ns1__GetPortfolioValidationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationRequest", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetPortfolioValidationRequest(struct soap *soap, const char *URL, ns1__GetPortfolioValidationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationRequest", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetPortfolioValidationRequest(struct soap *soap, const char *URL, ns1__GetPortfolioValidationRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationRequest", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetPortfolioValidationRequest * SOAP_FMAC4 soap_get_ns1__GetPortfolioValidationRequest(struct soap*, ns1__GetPortfolioValidationRequest *, const char*, const char*);

inline int soap_read_ns1__GetPortfolioValidationRequest(struct soap *soap, ns1__GetPortfolioValidationRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetPortfolioValidationRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetPortfolioValidationRequest(struct soap *soap, const char *URL, ns1__GetPortfolioValidationRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetPortfolioValidationRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetPortfolioValidationRequest(struct soap *soap, ns1__GetPortfolioValidationRequest *p)
{
	if (::soap_read_ns1__GetPortfolioValidationRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetCompanyResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetCompanyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetCompanyResponse(struct soap*, const char*, int, const ns1__RetrieveGetCompanyResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetCompanyResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetCompanyResponse(struct soap*, const char*, ns1__RetrieveGetCompanyResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetCompanyResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetCompanyResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetCompanyResponse * soap_new_ns1__RetrieveGetCompanyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetCompanyResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetCompanyResponse * soap_new_req_ns1__RetrieveGetCompanyResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetCompanyResponse *_p = ::soap_new_ns1__RetrieveGetCompanyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetCompanyResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetCompanyResponse * soap_new_set_ns1__RetrieveGetCompanyResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetCompanyHeaders *headers,
	ns1__Fields *fields,
	time_t *timestarted,
	ns1__InstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetCompanyResponse *_p = ::soap_new_ns1__RetrieveGetCompanyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetCompanyResponse::responseId = responseId;
		_p->ns1__RetrieveGetCompanyResponse::headers = headers;
		_p->ns1__RetrieveGetCompanyResponse::fields = fields;
		_p->ns1__RetrieveGetCompanyResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetCompanyResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetCompanyResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetCompanyResponse(struct soap *soap, ns1__RetrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetCompanyResponse(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetCompanyResponse(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetCompanyResponse(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetCompanyResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetCompanyResponse(struct soap*, ns1__RetrieveGetCompanyResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetCompanyResponse(struct soap *soap, ns1__RetrieveGetCompanyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetCompanyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetCompanyResponse(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetCompanyResponse(struct soap *soap, ns1__RetrieveGetCompanyResponse *p)
{
	if (::soap_read_ns1__RetrieveGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetCompanyRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetCompanyRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetCompanyRequest(struct soap*, const char*, int, const ns1__RetrieveGetCompanyRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetCompanyRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetCompanyRequest(struct soap*, const char*, ns1__RetrieveGetCompanyRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetCompanyRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetCompanyRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetCompanyRequest * soap_new_ns1__RetrieveGetCompanyRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetCompanyRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetCompanyRequest * soap_new_req_ns1__RetrieveGetCompanyRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetCompanyRequest *_p = ::soap_new_ns1__RetrieveGetCompanyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetCompanyRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetCompanyRequest * soap_new_set_ns1__RetrieveGetCompanyRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetCompanyRequest *_p = ::soap_new_ns1__RetrieveGetCompanyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetCompanyRequest::responseId = responseId;
		_p->ns1__RetrieveGetCompanyRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetCompanyRequest(struct soap *soap, ns1__RetrieveGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetCompanyRequest(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetCompanyRequest(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetCompanyRequest(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetCompanyRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetCompanyRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetCompanyRequest(struct soap*, ns1__RetrieveGetCompanyRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetCompanyRequest(struct soap *soap, ns1__RetrieveGetCompanyRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetCompanyRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetCompanyRequest(struct soap *soap, const char *URL, ns1__RetrieveGetCompanyRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetCompanyRequest(struct soap *soap, ns1__RetrieveGetCompanyRequest *p)
{
	if (::soap_read_ns1__RetrieveGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetCompanyResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetCompanyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetCompanyResponse(struct soap*, const char*, int, const ns1__SubmitGetCompanyResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetCompanyResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetCompanyResponse(struct soap*, const char*, ns1__SubmitGetCompanyResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetCompanyResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetCompanyResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetCompanyResponse * soap_new_ns1__SubmitGetCompanyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetCompanyResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetCompanyResponse * soap_new_req_ns1__SubmitGetCompanyResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetCompanyResponse *_p = ::soap_new_ns1__SubmitGetCompanyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetCompanyResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetCompanyResponse * soap_new_set_ns1__SubmitGetCompanyResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetCompanyResponse *_p = ::soap_new_ns1__SubmitGetCompanyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetCompanyResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetCompanyResponse(struct soap *soap, ns1__SubmitGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetCompanyResponse(struct soap *soap, const char *URL, ns1__SubmitGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetCompanyResponse(struct soap *soap, const char *URL, ns1__SubmitGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetCompanyResponse(struct soap *soap, const char *URL, ns1__SubmitGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetCompanyResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetCompanyResponse(struct soap*, ns1__SubmitGetCompanyResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetCompanyResponse(struct soap *soap, ns1__SubmitGetCompanyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetCompanyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetCompanyResponse(struct soap *soap, const char *URL, ns1__SubmitGetCompanyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetCompanyResponse(struct soap *soap, ns1__SubmitGetCompanyResponse *p)
{
	if (::soap_read_ns1__SubmitGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetCompanyRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetCompanyRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetCompanyRequest(struct soap*, const char*, int, const ns1__SubmitGetCompanyRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetCompanyRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetCompanyRequest(struct soap*, const char*, ns1__SubmitGetCompanyRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetCompanyRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetCompanyRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetCompanyRequest * soap_new_ns1__SubmitGetCompanyRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetCompanyRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetCompanyRequest * soap_new_req_ns1__SubmitGetCompanyRequest(
	struct soap *soap,
	ns1__GetCompanyHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetCompanyRequest *_p = ::soap_new_ns1__SubmitGetCompanyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetCompanyRequest::headers = headers;
		_p->ns1__SubmitGetCompanyRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetCompanyRequest * soap_new_set_ns1__SubmitGetCompanyRequest(
	struct soap *soap,
	ns1__GetCompanyHeaders *headers,
	ns1__FieldSet *fieldset,
	ns1__Fields *fields,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetCompanyRequest *_p = ::soap_new_ns1__SubmitGetCompanyRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetCompanyRequest::headers = headers;
		_p->ns1__SubmitGetCompanyRequest::fieldset = fieldset;
		_p->ns1__SubmitGetCompanyRequest::fields = fields;
		_p->ns1__SubmitGetCompanyRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetCompanyRequest(struct soap *soap, ns1__SubmitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetCompanyRequest(struct soap *soap, const char *URL, ns1__SubmitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetCompanyRequest(struct soap *soap, const char *URL, ns1__SubmitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetCompanyRequest(struct soap *soap, const char *URL, ns1__SubmitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetCompanyRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetCompanyRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetCompanyRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetCompanyRequest(struct soap*, ns1__SubmitGetCompanyRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetCompanyRequest(struct soap *soap, ns1__SubmitGetCompanyRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetCompanyRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetCompanyRequest(struct soap *soap, const char *URL, ns1__SubmitGetCompanyRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetCompanyRequest(struct soap *soap, ns1__SubmitGetCompanyRequest *p)
{
	if (::soap_read_ns1__SubmitGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetFundamentalsResponse(struct soap*, const char*, int, const ns1__RetrieveGetFundamentalsResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetFundamentalsResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetFundamentalsResponse(struct soap*, const char*, ns1__RetrieveGetFundamentalsResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetFundamentalsResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetFundamentalsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetFundamentalsResponse * soap_new_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetFundamentalsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetFundamentalsResponse * soap_new_req_ns1__RetrieveGetFundamentalsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetFundamentalsResponse *_p = ::soap_new_ns1__RetrieveGetFundamentalsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetFundamentalsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetFundamentalsResponse * soap_new_set_ns1__RetrieveGetFundamentalsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetFundamentalsHeaders *headers,
	ns1__Fields *fields,
	time_t *timestarted,
	ns1__FundInstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetFundamentalsResponse *_p = ::soap_new_ns1__RetrieveGetFundamentalsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetFundamentalsResponse::responseId = responseId;
		_p->ns1__RetrieveGetFundamentalsResponse::headers = headers;
		_p->ns1__RetrieveGetFundamentalsResponse::fields = fields;
		_p->ns1__RetrieveGetFundamentalsResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetFundamentalsResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetFundamentalsResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, ns1__RetrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetFundamentalsResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetFundamentalsResponse(struct soap*, ns1__RetrieveGetFundamentalsResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, ns1__RetrieveGetFundamentalsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetFundamentalsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetFundamentalsResponse(struct soap *soap, ns1__RetrieveGetFundamentalsResponse *p)
{
	if (::soap_read_ns1__RetrieveGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetFundamentalsRequest(struct soap*, const char*, int, const ns1__RetrieveGetFundamentalsRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetFundamentalsRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetFundamentalsRequest(struct soap*, const char*, ns1__RetrieveGetFundamentalsRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetFundamentalsRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetFundamentalsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetFundamentalsRequest * soap_new_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetFundamentalsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetFundamentalsRequest * soap_new_req_ns1__RetrieveGetFundamentalsRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetFundamentalsRequest *_p = ::soap_new_ns1__RetrieveGetFundamentalsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetFundamentalsRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetFundamentalsRequest * soap_new_set_ns1__RetrieveGetFundamentalsRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetFundamentalsRequest *_p = ::soap_new_ns1__RetrieveGetFundamentalsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetFundamentalsRequest::responseId = responseId;
		_p->ns1__RetrieveGetFundamentalsRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, ns1__RetrieveGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetFundamentalsRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetFundamentalsRequest(struct soap*, ns1__RetrieveGetFundamentalsRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, ns1__RetrieveGetFundamentalsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetFundamentalsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__RetrieveGetFundamentalsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetFundamentalsRequest(struct soap *soap, ns1__RetrieveGetFundamentalsRequest *p)
{
	if (::soap_read_ns1__RetrieveGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetFundamentalsResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetFundamentalsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetFundamentalsResponse(struct soap*, const char*, int, const ns1__SubmitGetFundamentalsResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetFundamentalsResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetFundamentalsResponse(struct soap*, const char*, ns1__SubmitGetFundamentalsResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetFundamentalsResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetFundamentalsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetFundamentalsResponse * soap_new_ns1__SubmitGetFundamentalsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetFundamentalsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetFundamentalsResponse * soap_new_req_ns1__SubmitGetFundamentalsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetFundamentalsResponse *_p = ::soap_new_ns1__SubmitGetFundamentalsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetFundamentalsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetFundamentalsResponse * soap_new_set_ns1__SubmitGetFundamentalsResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetFundamentalsResponse *_p = ::soap_new_ns1__SubmitGetFundamentalsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetFundamentalsResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetFundamentalsResponse(struct soap *soap, ns1__SubmitGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetFundamentalsResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetFundamentalsResponse(struct soap*, ns1__SubmitGetFundamentalsResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetFundamentalsResponse(struct soap *soap, ns1__SubmitGetFundamentalsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetFundamentalsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetFundamentalsResponse(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetFundamentalsResponse(struct soap *soap, ns1__SubmitGetFundamentalsResponse *p)
{
	if (::soap_read_ns1__SubmitGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetFundamentalsRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetFundamentalsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetFundamentalsRequest(struct soap*, const char*, int, const ns1__SubmitGetFundamentalsRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetFundamentalsRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetFundamentalsRequest(struct soap*, const char*, ns1__SubmitGetFundamentalsRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetFundamentalsRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetFundamentalsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetFundamentalsRequest * soap_new_ns1__SubmitGetFundamentalsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetFundamentalsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetFundamentalsRequest * soap_new_req_ns1__SubmitGetFundamentalsRequest(
	struct soap *soap,
	ns1__GetFundamentalsHeaders *headers,
	ns1__Fields *fields,
	ns1__FundInstruments *instruments)
{
	ns1__SubmitGetFundamentalsRequest *_p = ::soap_new_ns1__SubmitGetFundamentalsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetFundamentalsRequest::headers = headers;
		_p->ns1__SubmitGetFundamentalsRequest::fields = fields;
		_p->ns1__SubmitGetFundamentalsRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetFundamentalsRequest * soap_new_set_ns1__SubmitGetFundamentalsRequest(
	struct soap *soap,
	ns1__GetFundamentalsHeaders *headers,
	ns1__Fields *fields,
	ns1__FundInstruments *instruments)
{
	ns1__SubmitGetFundamentalsRequest *_p = ::soap_new_ns1__SubmitGetFundamentalsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetFundamentalsRequest::headers = headers;
		_p->ns1__SubmitGetFundamentalsRequest::fields = fields;
		_p->ns1__SubmitGetFundamentalsRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetFundamentalsRequest(struct soap *soap, ns1__SubmitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetFundamentalsRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetFundamentalsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetFundamentalsRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetFundamentalsRequest(struct soap*, ns1__SubmitGetFundamentalsRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetFundamentalsRequest(struct soap *soap, ns1__SubmitGetFundamentalsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetFundamentalsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetFundamentalsRequest(struct soap *soap, const char *URL, ns1__SubmitGetFundamentalsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetFundamentalsRequest(struct soap *soap, ns1__SubmitGetFundamentalsRequest *p)
{
	if (::soap_read_ns1__SubmitGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveScheduledResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveScheduledResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveScheduledResponse(struct soap*, const char*, int, const ns1__RetrieveScheduledResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveScheduledResponse * SOAP_FMAC4 soap_in_ns1__RetrieveScheduledResponse(struct soap*, const char*, ns1__RetrieveScheduledResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveScheduledResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveScheduledResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveScheduledResponse * soap_new_ns1__RetrieveScheduledResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveScheduledResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveScheduledResponse * soap_new_req_ns1__RetrieveScheduledResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveScheduledResponse *_p = ::soap_new_ns1__RetrieveScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveScheduledResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveScheduledResponse * soap_new_set_ns1__RetrieveScheduledResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ScheduledResponses *fileDatas,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveScheduledResponse *_p = ::soap_new_ns1__RetrieveScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveScheduledResponse::responseId = responseId;
		_p->ns1__RetrieveScheduledResponse::fileDatas = fileDatas;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveScheduledResponse(struct soap *soap, ns1__RetrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveScheduledResponse(struct soap *soap, const char *URL, ns1__RetrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveScheduledResponse(struct soap *soap, const char *URL, ns1__RetrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveScheduledResponse(struct soap *soap, const char *URL, ns1__RetrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveScheduledResponse * SOAP_FMAC4 soap_get_ns1__RetrieveScheduledResponse(struct soap*, ns1__RetrieveScheduledResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveScheduledResponse(struct soap *soap, ns1__RetrieveScheduledResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveScheduledResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveScheduledResponse(struct soap *soap, const char *URL, ns1__RetrieveScheduledResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveScheduledResponse(struct soap *soap, ns1__RetrieveScheduledResponse *p)
{
	if (::soap_read_ns1__RetrieveScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledResponse_DEFINED
#define SOAP_TYPE_ns1__ScheduledResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledResponse(struct soap*, const char*, int, const ns1__ScheduledResponse *, const char*);
SOAP_FMAC3 ns1__ScheduledResponse * SOAP_FMAC4 soap_in_ns1__ScheduledResponse(struct soap*, const char*, ns1__ScheduledResponse *, const char*);
SOAP_FMAC1 ns1__ScheduledResponse * SOAP_FMAC2 soap_instantiate_ns1__ScheduledResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledResponse * soap_new_ns1__ScheduledResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledResponse * soap_new_req_ns1__ScheduledResponse(
	struct soap *soap)
{
	ns1__ScheduledResponse *_p = ::soap_new_ns1__ScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScheduledResponse * soap_new_set_ns1__ScheduledResponse(
	struct soap *soap,
	ns1__ScheduledHeaders *headers,
	ns1__Fields *fields,
	ns1__BvalFieldSets *bvalfieldsets,
	ns1__FieldSets *fieldsets,
	ns1__Instruments *instruments,
	std::string *responseId,
	std::string *time)
{
	ns1__ScheduledResponse *_p = ::soap_new_ns1__ScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledResponse::headers = headers;
		_p->ns1__ScheduledResponse::fields = fields;
		_p->ns1__ScheduledResponse::bvalfieldsets = bvalfieldsets;
		_p->ns1__ScheduledResponse::fieldsets = fieldsets;
		_p->ns1__ScheduledResponse::instruments = instruments;
		_p->ns1__ScheduledResponse::responseId = responseId;
		_p->ns1__ScheduledResponse::time = time;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledResponse(struct soap *soap, ns1__ScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledResponse(struct soap *soap, const char *URL, ns1__ScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ScheduledResponse(struct soap *soap, const char *URL, ns1__ScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledResponse(struct soap *soap, const char *URL, ns1__ScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledResponse * SOAP_FMAC4 soap_get_ns1__ScheduledResponse(struct soap*, ns1__ScheduledResponse *, const char*, const char*);

inline int soap_read_ns1__ScheduledResponse(struct soap *soap, ns1__ScheduledResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ScheduledResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledResponse(struct soap *soap, const char *URL, ns1__ScheduledResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ScheduledResponse(struct soap *soap, ns1__ScheduledResponse *p)
{
	if (::soap_read_ns1__ScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledResponses_DEFINED
#define SOAP_TYPE_ns1__ScheduledResponses_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledResponses(struct soap*, const char*, int, const ns1__ScheduledResponses *, const char*);
SOAP_FMAC3 ns1__ScheduledResponses * SOAP_FMAC4 soap_in_ns1__ScheduledResponses(struct soap*, const char*, ns1__ScheduledResponses *, const char*);
SOAP_FMAC1 ns1__ScheduledResponses * SOAP_FMAC2 soap_instantiate_ns1__ScheduledResponses(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledResponses * soap_new_ns1__ScheduledResponses(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledResponses(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledResponses * soap_new_req_ns1__ScheduledResponses(
	struct soap *soap)
{
	ns1__ScheduledResponses *_p = ::soap_new_ns1__ScheduledResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScheduledResponses * soap_new_set_ns1__ScheduledResponses(
	struct soap *soap,
	const std::vector<ns1__ScheduledResponse *> & fileData)
{
	ns1__ScheduledResponses *_p = ::soap_new_ns1__ScheduledResponses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledResponses::fileData = fileData;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledResponses(struct soap *soap, ns1__ScheduledResponses const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponses", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledResponses(struct soap *soap, const char *URL, ns1__ScheduledResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponses", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ScheduledResponses(struct soap *soap, const char *URL, ns1__ScheduledResponses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponses", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledResponses(struct soap *soap, const char *URL, ns1__ScheduledResponses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledResponses", p->soap_type() == SOAP_TYPE_ns1__ScheduledResponses ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledResponses * SOAP_FMAC4 soap_get_ns1__ScheduledResponses(struct soap*, ns1__ScheduledResponses *, const char*, const char*);

inline int soap_read_ns1__ScheduledResponses(struct soap *soap, ns1__ScheduledResponses *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ScheduledResponses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledResponses(struct soap *soap, const char *URL, ns1__ScheduledResponses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ScheduledResponses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ScheduledResponses(struct soap *soap, ns1__ScheduledResponses *p)
{
	if (::soap_read_ns1__ScheduledResponses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveScheduledRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveScheduledRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveScheduledRequest(struct soap*, const char*, int, const ns1__RetrieveScheduledRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveScheduledRequest * SOAP_FMAC4 soap_in_ns1__RetrieveScheduledRequest(struct soap*, const char*, ns1__RetrieveScheduledRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveScheduledRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveScheduledRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveScheduledRequest * soap_new_ns1__RetrieveScheduledRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveScheduledRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveScheduledRequest * soap_new_req_ns1__RetrieveScheduledRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveScheduledRequest *_p = ::soap_new_ns1__RetrieveScheduledRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveScheduledRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveScheduledRequest * soap_new_set_ns1__RetrieveScheduledRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveScheduledRequest *_p = ::soap_new_ns1__RetrieveScheduledRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveScheduledRequest::responseId = responseId;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveScheduledRequest(struct soap *soap, ns1__RetrieveScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveScheduledRequest(struct soap *soap, const char *URL, ns1__RetrieveScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveScheduledRequest(struct soap *soap, const char *URL, ns1__RetrieveScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveScheduledRequest(struct soap *soap, const char *URL, ns1__RetrieveScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveScheduledRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveScheduledRequest * SOAP_FMAC4 soap_get_ns1__RetrieveScheduledRequest(struct soap*, ns1__RetrieveScheduledRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveScheduledRequest(struct soap *soap, ns1__RetrieveScheduledRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveScheduledRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveScheduledRequest(struct soap *soap, const char *URL, ns1__RetrieveScheduledRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveScheduledRequest(struct soap *soap, ns1__RetrieveScheduledRequest *p)
{
	if (::soap_read_ns1__RetrieveScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitScheduledResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitScheduledResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScheduledResponse(struct soap*, const char*, int, const ns1__SubmitScheduledResponse *, const char*);
SOAP_FMAC3 ns1__SubmitScheduledResponse * SOAP_FMAC4 soap_in_ns1__SubmitScheduledResponse(struct soap*, const char*, ns1__SubmitScheduledResponse *, const char*);
SOAP_FMAC1 ns1__SubmitScheduledResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitScheduledResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitScheduledResponse * soap_new_ns1__SubmitScheduledResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitScheduledResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitScheduledResponse * soap_new_req_ns1__SubmitScheduledResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitScheduledResponse *_p = ::soap_new_ns1__SubmitScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitScheduledResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitScheduledResponse * soap_new_set_ns1__SubmitScheduledResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitScheduledResponse *_p = ::soap_new_ns1__SubmitScheduledResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitScheduledResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitScheduledResponse(struct soap *soap, ns1__SubmitScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitScheduledResponse(struct soap *soap, const char *URL, ns1__SubmitScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitScheduledResponse(struct soap *soap, const char *URL, ns1__SubmitScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitScheduledResponse(struct soap *soap, const char *URL, ns1__SubmitScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitScheduledResponse * SOAP_FMAC4 soap_get_ns1__SubmitScheduledResponse(struct soap*, ns1__SubmitScheduledResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitScheduledResponse(struct soap *soap, ns1__SubmitScheduledResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitScheduledResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitScheduledResponse(struct soap *soap, const char *URL, ns1__SubmitScheduledResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitScheduledResponse(struct soap *soap, ns1__SubmitScheduledResponse *p)
{
	if (::soap_read_ns1__SubmitScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitScheduledRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitScheduledRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitScheduledRequest(struct soap*, const char*, int, const ns1__SubmitScheduledRequest *, const char*);
SOAP_FMAC3 ns1__SubmitScheduledRequest * SOAP_FMAC4 soap_in_ns1__SubmitScheduledRequest(struct soap*, const char*, ns1__SubmitScheduledRequest *, const char*);
SOAP_FMAC1 ns1__SubmitScheduledRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitScheduledRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitScheduledRequest * soap_new_ns1__SubmitScheduledRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitScheduledRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitScheduledRequest * soap_new_req_ns1__SubmitScheduledRequest(
	struct soap *soap)
{
	ns1__SubmitScheduledRequest *_p = ::soap_new_ns1__SubmitScheduledRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SubmitScheduledRequest * soap_new_set_ns1__SubmitScheduledRequest(
	struct soap *soap)
{
	ns1__SubmitScheduledRequest *_p = ::soap_new_ns1__SubmitScheduledRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns1__SubmitScheduledRequest(struct soap *soap, ns1__SubmitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitScheduledRequest(struct soap *soap, const char *URL, ns1__SubmitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitScheduledRequest(struct soap *soap, const char *URL, ns1__SubmitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitScheduledRequest(struct soap *soap, const char *URL, ns1__SubmitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitScheduledRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitScheduledRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitScheduledRequest * SOAP_FMAC4 soap_get_ns1__SubmitScheduledRequest(struct soap*, ns1__SubmitScheduledRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitScheduledRequest(struct soap *soap, ns1__SubmitScheduledRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitScheduledRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitScheduledRequest(struct soap *soap, const char *URL, ns1__SubmitScheduledRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitScheduledRequest(struct soap *soap, ns1__SubmitScheduledRequest *p)
{
	if (::soap_read_ns1__SubmitScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetCorrectionsResponse_DEFINED
#define SOAP_TYPE_ns1__GetCorrectionsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetCorrectionsResponse(struct soap*, const char*, int, const ns1__GetCorrectionsResponse *, const char*);
SOAP_FMAC3 ns1__GetCorrectionsResponse * SOAP_FMAC4 soap_in_ns1__GetCorrectionsResponse(struct soap*, const char*, ns1__GetCorrectionsResponse *, const char*);
SOAP_FMAC1 ns1__GetCorrectionsResponse * SOAP_FMAC2 soap_instantiate_ns1__GetCorrectionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetCorrectionsResponse * soap_new_ns1__GetCorrectionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetCorrectionsResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__GetCorrectionsResponse * soap_new_req_ns1__GetCorrectionsResponse(
	struct soap *soap,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetCorrectionsResponse *_p = ::soap_new_ns1__GetCorrectionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__GetCorrectionsResponse * soap_new_set_ns1__GetCorrectionsResponse(
	struct soap *soap,
	ns1__GetCorrectionsHeaders *headers,
	time_t *timestarted,
	ns1__CorrectionRecords *correctionRecords,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__GetCorrectionsResponse *_p = ::soap_new_ns1__GetCorrectionsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetCorrectionsResponse::headers = headers;
		_p->ns1__GetCorrectionsResponse::timestarted = timestarted;
		_p->ns1__GetCorrectionsResponse::correctionRecords = correctionRecords;
		_p->ns1__GetCorrectionsResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__GetCorrectionsResponse(struct soap *soap, ns1__GetCorrectionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsResponse", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetCorrectionsResponse(struct soap *soap, const char *URL, ns1__GetCorrectionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsResponse", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetCorrectionsResponse(struct soap *soap, const char *URL, ns1__GetCorrectionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsResponse", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetCorrectionsResponse(struct soap *soap, const char *URL, ns1__GetCorrectionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsResponse", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetCorrectionsResponse * SOAP_FMAC4 soap_get_ns1__GetCorrectionsResponse(struct soap*, ns1__GetCorrectionsResponse *, const char*, const char*);

inline int soap_read_ns1__GetCorrectionsResponse(struct soap *soap, ns1__GetCorrectionsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetCorrectionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetCorrectionsResponse(struct soap *soap, const char *URL, ns1__GetCorrectionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetCorrectionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetCorrectionsResponse(struct soap *soap, ns1__GetCorrectionsResponse *p)
{
	if (::soap_read_ns1__GetCorrectionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetCorrectionsRequest_DEFINED
#define SOAP_TYPE_ns1__GetCorrectionsRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetCorrectionsRequest(struct soap*, const char*, int, const ns1__GetCorrectionsRequest *, const char*);
SOAP_FMAC3 ns1__GetCorrectionsRequest * SOAP_FMAC4 soap_in_ns1__GetCorrectionsRequest(struct soap*, const char*, ns1__GetCorrectionsRequest *, const char*);
SOAP_FMAC1 ns1__GetCorrectionsRequest * SOAP_FMAC2 soap_instantiate_ns1__GetCorrectionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetCorrectionsRequest * soap_new_ns1__GetCorrectionsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetCorrectionsRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__GetCorrectionsRequest * soap_new_req_ns1__GetCorrectionsRequest(
	struct soap *soap)
{
	ns1__GetCorrectionsRequest *_p = ::soap_new_ns1__GetCorrectionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetCorrectionsRequest * soap_new_set_ns1__GetCorrectionsRequest(
	struct soap *soap,
	std::string *responseDate)
{
	ns1__GetCorrectionsRequest *_p = ::soap_new_ns1__GetCorrectionsRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetCorrectionsRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__GetCorrectionsRequest(struct soap *soap, ns1__GetCorrectionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsRequest", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetCorrectionsRequest(struct soap *soap, const char *URL, ns1__GetCorrectionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsRequest", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetCorrectionsRequest(struct soap *soap, const char *URL, ns1__GetCorrectionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsRequest", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetCorrectionsRequest(struct soap *soap, const char *URL, ns1__GetCorrectionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsRequest", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetCorrectionsRequest * SOAP_FMAC4 soap_get_ns1__GetCorrectionsRequest(struct soap*, ns1__GetCorrectionsRequest *, const char*, const char*);

inline int soap_read_ns1__GetCorrectionsRequest(struct soap *soap, ns1__GetCorrectionsRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetCorrectionsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetCorrectionsRequest(struct soap *soap, const char *URL, ns1__GetCorrectionsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetCorrectionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetCorrectionsRequest(struct soap *soap, ns1__GetCorrectionsRequest *p)
{
	if (::soap_read_ns1__GetCorrectionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveCancelResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveCancelResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveCancelResponse(struct soap*, const char*, int, const ns1__RetrieveCancelResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveCancelResponse * SOAP_FMAC4 soap_in_ns1__RetrieveCancelResponse(struct soap*, const char*, ns1__RetrieveCancelResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveCancelResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveCancelResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveCancelResponse * soap_new_ns1__RetrieveCancelResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveCancelResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveCancelResponse * soap_new_req_ns1__RetrieveCancelResponse(
	struct soap *soap,
	const std::vector<ns1__CancelResponseStatus *> & cancelResponseStatus,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveCancelResponse *_p = ::soap_new_ns1__RetrieveCancelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveCancelResponse::cancelResponseStatus = cancelResponseStatus;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveCancelResponse * soap_new_set_ns1__RetrieveCancelResponse(
	struct soap *soap,
	ns1__CancelHeaders *headers,
	const std::vector<ns1__CancelResponseStatus *> & cancelResponseStatus,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveCancelResponse *_p = ::soap_new_ns1__RetrieveCancelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveCancelResponse::headers = headers;
		_p->ns1__RetrieveCancelResponse::cancelResponseStatus = cancelResponseStatus;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveCancelResponse(struct soap *soap, ns1__RetrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveCancelResponse(struct soap *soap, const char *URL, ns1__RetrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveCancelResponse(struct soap *soap, const char *URL, ns1__RetrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveCancelResponse(struct soap *soap, const char *URL, ns1__RetrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveCancelResponse * SOAP_FMAC4 soap_get_ns1__RetrieveCancelResponse(struct soap*, ns1__RetrieveCancelResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveCancelResponse(struct soap *soap, ns1__RetrieveCancelResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveCancelResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveCancelResponse(struct soap *soap, const char *URL, ns1__RetrieveCancelResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveCancelResponse(struct soap *soap, ns1__RetrieveCancelResponse *p)
{
	if (::soap_read_ns1__RetrieveCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveCancelRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveCancelRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveCancelRequest(struct soap*, const char*, int, const ns1__RetrieveCancelRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveCancelRequest * SOAP_FMAC4 soap_in_ns1__RetrieveCancelRequest(struct soap*, const char*, ns1__RetrieveCancelRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveCancelRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveCancelRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveCancelRequest * soap_new_ns1__RetrieveCancelRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveCancelRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveCancelRequest * soap_new_req_ns1__RetrieveCancelRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveCancelRequest *_p = ::soap_new_ns1__RetrieveCancelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveCancelRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveCancelRequest * soap_new_set_ns1__RetrieveCancelRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveCancelRequest *_p = ::soap_new_ns1__RetrieveCancelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveCancelRequest::responseId = responseId;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveCancelRequest(struct soap *soap, ns1__RetrieveCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveCancelRequest(struct soap *soap, const char *URL, ns1__RetrieveCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveCancelRequest(struct soap *soap, const char *URL, ns1__RetrieveCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveCancelRequest(struct soap *soap, const char *URL, ns1__RetrieveCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveCancelRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveCancelRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveCancelRequest * SOAP_FMAC4 soap_get_ns1__RetrieveCancelRequest(struct soap*, ns1__RetrieveCancelRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveCancelRequest(struct soap *soap, ns1__RetrieveCancelRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveCancelRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveCancelRequest(struct soap *soap, const char *URL, ns1__RetrieveCancelRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveCancelRequest(struct soap *soap, ns1__RetrieveCancelRequest *p)
{
	if (::soap_read_ns1__RetrieveCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitCancelResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitCancelResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitCancelResponse(struct soap*, const char*, int, const ns1__SubmitCancelResponse *, const char*);
SOAP_FMAC3 ns1__SubmitCancelResponse * SOAP_FMAC4 soap_in_ns1__SubmitCancelResponse(struct soap*, const char*, ns1__SubmitCancelResponse *, const char*);
SOAP_FMAC1 ns1__SubmitCancelResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitCancelResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitCancelResponse * soap_new_ns1__SubmitCancelResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitCancelResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitCancelResponse * soap_new_req_ns1__SubmitCancelResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitCancelResponse *_p = ::soap_new_ns1__SubmitCancelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitCancelResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitCancelResponse * soap_new_set_ns1__SubmitCancelResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitCancelResponse *_p = ::soap_new_ns1__SubmitCancelResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitCancelResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitCancelResponse(struct soap *soap, ns1__SubmitCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitCancelResponse(struct soap *soap, const char *URL, ns1__SubmitCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitCancelResponse(struct soap *soap, const char *URL, ns1__SubmitCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitCancelResponse(struct soap *soap, const char *URL, ns1__SubmitCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitCancelResponse * SOAP_FMAC4 soap_get_ns1__SubmitCancelResponse(struct soap*, ns1__SubmitCancelResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitCancelResponse(struct soap *soap, ns1__SubmitCancelResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitCancelResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitCancelResponse(struct soap *soap, const char *URL, ns1__SubmitCancelResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitCancelResponse(struct soap *soap, ns1__SubmitCancelResponse *p)
{
	if (::soap_read_ns1__SubmitCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitCancelRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitCancelRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitCancelRequest(struct soap*, const char*, int, const ns1__SubmitCancelRequest *, const char*);
SOAP_FMAC3 ns1__SubmitCancelRequest * SOAP_FMAC4 soap_in_ns1__SubmitCancelRequest(struct soap*, const char*, ns1__SubmitCancelRequest *, const char*);
SOAP_FMAC1 ns1__SubmitCancelRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitCancelRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitCancelRequest * soap_new_ns1__SubmitCancelRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitCancelRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitCancelRequest * soap_new_req_ns1__SubmitCancelRequest(
	struct soap *soap,
	const std::vector<std::string> & responseId,
	ns1__CancelHeaders *headers)
{
	ns1__SubmitCancelRequest *_p = ::soap_new_ns1__SubmitCancelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitCancelRequest::responseId = responseId;
		_p->ns1__SubmitCancelRequest::headers = headers;
	}
	return _p;
}

inline ns1__SubmitCancelRequest * soap_new_set_ns1__SubmitCancelRequest(
	struct soap *soap,
	const std::vector<std::string> & responseId,
	ns1__CancelHeaders *headers)
{
	ns1__SubmitCancelRequest *_p = ::soap_new_ns1__SubmitCancelRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitCancelRequest::responseId = responseId;
		_p->ns1__SubmitCancelRequest::headers = headers;
	}
	return _p;
}

inline int soap_write_ns1__SubmitCancelRequest(struct soap *soap, ns1__SubmitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitCancelRequest(struct soap *soap, const char *URL, ns1__SubmitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitCancelRequest(struct soap *soap, const char *URL, ns1__SubmitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitCancelRequest(struct soap *soap, const char *URL, ns1__SubmitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitCancelRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitCancelRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitCancelRequest * SOAP_FMAC4 soap_get_ns1__SubmitCancelRequest(struct soap*, ns1__SubmitCancelRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitCancelRequest(struct soap *soap, ns1__SubmitCancelRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitCancelRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitCancelRequest(struct soap *soap, const char *URL, ns1__SubmitCancelRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitCancelRequest(struct soap *soap, ns1__SubmitCancelRequest *p)
{
	if (::soap_read_ns1__SubmitCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetHistoryResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetHistoryResponse(struct soap*, const char*, int, const ns1__RetrieveGetHistoryResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetHistoryResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetHistoryResponse(struct soap*, const char*, ns1__RetrieveGetHistoryResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetHistoryResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetHistoryResponse * soap_new_ns1__RetrieveGetHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetHistoryResponse * soap_new_req_ns1__RetrieveGetHistoryResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetHistoryResponse *_p = ::soap_new_ns1__RetrieveGetHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetHistoryResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetHistoryResponse * soap_new_set_ns1__RetrieveGetHistoryResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetHistoryHeaders *headers,
	ns1__Fields *fields,
	time_t *timestarted,
	ns1__HistInstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetHistoryResponse *_p = ::soap_new_ns1__RetrieveGetHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetHistoryResponse::responseId = responseId;
		_p->ns1__RetrieveGetHistoryResponse::headers = headers;
		_p->ns1__RetrieveGetHistoryResponse::fields = fields;
		_p->ns1__RetrieveGetHistoryResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetHistoryResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetHistoryResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetHistoryResponse(struct soap *soap, ns1__RetrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetHistoryResponse(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetHistoryResponse(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetHistoryResponse(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetHistoryResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetHistoryResponse(struct soap*, ns1__RetrieveGetHistoryResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetHistoryResponse(struct soap *soap, ns1__RetrieveGetHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetHistoryResponse(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetHistoryResponse(struct soap *soap, ns1__RetrieveGetHistoryResponse *p)
{
	if (::soap_read_ns1__RetrieveGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetHistoryRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetHistoryRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetHistoryRequest(struct soap*, const char*, int, const ns1__RetrieveGetHistoryRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetHistoryRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetHistoryRequest(struct soap*, const char*, ns1__RetrieveGetHistoryRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetHistoryRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetHistoryRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetHistoryRequest * soap_new_ns1__RetrieveGetHistoryRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetHistoryRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetHistoryRequest * soap_new_req_ns1__RetrieveGetHistoryRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetHistoryRequest *_p = ::soap_new_ns1__RetrieveGetHistoryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetHistoryRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetHistoryRequest * soap_new_set_ns1__RetrieveGetHistoryRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetHistoryRequest *_p = ::soap_new_ns1__RetrieveGetHistoryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetHistoryRequest::responseId = responseId;
		_p->ns1__RetrieveGetHistoryRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetHistoryRequest(struct soap *soap, ns1__RetrieveGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetHistoryRequest(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetHistoryRequest(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetHistoryRequest(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetHistoryRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetHistoryRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetHistoryRequest(struct soap*, ns1__RetrieveGetHistoryRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetHistoryRequest(struct soap *soap, ns1__RetrieveGetHistoryRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetHistoryRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetHistoryRequest(struct soap *soap, const char *URL, ns1__RetrieveGetHistoryRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetHistoryRequest(struct soap *soap, ns1__RetrieveGetHistoryRequest *p)
{
	if (::soap_read_ns1__RetrieveGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetHistoryResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetHistoryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetHistoryResponse(struct soap*, const char*, int, const ns1__SubmitGetHistoryResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetHistoryResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetHistoryResponse(struct soap*, const char*, ns1__SubmitGetHistoryResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetHistoryResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetHistoryResponse * soap_new_ns1__SubmitGetHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetHistoryResponse * soap_new_req_ns1__SubmitGetHistoryResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetHistoryResponse *_p = ::soap_new_ns1__SubmitGetHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetHistoryResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetHistoryResponse * soap_new_set_ns1__SubmitGetHistoryResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetHistoryResponse *_p = ::soap_new_ns1__SubmitGetHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetHistoryResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetHistoryResponse(struct soap *soap, ns1__SubmitGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetHistoryResponse(struct soap *soap, const char *URL, ns1__SubmitGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetHistoryResponse(struct soap *soap, const char *URL, ns1__SubmitGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetHistoryResponse(struct soap *soap, const char *URL, ns1__SubmitGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetHistoryResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetHistoryResponse(struct soap*, ns1__SubmitGetHistoryResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetHistoryResponse(struct soap *soap, ns1__SubmitGetHistoryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetHistoryResponse(struct soap *soap, const char *URL, ns1__SubmitGetHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetHistoryResponse(struct soap *soap, ns1__SubmitGetHistoryResponse *p)
{
	if (::soap_read_ns1__SubmitGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetHistoryRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetHistoryRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetHistoryRequest(struct soap*, const char*, int, const ns1__SubmitGetHistoryRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetHistoryRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetHistoryRequest(struct soap*, const char*, ns1__SubmitGetHistoryRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetHistoryRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetHistoryRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetHistoryRequest * soap_new_ns1__SubmitGetHistoryRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetHistoryRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetHistoryRequest * soap_new_req_ns1__SubmitGetHistoryRequest(
	struct soap *soap,
	ns1__GetHistoryHeaders *headers,
	ns1__Fields *fields,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetHistoryRequest *_p = ::soap_new_ns1__SubmitGetHistoryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetHistoryRequest::headers = headers;
		_p->ns1__SubmitGetHistoryRequest::fields = fields;
		_p->ns1__SubmitGetHistoryRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetHistoryRequest * soap_new_set_ns1__SubmitGetHistoryRequest(
	struct soap *soap,
	ns1__GetHistoryHeaders *headers,
	ns1__Fields *fields,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetHistoryRequest *_p = ::soap_new_ns1__SubmitGetHistoryRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetHistoryRequest::headers = headers;
		_p->ns1__SubmitGetHistoryRequest::fields = fields;
		_p->ns1__SubmitGetHistoryRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetHistoryRequest(struct soap *soap, ns1__SubmitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetHistoryRequest(struct soap *soap, const char *URL, ns1__SubmitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetHistoryRequest(struct soap *soap, const char *URL, ns1__SubmitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetHistoryRequest(struct soap *soap, const char *URL, ns1__SubmitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetHistoryRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetHistoryRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetHistoryRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetHistoryRequest(struct soap*, ns1__SubmitGetHistoryRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetHistoryRequest(struct soap *soap, ns1__SubmitGetHistoryRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetHistoryRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetHistoryRequest(struct soap *soap, const char *URL, ns1__SubmitGetHistoryRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetHistoryRequest(struct soap *soap, ns1__SubmitGetHistoryRequest *p)
{
	if (::soap_read_ns1__SubmitGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetDataResponse_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetDataResponse(struct soap*, const char*, int, const ns1__RetrieveGetDataResponse *, const char*);
SOAP_FMAC3 ns1__RetrieveGetDataResponse * SOAP_FMAC4 soap_in_ns1__RetrieveGetDataResponse(struct soap*, const char*, ns1__RetrieveGetDataResponse *, const char*);
SOAP_FMAC1 ns1__RetrieveGetDataResponse * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetDataResponse * soap_new_ns1__RetrieveGetDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetDataResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetDataResponse * soap_new_req_ns1__RetrieveGetDataResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetDataResponse *_p = ::soap_new_ns1__RetrieveGetDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetDataResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__RetrieveGetDataResponse * soap_new_set_ns1__RetrieveGetDataResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__GetDataHeaders *headers,
	ns1__Fields *fields,
	time_t *timestarted,
	ns1__InstrumentDatas *instrumentDatas,
	time_t *timefinished,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__RetrieveGetDataResponse *_p = ::soap_new_ns1__RetrieveGetDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetDataResponse::responseId = responseId;
		_p->ns1__RetrieveGetDataResponse::headers = headers;
		_p->ns1__RetrieveGetDataResponse::fields = fields;
		_p->ns1__RetrieveGetDataResponse::timestarted = timestarted;
		_p->ns1__RetrieveGetDataResponse::instrumentDatas = instrumentDatas;
		_p->ns1__RetrieveGetDataResponse::timefinished = timefinished;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetDataResponse(struct soap *soap, ns1__RetrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetDataResponse(struct soap *soap, const char *URL, ns1__RetrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetDataResponse(struct soap *soap, const char *URL, ns1__RetrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetDataResponse(struct soap *soap, const char *URL, ns1__RetrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetDataResponse * SOAP_FMAC4 soap_get_ns1__RetrieveGetDataResponse(struct soap*, ns1__RetrieveGetDataResponse *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetDataResponse(struct soap *soap, ns1__RetrieveGetDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetDataResponse(struct soap *soap, const char *URL, ns1__RetrieveGetDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetDataResponse(struct soap *soap, ns1__RetrieveGetDataResponse *p)
{
	if (::soap_read_ns1__RetrieveGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RetrieveGetDataRequest_DEFINED
#define SOAP_TYPE_ns1__RetrieveGetDataRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetrieveGetDataRequest(struct soap*, const char*, int, const ns1__RetrieveGetDataRequest *, const char*);
SOAP_FMAC3 ns1__RetrieveGetDataRequest * SOAP_FMAC4 soap_in_ns1__RetrieveGetDataRequest(struct soap*, const char*, ns1__RetrieveGetDataRequest *, const char*);
SOAP_FMAC1 ns1__RetrieveGetDataRequest * SOAP_FMAC2 soap_instantiate_ns1__RetrieveGetDataRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetrieveGetDataRequest * soap_new_ns1__RetrieveGetDataRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RetrieveGetDataRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__RetrieveGetDataRequest * soap_new_req_ns1__RetrieveGetDataRequest(
	struct soap *soap,
	const std::string& responseId)
{
	ns1__RetrieveGetDataRequest *_p = ::soap_new_ns1__RetrieveGetDataRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetDataRequest::responseId = responseId;
	}
	return _p;
}

inline ns1__RetrieveGetDataRequest * soap_new_set_ns1__RetrieveGetDataRequest(
	struct soap *soap,
	const std::string& responseId,
	std::string *responseDate)
{
	ns1__RetrieveGetDataRequest *_p = ::soap_new_ns1__RetrieveGetDataRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RetrieveGetDataRequest::responseId = responseId;
		_p->ns1__RetrieveGetDataRequest::responseDate = responseDate;
	}
	return _p;
}

inline int soap_write_ns1__RetrieveGetDataRequest(struct soap *soap, ns1__RetrieveGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RetrieveGetDataRequest(struct soap *soap, const char *URL, ns1__RetrieveGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RetrieveGetDataRequest(struct soap *soap, const char *URL, ns1__RetrieveGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RetrieveGetDataRequest(struct soap *soap, const char *URL, ns1__RetrieveGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RetrieveGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__RetrieveGetDataRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RetrieveGetDataRequest * SOAP_FMAC4 soap_get_ns1__RetrieveGetDataRequest(struct soap*, ns1__RetrieveGetDataRequest *, const char*, const char*);

inline int soap_read_ns1__RetrieveGetDataRequest(struct soap *soap, ns1__RetrieveGetDataRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RetrieveGetDataRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RetrieveGetDataRequest(struct soap *soap, const char *URL, ns1__RetrieveGetDataRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RetrieveGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RetrieveGetDataRequest(struct soap *soap, ns1__RetrieveGetDataRequest *p)
{
	if (::soap_read_ns1__RetrieveGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetDataResponse_DEFINED
#define SOAP_TYPE_ns1__SubmitGetDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetDataResponse(struct soap*, const char*, int, const ns1__SubmitGetDataResponse *, const char*);
SOAP_FMAC3 ns1__SubmitGetDataResponse * SOAP_FMAC4 soap_in_ns1__SubmitGetDataResponse(struct soap*, const char*, ns1__SubmitGetDataResponse *, const char*);
SOAP_FMAC1 ns1__SubmitGetDataResponse * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetDataResponse * soap_new_ns1__SubmitGetDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetDataResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetDataResponse * soap_new_req_ns1__SubmitGetDataResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetDataResponse *_p = ::soap_new_ns1__SubmitGetDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetDataResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline ns1__SubmitGetDataResponse * soap_new_set_ns1__SubmitGetDataResponse(
	struct soap *soap,
	const std::string& responseId,
	ns1__ResponseStatus *statusCode__1,
	const std::string& requestId__1)
{
	ns1__SubmitGetDataResponse *_p = ::soap_new_ns1__SubmitGetDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetDataResponse::responseId = responseId;
		_p->ns1__PerSecurityResponse::statusCode = statusCode__1;
		_p->ns1__PerSecurityResponse::requestId = requestId__1;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetDataResponse(struct soap *soap, ns1__SubmitGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetDataResponse(struct soap *soap, const char *URL, ns1__SubmitGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetDataResponse(struct soap *soap, const char *URL, ns1__SubmitGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetDataResponse(struct soap *soap, const char *URL, ns1__SubmitGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataResponse", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetDataResponse * SOAP_FMAC4 soap_get_ns1__SubmitGetDataResponse(struct soap*, ns1__SubmitGetDataResponse *, const char*, const char*);

inline int soap_read_ns1__SubmitGetDataResponse(struct soap *soap, ns1__SubmitGetDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetDataResponse(struct soap *soap, const char *URL, ns1__SubmitGetDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetDataResponse(struct soap *soap, ns1__SubmitGetDataResponse *p)
{
	if (::soap_read_ns1__SubmitGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitGetDataRequest_DEFINED
#define SOAP_TYPE_ns1__SubmitGetDataRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitGetDataRequest(struct soap*, const char*, int, const ns1__SubmitGetDataRequest *, const char*);
SOAP_FMAC3 ns1__SubmitGetDataRequest * SOAP_FMAC4 soap_in_ns1__SubmitGetDataRequest(struct soap*, const char*, ns1__SubmitGetDataRequest *, const char*);
SOAP_FMAC1 ns1__SubmitGetDataRequest * SOAP_FMAC2 soap_instantiate_ns1__SubmitGetDataRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitGetDataRequest * soap_new_ns1__SubmitGetDataRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitGetDataRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitGetDataRequest * soap_new_req_ns1__SubmitGetDataRequest(
	struct soap *soap,
	ns1__GetDataHeaders *headers,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetDataRequest *_p = ::soap_new_ns1__SubmitGetDataRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetDataRequest::headers = headers;
		_p->ns1__SubmitGetDataRequest::instruments = instruments;
	}
	return _p;
}

inline ns1__SubmitGetDataRequest * soap_new_set_ns1__SubmitGetDataRequest(
	struct soap *soap,
	ns1__GetDataHeaders *headers,
	ns1__BvalFieldSets *fieldsets,
	ns1__Fields *fields,
	ns1__Instruments *instruments)
{
	ns1__SubmitGetDataRequest *_p = ::soap_new_ns1__SubmitGetDataRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitGetDataRequest::headers = headers;
		_p->ns1__SubmitGetDataRequest::fieldsets = fieldsets;
		_p->ns1__SubmitGetDataRequest::fields = fields;
		_p->ns1__SubmitGetDataRequest::instruments = instruments;
	}
	return _p;
}

inline int soap_write_ns1__SubmitGetDataRequest(struct soap *soap, ns1__SubmitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitGetDataRequest(struct soap *soap, const char *URL, ns1__SubmitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SubmitGetDataRequest(struct soap *soap, const char *URL, ns1__SubmitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitGetDataRequest(struct soap *soap, const char *URL, ns1__SubmitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitGetDataRequest", p->soap_type() == SOAP_TYPE_ns1__SubmitGetDataRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitGetDataRequest * SOAP_FMAC4 soap_get_ns1__SubmitGetDataRequest(struct soap*, ns1__SubmitGetDataRequest *, const char*, const char*);

inline int soap_read_ns1__SubmitGetDataRequest(struct soap *soap, ns1__SubmitGetDataRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitGetDataRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitGetDataRequest(struct soap *soap, const char *URL, ns1__SubmitGetDataRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SubmitGetDataRequest(struct soap *soap, ns1__SubmitGetDataRequest *p)
{
	if (::soap_read_ns1__SubmitGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PerSecurityResponse_DEFINED
#define SOAP_TYPE_ns1__PerSecurityResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PerSecurityResponse(struct soap*, const char*, int, const ns1__PerSecurityResponse *, const char*);
SOAP_FMAC3 ns1__PerSecurityResponse * SOAP_FMAC4 soap_in_ns1__PerSecurityResponse(struct soap*, const char*, ns1__PerSecurityResponse *, const char*);
SOAP_FMAC1 ns1__PerSecurityResponse * SOAP_FMAC2 soap_instantiate_ns1__PerSecurityResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PerSecurityResponse * soap_new_ns1__PerSecurityResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PerSecurityResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__PerSecurityResponse * soap_new_req_ns1__PerSecurityResponse(
	struct soap *soap,
	ns1__ResponseStatus *statusCode,
	const std::string& requestId)
{
	ns1__PerSecurityResponse *_p = ::soap_new_ns1__PerSecurityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PerSecurityResponse::statusCode = statusCode;
		_p->ns1__PerSecurityResponse::requestId = requestId;
	}
	return _p;
}

inline ns1__PerSecurityResponse * soap_new_set_ns1__PerSecurityResponse(
	struct soap *soap,
	ns1__ResponseStatus *statusCode,
	const std::string& requestId)
{
	ns1__PerSecurityResponse *_p = ::soap_new_ns1__PerSecurityResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PerSecurityResponse::statusCode = statusCode;
		_p->ns1__PerSecurityResponse::requestId = requestId;
	}
	return _p;
}

inline int soap_write_ns1__PerSecurityResponse(struct soap *soap, ns1__PerSecurityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PerSecurityResponse", p->soap_type() == SOAP_TYPE_ns1__PerSecurityResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PerSecurityResponse(struct soap *soap, const char *URL, ns1__PerSecurityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PerSecurityResponse", p->soap_type() == SOAP_TYPE_ns1__PerSecurityResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PerSecurityResponse(struct soap *soap, const char *URL, ns1__PerSecurityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PerSecurityResponse", p->soap_type() == SOAP_TYPE_ns1__PerSecurityResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PerSecurityResponse(struct soap *soap, const char *URL, ns1__PerSecurityResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PerSecurityResponse", p->soap_type() == SOAP_TYPE_ns1__PerSecurityResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PerSecurityResponse * SOAP_FMAC4 soap_get_ns1__PerSecurityResponse(struct soap*, ns1__PerSecurityResponse *, const char*, const char*);

inline int soap_read_ns1__PerSecurityResponse(struct soap *soap, ns1__PerSecurityResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PerSecurityResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PerSecurityResponse(struct soap *soap, const char *URL, ns1__PerSecurityResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PerSecurityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PerSecurityResponse(struct soap *soap, ns1__PerSecurityResponse *p)
{
	if (::soap_read_ns1__PerSecurityResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OtcDealInfos_DEFINED
#define SOAP_TYPE_ns1__OtcDealInfos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OtcDealInfos(struct soap*, const char*, int, const ns1__OtcDealInfos *, const char*);
SOAP_FMAC3 ns1__OtcDealInfos * SOAP_FMAC4 soap_in_ns1__OtcDealInfos(struct soap*, const char*, ns1__OtcDealInfos *, const char*);
SOAP_FMAC1 ns1__OtcDealInfos * SOAP_FMAC2 soap_instantiate_ns1__OtcDealInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OtcDealInfos * soap_new_ns1__OtcDealInfos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OtcDealInfos(soap, n, NULL, NULL, NULL);
}

inline ns1__OtcDealInfos * soap_new_req_ns1__OtcDealInfos(
	struct soap *soap)
{
	ns1__OtcDealInfos *_p = ::soap_new_ns1__OtcDealInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__OtcDealInfos * soap_new_set_ns1__OtcDealInfos(
	struct soap *soap,
	const std::vector<ns1__OtcDealInformation *> & deal)
{
	ns1__OtcDealInfos *_p = ::soap_new_ns1__OtcDealInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtcDealInfos::deal = deal;
	}
	return _p;
}

inline int soap_write_ns1__OtcDealInfos(struct soap *soap, ns1__OtcDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInfos", p->soap_type() == SOAP_TYPE_ns1__OtcDealInfos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OtcDealInfos(struct soap *soap, const char *URL, ns1__OtcDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInfos", p->soap_type() == SOAP_TYPE_ns1__OtcDealInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OtcDealInfos(struct soap *soap, const char *URL, ns1__OtcDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInfos", p->soap_type() == SOAP_TYPE_ns1__OtcDealInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OtcDealInfos(struct soap *soap, const char *URL, ns1__OtcDealInfos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInfos", p->soap_type() == SOAP_TYPE_ns1__OtcDealInfos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OtcDealInfos * SOAP_FMAC4 soap_get_ns1__OtcDealInfos(struct soap*, ns1__OtcDealInfos *, const char*, const char*);

inline int soap_read_ns1__OtcDealInfos(struct soap *soap, ns1__OtcDealInfos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OtcDealInfos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OtcDealInfos(struct soap *soap, const char *URL, ns1__OtcDealInfos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OtcDealInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OtcDealInfos(struct soap *soap, ns1__OtcDealInfos *p)
{
	if (::soap_read_ns1__OtcDealInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OtcDealInformation_DEFINED
#define SOAP_TYPE_ns1__OtcDealInformation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OtcDealInformation(struct soap*, const char*, int, const ns1__OtcDealInformation *, const char*);
SOAP_FMAC3 ns1__OtcDealInformation * SOAP_FMAC4 soap_in_ns1__OtcDealInformation(struct soap*, const char*, ns1__OtcDealInformation *, const char*);
SOAP_FMAC1 ns1__OtcDealInformation * SOAP_FMAC2 soap_instantiate_ns1__OtcDealInformation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OtcDealInformation * soap_new_ns1__OtcDealInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OtcDealInformation(soap, n, NULL, NULL, NULL);
}

inline ns1__OtcDealInformation * soap_new_req_ns1__OtcDealInformation(
	struct soap *soap,
	ns1__ResponseStatus *statusCode)
{
	ns1__OtcDealInformation *_p = ::soap_new_ns1__OtcDealInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtcDealInformation::statusCode = statusCode;
	}
	return _p;
}

inline ns1__OtcDealInformation * soap_new_set_ns1__OtcDealInformation(
	struct soap *soap,
	ns1__ResponseStatus *statusCode,
	std::string *customId,
	std::string *dealId,
	std::string *dealType,
	enum ns1__OtcBvalAction *action,
	std::string *portfolioId)
{
	ns1__OtcDealInformation *_p = ::soap_new_ns1__OtcDealInformation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtcDealInformation::statusCode = statusCode;
		_p->ns1__OtcDealInformation::customId = customId;
		_p->ns1__OtcDealInformation::dealId = dealId;
		_p->ns1__OtcDealInformation::dealType = dealType;
		_p->ns1__OtcDealInformation::action = action;
		_p->ns1__OtcDealInformation::portfolioId = portfolioId;
	}
	return _p;
}

inline int soap_write_ns1__OtcDealInformation(struct soap *soap, ns1__OtcDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInformation", p->soap_type() == SOAP_TYPE_ns1__OtcDealInformation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OtcDealInformation(struct soap *soap, const char *URL, ns1__OtcDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInformation", p->soap_type() == SOAP_TYPE_ns1__OtcDealInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OtcDealInformation(struct soap *soap, const char *URL, ns1__OtcDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInformation", p->soap_type() == SOAP_TYPE_ns1__OtcDealInformation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OtcDealInformation(struct soap *soap, const char *URL, ns1__OtcDealInformation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcDealInformation", p->soap_type() == SOAP_TYPE_ns1__OtcDealInformation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OtcDealInformation * SOAP_FMAC4 soap_get_ns1__OtcDealInformation(struct soap*, ns1__OtcDealInformation *, const char*, const char*);

inline int soap_read_ns1__OtcDealInformation(struct soap *soap, ns1__OtcDealInformation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OtcDealInformation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OtcDealInformation(struct soap *soap, const char *URL, ns1__OtcDealInformation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OtcDealInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OtcDealInformation(struct soap *soap, ns1__OtcDealInformation *p)
{
	if (::soap_read_ns1__OtcDealInformation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OtcBvalHeaders_DEFINED
#define SOAP_TYPE_ns1__OtcBvalHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OtcBvalHeaders(struct soap*, const char*, int, const ns1__OtcBvalHeaders *, const char*);
SOAP_FMAC3 ns1__OtcBvalHeaders * SOAP_FMAC4 soap_in_ns1__OtcBvalHeaders(struct soap*, const char*, ns1__OtcBvalHeaders *, const char*);
SOAP_FMAC1 ns1__OtcBvalHeaders * SOAP_FMAC2 soap_instantiate_ns1__OtcBvalHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OtcBvalHeaders * soap_new_ns1__OtcBvalHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OtcBvalHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__OtcBvalHeaders * soap_new_req_ns1__OtcBvalHeaders(
	struct soap *soap,
	const std::string& contentType,
	const std::string& mimeVersion,
	const std::string& contentEncoding,
	const std::string& contentDisposition,
	const std::string& fileName)
{
	ns1__OtcBvalHeaders *_p = ::soap_new_ns1__OtcBvalHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtcBvalHeaders::contentType = contentType;
		_p->ns1__OtcBvalHeaders::mimeVersion = mimeVersion;
		_p->ns1__OtcBvalHeaders::contentEncoding = contentEncoding;
		_p->ns1__OtcBvalHeaders::contentDisposition = contentDisposition;
		_p->ns1__OtcBvalHeaders::fileName = fileName;
	}
	return _p;
}

inline ns1__OtcBvalHeaders * soap_new_set_ns1__OtcBvalHeaders(
	struct soap *soap,
	const std::string& contentType,
	const std::string& mimeVersion,
	const std::string& contentEncoding,
	const std::string& contentDisposition,
	const std::string& fileName)
{
	ns1__OtcBvalHeaders *_p = ::soap_new_ns1__OtcBvalHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtcBvalHeaders::contentType = contentType;
		_p->ns1__OtcBvalHeaders::mimeVersion = mimeVersion;
		_p->ns1__OtcBvalHeaders::contentEncoding = contentEncoding;
		_p->ns1__OtcBvalHeaders::contentDisposition = contentDisposition;
		_p->ns1__OtcBvalHeaders::fileName = fileName;
	}
	return _p;
}

inline int soap_write_ns1__OtcBvalHeaders(struct soap *soap, ns1__OtcBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__OtcBvalHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OtcBvalHeaders(struct soap *soap, const char *URL, ns1__OtcBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__OtcBvalHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OtcBvalHeaders(struct soap *soap, const char *URL, ns1__OtcBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__OtcBvalHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OtcBvalHeaders(struct soap *soap, const char *URL, ns1__OtcBvalHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtcBvalHeaders", p->soap_type() == SOAP_TYPE_ns1__OtcBvalHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OtcBvalHeaders * SOAP_FMAC4 soap_get_ns1__OtcBvalHeaders(struct soap*, ns1__OtcBvalHeaders *, const char*, const char*);

inline int soap_read_ns1__OtcBvalHeaders(struct soap *soap, ns1__OtcBvalHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OtcBvalHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OtcBvalHeaders(struct soap *soap, const char *URL, ns1__OtcBvalHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OtcBvalHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OtcBvalHeaders(struct soap *soap, ns1__OtcBvalHeaders *p)
{
	if (::soap_read_ns1__OtcBvalHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldInfo_DEFINED
#define SOAP_TYPE_ns1__FieldInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldInfo(struct soap*, const char*, int, const ns1__FieldInfo *, const char*);
SOAP_FMAC3 ns1__FieldInfo * SOAP_FMAC4 soap_in_ns1__FieldInfo(struct soap*, const char*, ns1__FieldInfo *, const char*);
SOAP_FMAC1 ns1__FieldInfo * SOAP_FMAC2 soap_instantiate_ns1__FieldInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FieldInfo * soap_new_ns1__FieldInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FieldInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__FieldInfo * soap_new_req_ns1__FieldInfo(
	struct soap *soap)
{
	ns1__FieldInfo *_p = ::soap_new_ns1__FieldInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FieldInfo * soap_new_set_ns1__FieldInfo(
	struct soap *soap,
	std::string *id,
	std::string *mnemonic,
	std::string *description,
	enum ns1__DLCategory *dlCategory,
	std::string *definition,
	const std::vector<enum ns1__MarketSector> & marketsectors,
	int *standardWidth,
	int *standardDecimalPlaces,
	std::string *fieldType,
	bool *backoffice,
	bool *extendedBackoffice,
	std::string *productionDate,
	enum ns1__DLCategory2 *dlCategory2,
	bool *psBoOpt,
	bool *getHistory,
	bool *getCompany,
	bool *bval,
	bool *bvalBlocked,
	bool *dsBvalMetered,
	bool *sapiOMS,
	std::string *oldMnemonic,
	int *currentMaximumWidth,
	bool *dlBoOptFundamentals,
	bool *dlBoOptBDVD,
	bool *dlBoOptBEST,
	bool *dlBoOptCreditRisk,
	bool *dlBoOptCapStruct,
	bool *dlBoOptCreditRiskGetCompany,
	bool *dlBoOptCapStructGetCompany,
	bool *dlBoOptRegCompliance,
	bool *dlBoOptIssuerRatings)
{
	ns1__FieldInfo *_p = ::soap_new_ns1__FieldInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldInfo::id = id;
		_p->ns1__FieldInfo::mnemonic = mnemonic;
		_p->ns1__FieldInfo::description = description;
		_p->ns1__FieldInfo::dlCategory = dlCategory;
		_p->ns1__FieldInfo::definition = definition;
		_p->ns1__FieldInfo::marketsectors = marketsectors;
		_p->ns1__FieldInfo::standardWidth = standardWidth;
		_p->ns1__FieldInfo::standardDecimalPlaces = standardDecimalPlaces;
		_p->ns1__FieldInfo::fieldType = fieldType;
		_p->ns1__FieldInfo::backoffice = backoffice;
		_p->ns1__FieldInfo::extendedBackoffice = extendedBackoffice;
		_p->ns1__FieldInfo::productionDate = productionDate;
		_p->ns1__FieldInfo::dlCategory2 = dlCategory2;
		_p->ns1__FieldInfo::psBoOpt = psBoOpt;
		_p->ns1__FieldInfo::getHistory = getHistory;
		_p->ns1__FieldInfo::getCompany = getCompany;
		_p->ns1__FieldInfo::bval = bval;
		_p->ns1__FieldInfo::bvalBlocked = bvalBlocked;
		_p->ns1__FieldInfo::dsBvalMetered = dsBvalMetered;
		_p->ns1__FieldInfo::sapiOMS = sapiOMS;
		_p->ns1__FieldInfo::oldMnemonic = oldMnemonic;
		_p->ns1__FieldInfo::currentMaximumWidth = currentMaximumWidth;
		_p->ns1__FieldInfo::dlBoOptFundamentals = dlBoOptFundamentals;
		_p->ns1__FieldInfo::dlBoOptBDVD = dlBoOptBDVD;
		_p->ns1__FieldInfo::dlBoOptBEST = dlBoOptBEST;
		_p->ns1__FieldInfo::dlBoOptCreditRisk = dlBoOptCreditRisk;
		_p->ns1__FieldInfo::dlBoOptCapStruct = dlBoOptCapStruct;
		_p->ns1__FieldInfo::dlBoOptCreditRiskGetCompany = dlBoOptCreditRiskGetCompany;
		_p->ns1__FieldInfo::dlBoOptCapStructGetCompany = dlBoOptCapStructGetCompany;
		_p->ns1__FieldInfo::dlBoOptRegCompliance = dlBoOptRegCompliance;
		_p->ns1__FieldInfo::dlBoOptIssuerRatings = dlBoOptIssuerRatings;
	}
	return _p;
}

inline int soap_write_ns1__FieldInfo(struct soap *soap, ns1__FieldInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfo", p->soap_type() == SOAP_TYPE_ns1__FieldInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldInfo(struct soap *soap, const char *URL, ns1__FieldInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfo", p->soap_type() == SOAP_TYPE_ns1__FieldInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldInfo(struct soap *soap, const char *URL, ns1__FieldInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfo", p->soap_type() == SOAP_TYPE_ns1__FieldInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldInfo(struct soap *soap, const char *URL, ns1__FieldInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfo", p->soap_type() == SOAP_TYPE_ns1__FieldInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FieldInfo * SOAP_FMAC4 soap_get_ns1__FieldInfo(struct soap*, ns1__FieldInfo *, const char*, const char*);

inline int soap_read_ns1__FieldInfo(struct soap *soap, ns1__FieldInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FieldInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldInfo(struct soap *soap, const char *URL, ns1__FieldInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldInfo(struct soap *soap, ns1__FieldInfo *p)
{
	if (::soap_read_ns1__FieldInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldInfos_DEFINED
#define SOAP_TYPE_ns1__FieldInfos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldInfos(struct soap*, const char*, int, const ns1__FieldInfos *, const char*);
SOAP_FMAC3 ns1__FieldInfos * SOAP_FMAC4 soap_in_ns1__FieldInfos(struct soap*, const char*, ns1__FieldInfos *, const char*);
SOAP_FMAC1 ns1__FieldInfos * SOAP_FMAC2 soap_instantiate_ns1__FieldInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FieldInfos * soap_new_ns1__FieldInfos(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FieldInfos(soap, n, NULL, NULL, NULL);
}

inline ns1__FieldInfos * soap_new_req_ns1__FieldInfos(
	struct soap *soap)
{
	ns1__FieldInfos *_p = ::soap_new_ns1__FieldInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FieldInfos * soap_new_set_ns1__FieldInfos(
	struct soap *soap,
	const std::vector<ns1__FieldInfo *> & field)
{
	ns1__FieldInfos *_p = ::soap_new_ns1__FieldInfos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldInfos::field = field;
	}
	return _p;
}

inline int soap_write_ns1__FieldInfos(struct soap *soap, ns1__FieldInfos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfos", p->soap_type() == SOAP_TYPE_ns1__FieldInfos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldInfos(struct soap *soap, const char *URL, ns1__FieldInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfos", p->soap_type() == SOAP_TYPE_ns1__FieldInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldInfos(struct soap *soap, const char *URL, ns1__FieldInfos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfos", p->soap_type() == SOAP_TYPE_ns1__FieldInfos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldInfos(struct soap *soap, const char *URL, ns1__FieldInfos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldInfos", p->soap_type() == SOAP_TYPE_ns1__FieldInfos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FieldInfos * SOAP_FMAC4 soap_get_ns1__FieldInfos(struct soap*, ns1__FieldInfos *, const char*, const char*);

inline int soap_read_ns1__FieldInfos(struct soap *soap, ns1__FieldInfos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FieldInfos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldInfos(struct soap *soap, const char *URL, ns1__FieldInfos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldInfos(struct soap *soap, ns1__FieldInfos *p)
{
	if (::soap_read_ns1__FieldInfos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldSearchCriteria_DEFINED
#define SOAP_TYPE_ns1__FieldSearchCriteria_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldSearchCriteria(struct soap*, const char*, int, const ns1__FieldSearchCriteria *, const char*);
SOAP_FMAC3 ns1__FieldSearchCriteria * SOAP_FMAC4 soap_in_ns1__FieldSearchCriteria(struct soap*, const char*, ns1__FieldSearchCriteria *, const char*);
SOAP_FMAC1 ns1__FieldSearchCriteria * SOAP_FMAC2 soap_instantiate_ns1__FieldSearchCriteria(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FieldSearchCriteria * soap_new_ns1__FieldSearchCriteria(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FieldSearchCriteria(soap, n, NULL, NULL, NULL);
}

inline ns1__FieldSearchCriteria * soap_new_req_ns1__FieldSearchCriteria(
	struct soap *soap)
{
	ns1__FieldSearchCriteria *_p = ::soap_new_ns1__FieldSearchCriteria(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FieldSearchCriteria * soap_new_set_ns1__FieldSearchCriteria(
	struct soap *soap,
	std::string *keyword,
	std::string *mnemonic,
	const std::vector<enum ns1__DLCategory> & dlCategories,
	bool *overridable,
	const std::vector<enum ns1__MarketSector> & marketsectors,
	const std::vector<enum ns1__DLCategory2> & dlCategories2)
{
	ns1__FieldSearchCriteria *_p = ::soap_new_ns1__FieldSearchCriteria(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldSearchCriteria::keyword = keyword;
		_p->ns1__FieldSearchCriteria::mnemonic = mnemonic;
		_p->ns1__FieldSearchCriteria::dlCategories = dlCategories;
		_p->ns1__FieldSearchCriteria::overridable = overridable;
		_p->ns1__FieldSearchCriteria::marketsectors = marketsectors;
		_p->ns1__FieldSearchCriteria::dlCategories2 = dlCategories2;
	}
	return _p;
}

inline int soap_write_ns1__FieldSearchCriteria(struct soap *soap, ns1__FieldSearchCriteria const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSearchCriteria", p->soap_type() == SOAP_TYPE_ns1__FieldSearchCriteria ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldSearchCriteria(struct soap *soap, const char *URL, ns1__FieldSearchCriteria const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSearchCriteria", p->soap_type() == SOAP_TYPE_ns1__FieldSearchCriteria ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldSearchCriteria(struct soap *soap, const char *URL, ns1__FieldSearchCriteria const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSearchCriteria", p->soap_type() == SOAP_TYPE_ns1__FieldSearchCriteria ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldSearchCriteria(struct soap *soap, const char *URL, ns1__FieldSearchCriteria const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSearchCriteria", p->soap_type() == SOAP_TYPE_ns1__FieldSearchCriteria ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FieldSearchCriteria * SOAP_FMAC4 soap_get_ns1__FieldSearchCriteria(struct soap*, ns1__FieldSearchCriteria *, const char*, const char*);

inline int soap_read_ns1__FieldSearchCriteria(struct soap *soap, ns1__FieldSearchCriteria *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FieldSearchCriteria(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldSearchCriteria(struct soap *soap, const char *URL, ns1__FieldSearchCriteria *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldSearchCriteria(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldSearchCriteria(struct soap *soap, ns1__FieldSearchCriteria *p)
{
	if (::soap_read_ns1__FieldSearchCriteria(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CancelResponseStatus_DEFINED
#define SOAP_TYPE_ns1__CancelResponseStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CancelResponseStatus(struct soap*, const char*, int, const ns1__CancelResponseStatus *, const char*);
SOAP_FMAC3 ns1__CancelResponseStatus * SOAP_FMAC4 soap_in_ns1__CancelResponseStatus(struct soap*, const char*, ns1__CancelResponseStatus *, const char*);
SOAP_FMAC1 ns1__CancelResponseStatus * SOAP_FMAC2 soap_instantiate_ns1__CancelResponseStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CancelResponseStatus * soap_new_ns1__CancelResponseStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CancelResponseStatus(soap, n, NULL, NULL, NULL);
}

inline ns1__CancelResponseStatus * soap_new_req_ns1__CancelResponseStatus(
	struct soap *soap,
	const std::string& responseId,
	enum ns1__CancelStatus cancelStatus)
{
	ns1__CancelResponseStatus *_p = ::soap_new_ns1__CancelResponseStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelResponseStatus::responseId = responseId;
		_p->ns1__CancelResponseStatus::cancelStatus = cancelStatus;
	}
	return _p;
}

inline ns1__CancelResponseStatus * soap_new_set_ns1__CancelResponseStatus(
	struct soap *soap,
	const std::string& responseId,
	enum ns1__CancelStatus cancelStatus)
{
	ns1__CancelResponseStatus *_p = ::soap_new_ns1__CancelResponseStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelResponseStatus::responseId = responseId;
		_p->ns1__CancelResponseStatus::cancelStatus = cancelStatus;
	}
	return _p;
}

inline int soap_write_ns1__CancelResponseStatus(struct soap *soap, ns1__CancelResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelResponseStatus", p->soap_type() == SOAP_TYPE_ns1__CancelResponseStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CancelResponseStatus(struct soap *soap, const char *URL, ns1__CancelResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelResponseStatus", p->soap_type() == SOAP_TYPE_ns1__CancelResponseStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CancelResponseStatus(struct soap *soap, const char *URL, ns1__CancelResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelResponseStatus", p->soap_type() == SOAP_TYPE_ns1__CancelResponseStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CancelResponseStatus(struct soap *soap, const char *URL, ns1__CancelResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelResponseStatus", p->soap_type() == SOAP_TYPE_ns1__CancelResponseStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CancelResponseStatus * SOAP_FMAC4 soap_get_ns1__CancelResponseStatus(struct soap*, ns1__CancelResponseStatus *, const char*, const char*);

inline int soap_read_ns1__CancelResponseStatus(struct soap *soap, ns1__CancelResponseStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CancelResponseStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CancelResponseStatus(struct soap *soap, const char *URL, ns1__CancelResponseStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CancelResponseStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CancelResponseStatus(struct soap *soap, ns1__CancelResponseStatus *p)
{
	if (::soap_read_ns1__CancelResponseStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ResponseStatus_DEFINED
#define SOAP_TYPE_ns1__ResponseStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResponseStatus(struct soap*, const char*, int, const ns1__ResponseStatus *, const char*);
SOAP_FMAC3 ns1__ResponseStatus * SOAP_FMAC4 soap_in_ns1__ResponseStatus(struct soap*, const char*, ns1__ResponseStatus *, const char*);
SOAP_FMAC1 ns1__ResponseStatus * SOAP_FMAC2 soap_instantiate_ns1__ResponseStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ResponseStatus * soap_new_ns1__ResponseStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ResponseStatus(soap, n, NULL, NULL, NULL);
}

inline ns1__ResponseStatus * soap_new_req_ns1__ResponseStatus(
	struct soap *soap,
	int code,
	const std::string& description)
{
	ns1__ResponseStatus *_p = ::soap_new_ns1__ResponseStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseStatus::code = code;
		_p->ns1__ResponseStatus::description = description;
	}
	return _p;
}

inline ns1__ResponseStatus * soap_new_set_ns1__ResponseStatus(
	struct soap *soap,
	int code,
	const std::string& description)
{
	ns1__ResponseStatus *_p = ::soap_new_ns1__ResponseStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResponseStatus::code = code;
		_p->ns1__ResponseStatus::description = description;
	}
	return _p;
}

inline int soap_write_ns1__ResponseStatus(struct soap *soap, ns1__ResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseStatus", p->soap_type() == SOAP_TYPE_ns1__ResponseStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ResponseStatus(struct soap *soap, const char *URL, ns1__ResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseStatus", p->soap_type() == SOAP_TYPE_ns1__ResponseStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ResponseStatus(struct soap *soap, const char *URL, ns1__ResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseStatus", p->soap_type() == SOAP_TYPE_ns1__ResponseStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ResponseStatus(struct soap *soap, const char *URL, ns1__ResponseStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResponseStatus", p->soap_type() == SOAP_TYPE_ns1__ResponseStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ResponseStatus * SOAP_FMAC4 soap_get_ns1__ResponseStatus(struct soap*, ns1__ResponseStatus *, const char*, const char*);

inline int soap_read_ns1__ResponseStatus(struct soap *soap, ns1__ResponseStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ResponseStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ResponseStatus(struct soap *soap, const char *URL, ns1__ResponseStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ResponseStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ResponseStatus(struct soap *soap, ns1__ResponseStatus *p)
{
	if (::soap_read_ns1__ResponseStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BulkArrayEntry_DEFINED
#define SOAP_TYPE_ns1__BulkArrayEntry_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BulkArrayEntry(struct soap*, const char*, int, const ns1__BulkArrayEntry *, const char*);
SOAP_FMAC3 ns1__BulkArrayEntry * SOAP_FMAC4 soap_in_ns1__BulkArrayEntry(struct soap*, const char*, ns1__BulkArrayEntry *, const char*);
SOAP_FMAC1 ns1__BulkArrayEntry * SOAP_FMAC2 soap_instantiate_ns1__BulkArrayEntry(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BulkArrayEntry * soap_new_ns1__BulkArrayEntry(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BulkArrayEntry(soap, n, NULL, NULL, NULL);
}

inline ns1__BulkArrayEntry * soap_new_req_ns1__BulkArrayEntry(
	struct soap *soap)
{
	ns1__BulkArrayEntry *_p = ::soap_new_ns1__BulkArrayEntry(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__BulkArrayEntry * soap_new_set_ns1__BulkArrayEntry(
	struct soap *soap,
	std::string *value,
	enum ns1__FieldType *type)
{
	ns1__BulkArrayEntry *_p = ::soap_new_ns1__BulkArrayEntry(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BulkArrayEntry::value = value;
		_p->ns1__BulkArrayEntry::type = type;
	}
	return _p;
}

inline int soap_write_ns1__BulkArrayEntry(struct soap *soap, ns1__BulkArrayEntry const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArrayEntry", p->soap_type() == SOAP_TYPE_ns1__BulkArrayEntry ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BulkArrayEntry(struct soap *soap, const char *URL, ns1__BulkArrayEntry const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArrayEntry", p->soap_type() == SOAP_TYPE_ns1__BulkArrayEntry ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BulkArrayEntry(struct soap *soap, const char *URL, ns1__BulkArrayEntry const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArrayEntry", p->soap_type() == SOAP_TYPE_ns1__BulkArrayEntry ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BulkArrayEntry(struct soap *soap, const char *URL, ns1__BulkArrayEntry const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArrayEntry", p->soap_type() == SOAP_TYPE_ns1__BulkArrayEntry ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BulkArrayEntry * SOAP_FMAC4 soap_get_ns1__BulkArrayEntry(struct soap*, ns1__BulkArrayEntry *, const char*, const char*);

inline int soap_read_ns1__BulkArrayEntry(struct soap *soap, ns1__BulkArrayEntry *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BulkArrayEntry(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BulkArrayEntry(struct soap *soap, const char *URL, ns1__BulkArrayEntry *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BulkArrayEntry(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BulkArrayEntry(struct soap *soap, ns1__BulkArrayEntry *p)
{
	if (::soap_read_ns1__BulkArrayEntry(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BulkArray_DEFINED
#define SOAP_TYPE_ns1__BulkArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BulkArray(struct soap*, const char*, int, const ns1__BulkArray *, const char*);
SOAP_FMAC3 ns1__BulkArray * SOAP_FMAC4 soap_in_ns1__BulkArray(struct soap*, const char*, ns1__BulkArray *, const char*);
SOAP_FMAC1 ns1__BulkArray * SOAP_FMAC2 soap_instantiate_ns1__BulkArray(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BulkArray * soap_new_ns1__BulkArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BulkArray(soap, n, NULL, NULL, NULL);
}

inline ns1__BulkArray * soap_new_req_ns1__BulkArray(
	struct soap *soap)
{
	ns1__BulkArray *_p = ::soap_new_ns1__BulkArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__BulkArray * soap_new_set_ns1__BulkArray(
	struct soap *soap,
	const std::vector<ns1__BulkArrayEntry *> & data,
	int *columns)
{
	ns1__BulkArray *_p = ::soap_new_ns1__BulkArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BulkArray::data = data;
		_p->ns1__BulkArray::columns = columns;
	}
	return _p;
}

inline int soap_write_ns1__BulkArray(struct soap *soap, ns1__BulkArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArray", p->soap_type() == SOAP_TYPE_ns1__BulkArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BulkArray(struct soap *soap, const char *URL, ns1__BulkArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArray", p->soap_type() == SOAP_TYPE_ns1__BulkArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BulkArray(struct soap *soap, const char *URL, ns1__BulkArray const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArray", p->soap_type() == SOAP_TYPE_ns1__BulkArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BulkArray(struct soap *soap, const char *URL, ns1__BulkArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BulkArray", p->soap_type() == SOAP_TYPE_ns1__BulkArray ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BulkArray * SOAP_FMAC4 soap_get_ns1__BulkArray(struct soap*, ns1__BulkArray *, const char*, const char*);

inline int soap_read_ns1__BulkArray(struct soap *soap, ns1__BulkArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BulkArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BulkArray(struct soap *soap, const char *URL, ns1__BulkArray *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BulkArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BulkArray(struct soap *soap, ns1__BulkArray *p)
{
	if (::soap_read_ns1__BulkArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActionStandardFields_DEFINED
#define SOAP_TYPE_ns1__ActionStandardFields_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionStandardFields(struct soap*, const char*, int, const ns1__ActionStandardFields *, const char*);
SOAP_FMAC3 ns1__ActionStandardFields * SOAP_FMAC4 soap_in_ns1__ActionStandardFields(struct soap*, const char*, ns1__ActionStandardFields *, const char*);
SOAP_FMAC1 ns1__ActionStandardFields * SOAP_FMAC2 soap_instantiate_ns1__ActionStandardFields(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionStandardFields * soap_new_ns1__ActionStandardFields(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionStandardFields(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionStandardFields * soap_new_req_ns1__ActionStandardFields(
	struct soap *soap)
{
	ns1__ActionStandardFields *_p = ::soap_new_ns1__ActionStandardFields(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ActionStandardFields * soap_new_set_ns1__ActionStandardFields(
	struct soap *soap,
	int *companyId,
	int *securityId,
	int *actionId,
	std::string *mnemonic,
	std::string *flag,
	std::string *companyName,
	std::string *secIdType,
	std::string *secId,
	std::string *currency,
	enum ns1__MarketSector *marketSectorDes,
	std::string *bbUnique,
	std::string *announceDate,
	std::string *effectiveDate,
	std::string *amendDate,
	std::string *bbGlobal,
	std::string *bbGlobalCompany,
	std::string *bbSecNumDes,
	std::string *feedSource)
{
	ns1__ActionStandardFields *_p = ::soap_new_ns1__ActionStandardFields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionStandardFields::companyId = companyId;
		_p->ns1__ActionStandardFields::securityId = securityId;
		_p->ns1__ActionStandardFields::actionId = actionId;
		_p->ns1__ActionStandardFields::mnemonic = mnemonic;
		_p->ns1__ActionStandardFields::flag = flag;
		_p->ns1__ActionStandardFields::companyName = companyName;
		_p->ns1__ActionStandardFields::secIdType = secIdType;
		_p->ns1__ActionStandardFields::secId = secId;
		_p->ns1__ActionStandardFields::currency = currency;
		_p->ns1__ActionStandardFields::marketSectorDes = marketSectorDes;
		_p->ns1__ActionStandardFields::bbUnique = bbUnique;
		_p->ns1__ActionStandardFields::announceDate = announceDate;
		_p->ns1__ActionStandardFields::effectiveDate = effectiveDate;
		_p->ns1__ActionStandardFields::amendDate = amendDate;
		_p->ns1__ActionStandardFields::bbGlobal = bbGlobal;
		_p->ns1__ActionStandardFields::bbGlobalCompany = bbGlobalCompany;
		_p->ns1__ActionStandardFields::bbSecNumDes = bbSecNumDes;
		_p->ns1__ActionStandardFields::feedSource = feedSource;
	}
	return _p;
}

inline int soap_write_ns1__ActionStandardFields(struct soap *soap, ns1__ActionStandardFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionStandardFields", p->soap_type() == SOAP_TYPE_ns1__ActionStandardFields ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionStandardFields(struct soap *soap, const char *URL, ns1__ActionStandardFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionStandardFields", p->soap_type() == SOAP_TYPE_ns1__ActionStandardFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActionStandardFields(struct soap *soap, const char *URL, ns1__ActionStandardFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionStandardFields", p->soap_type() == SOAP_TYPE_ns1__ActionStandardFields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionStandardFields(struct soap *soap, const char *URL, ns1__ActionStandardFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionStandardFields", p->soap_type() == SOAP_TYPE_ns1__ActionStandardFields ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionStandardFields * SOAP_FMAC4 soap_get_ns1__ActionStandardFields(struct soap*, ns1__ActionStandardFields *, const char*, const char*);

inline int soap_read_ns1__ActionStandardFields(struct soap *soap, ns1__ActionStandardFields *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ActionStandardFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionStandardFields(struct soap *soap, const char *URL, ns1__ActionStandardFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActionStandardFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActionStandardFields(struct soap *soap, ns1__ActionStandardFields *p)
{
	if (::soap_read_ns1__ActionStandardFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__HistData_DEFINED
#define SOAP_TYPE_ns1__HistData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HistData(struct soap*, const char*, int, const ns1__HistData *, const char*);
SOAP_FMAC3 ns1__HistData * SOAP_FMAC4 soap_in_ns1__HistData(struct soap*, const char*, ns1__HistData *, const char*);
SOAP_FMAC1 ns1__HistData * SOAP_FMAC2 soap_instantiate_ns1__HistData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__HistData * soap_new_ns1__HistData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__HistData(soap, n, NULL, NULL, NULL);
}

inline ns1__HistData * soap_new_req_ns1__HistData(
	struct soap *soap)
{
	ns1__HistData *_p = ::soap_new_ns1__HistData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__HistData * soap_new_set_ns1__HistData(
	struct soap *soap,
	std::string *value)
{
	ns1__HistData *_p = ::soap_new_ns1__HistData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__HistData::value = value;
	}
	return _p;
}

inline int soap_write_ns1__HistData(struct soap *soap, ns1__HistData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistData", p->soap_type() == SOAP_TYPE_ns1__HistData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__HistData(struct soap *soap, const char *URL, ns1__HistData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistData", p->soap_type() == SOAP_TYPE_ns1__HistData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__HistData(struct soap *soap, const char *URL, ns1__HistData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistData", p->soap_type() == SOAP_TYPE_ns1__HistData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__HistData(struct soap *soap, const char *URL, ns1__HistData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistData", p->soap_type() == SOAP_TYPE_ns1__HistData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__HistData * SOAP_FMAC4 soap_get_ns1__HistData(struct soap*, ns1__HistData *, const char*, const char*);

inline int soap_read_ns1__HistData(struct soap *soap, ns1__HistData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__HistData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__HistData(struct soap *soap, const char *URL, ns1__HistData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__HistData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__HistData(struct soap *soap, ns1__HistData *p)
{
	if (::soap_read_ns1__HistData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QRMQuote_DEFINED
#define SOAP_TYPE_ns1__QRMQuote_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QRMQuote(struct soap*, const char*, int, const ns1__QRMQuote *, const char*);
SOAP_FMAC3 ns1__QRMQuote * SOAP_FMAC4 soap_in_ns1__QRMQuote(struct soap*, const char*, ns1__QRMQuote *, const char*);
SOAP_FMAC1 ns1__QRMQuote * SOAP_FMAC2 soap_instantiate_ns1__QRMQuote(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QRMQuote * soap_new_ns1__QRMQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QRMQuote(soap, n, NULL, NULL, NULL);
}

inline ns1__QRMQuote * soap_new_req_ns1__QRMQuote(
	struct soap *soap,
	const std::vector<ns1__QRMQuoteData *> & matchedQuote)
{
	ns1__QRMQuote *_p = ::soap_new_ns1__QRMQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRMQuote::matchedQuote = matchedQuote;
	}
	return _p;
}

inline ns1__QRMQuote * soap_new_set_ns1__QRMQuote(
	struct soap *soap,
	const std::vector<ns1__QRMQuoteData *> & matchedQuote,
	time_t *dateTime,
	std::string *condCode)
{
	ns1__QRMQuote *_p = ::soap_new_ns1__QRMQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRMQuote::matchedQuote = matchedQuote;
		_p->ns1__QRMQuote::dateTime = dateTime;
		_p->ns1__QRMQuote::condCode = condCode;
	}
	return _p;
}

inline int soap_write_ns1__QRMQuote(struct soap *soap, ns1__QRMQuote const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuote", p->soap_type() == SOAP_TYPE_ns1__QRMQuote ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QRMQuote(struct soap *soap, const char *URL, ns1__QRMQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuote", p->soap_type() == SOAP_TYPE_ns1__QRMQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QRMQuote(struct soap *soap, const char *URL, ns1__QRMQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuote", p->soap_type() == SOAP_TYPE_ns1__QRMQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QRMQuote(struct soap *soap, const char *URL, ns1__QRMQuote const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuote", p->soap_type() == SOAP_TYPE_ns1__QRMQuote ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QRMQuote * SOAP_FMAC4 soap_get_ns1__QRMQuote(struct soap*, ns1__QRMQuote *, const char*, const char*);

inline int soap_read_ns1__QRMQuote(struct soap *soap, ns1__QRMQuote *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QRMQuote(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QRMQuote(struct soap *soap, const char *URL, ns1__QRMQuote *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QRMQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QRMQuote(struct soap *soap, ns1__QRMQuote *p)
{
	if (::soap_read_ns1__QRMQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QRMQuoteData_DEFINED
#define SOAP_TYPE_ns1__QRMQuoteData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QRMQuoteData(struct soap*, const char*, int, const ns1__QRMQuoteData *, const char*);
SOAP_FMAC3 ns1__QRMQuoteData * SOAP_FMAC4 soap_in_ns1__QRMQuoteData(struct soap*, const char*, ns1__QRMQuoteData *, const char*);
SOAP_FMAC1 ns1__QRMQuoteData * SOAP_FMAC2 soap_instantiate_ns1__QRMQuoteData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QRMQuoteData * soap_new_ns1__QRMQuoteData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QRMQuoteData(soap, n, NULL, NULL, NULL);
}

inline ns1__QRMQuoteData * soap_new_req_ns1__QRMQuoteData(
	struct soap *soap)
{
	ns1__QRMQuoteData *_p = ::soap_new_ns1__QRMQuoteData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QRMQuoteData * soap_new_set_ns1__QRMQuoteData(
	struct soap *soap,
	std::string *type,
	std::string *price,
	std::string *volume,
	std::string *mm,
	std::string *exCode)
{
	ns1__QRMQuoteData *_p = ::soap_new_ns1__QRMQuoteData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRMQuoteData::type = type;
		_p->ns1__QRMQuoteData::price = price;
		_p->ns1__QRMQuoteData::volume = volume;
		_p->ns1__QRMQuoteData::mm = mm;
		_p->ns1__QRMQuoteData::exCode = exCode;
	}
	return _p;
}

inline int soap_write_ns1__QRMQuoteData(struct soap *soap, ns1__QRMQuoteData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuoteData", p->soap_type() == SOAP_TYPE_ns1__QRMQuoteData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QRMQuoteData(struct soap *soap, const char *URL, ns1__QRMQuoteData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuoteData", p->soap_type() == SOAP_TYPE_ns1__QRMQuoteData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QRMQuoteData(struct soap *soap, const char *URL, ns1__QRMQuoteData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuoteData", p->soap_type() == SOAP_TYPE_ns1__QRMQuoteData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QRMQuoteData(struct soap *soap, const char *URL, ns1__QRMQuoteData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuoteData", p->soap_type() == SOAP_TYPE_ns1__QRMQuoteData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QRMQuoteData * SOAP_FMAC4 soap_get_ns1__QRMQuoteData(struct soap*, ns1__QRMQuoteData *, const char*, const char*);

inline int soap_read_ns1__QRMQuoteData(struct soap *soap, ns1__QRMQuoteData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QRMQuoteData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QRMQuoteData(struct soap *soap, const char *URL, ns1__QRMQuoteData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QRMQuoteData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QRMQuoteData(struct soap *soap, ns1__QRMQuoteData *p)
{
	if (::soap_read_ns1__QRMQuoteData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QRQuote_DEFINED
#define SOAP_TYPE_ns1__QRQuote_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QRQuote(struct soap*, const char*, int, const ns1__QRQuote *, const char*);
SOAP_FMAC3 ns1__QRQuote * SOAP_FMAC4 soap_in_ns1__QRQuote(struct soap*, const char*, ns1__QRQuote *, const char*);
SOAP_FMAC1 ns1__QRQuote * SOAP_FMAC2 soap_instantiate_ns1__QRQuote(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QRQuote * soap_new_ns1__QRQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QRQuote(soap, n, NULL, NULL, NULL);
}

inline ns1__QRQuote * soap_new_req_ns1__QRQuote(
	struct soap *soap)
{
	ns1__QRQuote *_p = ::soap_new_ns1__QRQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QRQuote * soap_new_set_ns1__QRQuote(
	struct soap *soap,
	time_t *dateTime,
	std::string *price,
	std::string *volume,
	std::string *exCode,
	std::string *condCode)
{
	ns1__QRQuote *_p = ::soap_new_ns1__QRQuote(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRQuote::dateTime = dateTime;
		_p->ns1__QRQuote::price = price;
		_p->ns1__QRQuote::volume = volume;
		_p->ns1__QRQuote::exCode = exCode;
		_p->ns1__QRQuote::condCode = condCode;
	}
	return _p;
}

inline int soap_write_ns1__QRQuote(struct soap *soap, ns1__QRQuote const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuote", p->soap_type() == SOAP_TYPE_ns1__QRQuote ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QRQuote(struct soap *soap, const char *URL, ns1__QRQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuote", p->soap_type() == SOAP_TYPE_ns1__QRQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QRQuote(struct soap *soap, const char *URL, ns1__QRQuote const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuote", p->soap_type() == SOAP_TYPE_ns1__QRQuote ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QRQuote(struct soap *soap, const char *URL, ns1__QRQuote const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuote", p->soap_type() == SOAP_TYPE_ns1__QRQuote ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QRQuote * SOAP_FMAC4 soap_get_ns1__QRQuote(struct soap*, ns1__QRQuote *, const char*, const char*);

inline int soap_read_ns1__QRQuote(struct soap *soap, ns1__QRQuote *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QRQuote(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QRQuote(struct soap *soap, const char *URL, ns1__QRQuote *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QRQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QRQuote(struct soap *soap, ns1__QRQuote *p)
{
	if (::soap_read_ns1__QRQuote(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QRMQuotes_DEFINED
#define SOAP_TYPE_ns1__QRMQuotes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QRMQuotes(struct soap*, const char*, int, const ns1__QRMQuotes *, const char*);
SOAP_FMAC3 ns1__QRMQuotes * SOAP_FMAC4 soap_in_ns1__QRMQuotes(struct soap*, const char*, ns1__QRMQuotes *, const char*);
SOAP_FMAC1 ns1__QRMQuotes * SOAP_FMAC2 soap_instantiate_ns1__QRMQuotes(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QRMQuotes * soap_new_ns1__QRMQuotes(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QRMQuotes(soap, n, NULL, NULL, NULL);
}

inline ns1__QRMQuotes * soap_new_req_ns1__QRMQuotes(
	struct soap *soap)
{
	ns1__QRMQuotes *_p = ::soap_new_ns1__QRMQuotes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QRMQuotes * soap_new_set_ns1__QRMQuotes(
	struct soap *soap,
	const std::vector<ns1__QRMQuote *> & quote)
{
	ns1__QRMQuotes *_p = ::soap_new_ns1__QRMQuotes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRMQuotes::quote = quote;
	}
	return _p;
}

inline int soap_write_ns1__QRMQuotes(struct soap *soap, ns1__QRMQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuotes", p->soap_type() == SOAP_TYPE_ns1__QRMQuotes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QRMQuotes(struct soap *soap, const char *URL, ns1__QRMQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuotes", p->soap_type() == SOAP_TYPE_ns1__QRMQuotes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QRMQuotes(struct soap *soap, const char *URL, ns1__QRMQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuotes", p->soap_type() == SOAP_TYPE_ns1__QRMQuotes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QRMQuotes(struct soap *soap, const char *URL, ns1__QRMQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRMQuotes", p->soap_type() == SOAP_TYPE_ns1__QRMQuotes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QRMQuotes * SOAP_FMAC4 soap_get_ns1__QRMQuotes(struct soap*, ns1__QRMQuotes *, const char*, const char*);

inline int soap_read_ns1__QRMQuotes(struct soap *soap, ns1__QRMQuotes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QRMQuotes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QRMQuotes(struct soap *soap, const char *URL, ns1__QRMQuotes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QRMQuotes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QRMQuotes(struct soap *soap, ns1__QRMQuotes *p)
{
	if (::soap_read_ns1__QRMQuotes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QRQuotes_DEFINED
#define SOAP_TYPE_ns1__QRQuotes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QRQuotes(struct soap*, const char*, int, const ns1__QRQuotes *, const char*);
SOAP_FMAC3 ns1__QRQuotes * SOAP_FMAC4 soap_in_ns1__QRQuotes(struct soap*, const char*, ns1__QRQuotes *, const char*);
SOAP_FMAC1 ns1__QRQuotes * SOAP_FMAC2 soap_instantiate_ns1__QRQuotes(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QRQuotes * soap_new_ns1__QRQuotes(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QRQuotes(soap, n, NULL, NULL, NULL);
}

inline ns1__QRQuotes * soap_new_req_ns1__QRQuotes(
	struct soap *soap)
{
	ns1__QRQuotes *_p = ::soap_new_ns1__QRQuotes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QRQuotes * soap_new_set_ns1__QRQuotes(
	struct soap *soap,
	const std::vector<ns1__QRQuote *> & quote)
{
	ns1__QRQuotes *_p = ::soap_new_ns1__QRQuotes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QRQuotes::quote = quote;
	}
	return _p;
}

inline int soap_write_ns1__QRQuotes(struct soap *soap, ns1__QRQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuotes", p->soap_type() == SOAP_TYPE_ns1__QRQuotes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QRQuotes(struct soap *soap, const char *URL, ns1__QRQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuotes", p->soap_type() == SOAP_TYPE_ns1__QRQuotes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QRQuotes(struct soap *soap, const char *URL, ns1__QRQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuotes", p->soap_type() == SOAP_TYPE_ns1__QRQuotes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QRQuotes(struct soap *soap, const char *URL, ns1__QRQuotes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QRQuotes", p->soap_type() == SOAP_TYPE_ns1__QRQuotes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QRQuotes * SOAP_FMAC4 soap_get_ns1__QRQuotes(struct soap*, ns1__QRQuotes *, const char*, const char*);

inline int soap_read_ns1__QRQuotes(struct soap *soap, ns1__QRQuotes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QRQuotes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QRQuotes(struct soap *soap, const char *URL, ns1__QRQuotes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QRQuotes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QRQuotes(struct soap *soap, ns1__QRQuotes *p)
{
	if (::soap_read_ns1__QRQuotes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Data_DEFINED
#define SOAP_TYPE_ns1__Data_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Data(struct soap*, const char*, int, const ns1__Data *, const char*);
SOAP_FMAC3 ns1__Data * SOAP_FMAC4 soap_in_ns1__Data(struct soap*, const char*, ns1__Data *, const char*);
SOAP_FMAC1 ns1__Data * SOAP_FMAC2 soap_instantiate_ns1__Data(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Data * soap_new_ns1__Data(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Data(soap, n, NULL, NULL, NULL);
}

inline ns1__Data * soap_new_req_ns1__Data(
	struct soap *soap)
{
	ns1__Data *_p = ::soap_new_ns1__Data(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Data * soap_new_set_ns1__Data(
	struct soap *soap,
	const std::vector<ns1__BulkArray *> & bulkarray,
	std::string *field,
	std::string *value,
	bool *isArray,
	int *rows)
{
	ns1__Data *_p = ::soap_new_ns1__Data(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Data::bulkarray = bulkarray;
		_p->ns1__Data::field = field;
		_p->ns1__Data::value = value;
		_p->ns1__Data::isArray = isArray;
		_p->ns1__Data::rows = rows;
	}
	return _p;
}

inline int soap_write_ns1__Data(struct soap *soap, ns1__Data const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Data", p->soap_type() == SOAP_TYPE_ns1__Data ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Data(struct soap *soap, const char *URL, ns1__Data const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Data", p->soap_type() == SOAP_TYPE_ns1__Data ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Data(struct soap *soap, const char *URL, ns1__Data const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Data", p->soap_type() == SOAP_TYPE_ns1__Data ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Data(struct soap *soap, const char *URL, ns1__Data const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Data", p->soap_type() == SOAP_TYPE_ns1__Data ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Data * SOAP_FMAC4 soap_get_ns1__Data(struct soap*, ns1__Data *, const char*, const char*);

inline int soap_read_ns1__Data(struct soap *soap, ns1__Data *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Data(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Data(struct soap *soap, const char *URL, ns1__Data *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Data(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Data(struct soap *soap, ns1__Data *p)
{
	if (::soap_read_ns1__Data(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CorrectionRecord_DEFINED
#define SOAP_TYPE_ns1__CorrectionRecord_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CorrectionRecord(struct soap*, const char*, int, const ns1__CorrectionRecord *, const char*);
SOAP_FMAC3 ns1__CorrectionRecord * SOAP_FMAC4 soap_in_ns1__CorrectionRecord(struct soap*, const char*, ns1__CorrectionRecord *, const char*);
SOAP_FMAC1 ns1__CorrectionRecord * SOAP_FMAC2 soap_instantiate_ns1__CorrectionRecord(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CorrectionRecord * soap_new_ns1__CorrectionRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CorrectionRecord(soap, n, NULL, NULL, NULL);
}

inline ns1__CorrectionRecord * soap_new_req_ns1__CorrectionRecord(
	struct soap *soap,
	ns1__Instrument *instrument,
	const std::string& field,
	const std::string& oldValue,
	const std::string& oldDateEntered,
	const std::string& newValue,
	const std::string& newDateEntered,
	const std::string& timeEntered,
	const std::string& exchangeIndicator)
{
	ns1__CorrectionRecord *_p = ::soap_new_ns1__CorrectionRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CorrectionRecord::instrument = instrument;
		_p->ns1__CorrectionRecord::field = field;
		_p->ns1__CorrectionRecord::oldValue = oldValue;
		_p->ns1__CorrectionRecord::oldDateEntered = oldDateEntered;
		_p->ns1__CorrectionRecord::newValue = newValue;
		_p->ns1__CorrectionRecord::newDateEntered = newDateEntered;
		_p->ns1__CorrectionRecord::timeEntered = timeEntered;
		_p->ns1__CorrectionRecord::exchangeIndicator = exchangeIndicator;
	}
	return _p;
}

inline ns1__CorrectionRecord * soap_new_set_ns1__CorrectionRecord(
	struct soap *soap,
	ns1__Instrument *instrument,
	const std::string& field,
	const std::string& oldValue,
	const std::string& oldDateEntered,
	const std::string& newValue,
	const std::string& newDateEntered,
	const std::string& timeEntered,
	const std::string& exchangeIndicator)
{
	ns1__CorrectionRecord *_p = ::soap_new_ns1__CorrectionRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CorrectionRecord::instrument = instrument;
		_p->ns1__CorrectionRecord::field = field;
		_p->ns1__CorrectionRecord::oldValue = oldValue;
		_p->ns1__CorrectionRecord::oldDateEntered = oldDateEntered;
		_p->ns1__CorrectionRecord::newValue = newValue;
		_p->ns1__CorrectionRecord::newDateEntered = newDateEntered;
		_p->ns1__CorrectionRecord::timeEntered = timeEntered;
		_p->ns1__CorrectionRecord::exchangeIndicator = exchangeIndicator;
	}
	return _p;
}

inline int soap_write_ns1__CorrectionRecord(struct soap *soap, ns1__CorrectionRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecord", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecord ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CorrectionRecord(struct soap *soap, const char *URL, ns1__CorrectionRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecord", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecord ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CorrectionRecord(struct soap *soap, const char *URL, ns1__CorrectionRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecord", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecord ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CorrectionRecord(struct soap *soap, const char *URL, ns1__CorrectionRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecord", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecord ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CorrectionRecord * SOAP_FMAC4 soap_get_ns1__CorrectionRecord(struct soap*, ns1__CorrectionRecord *, const char*, const char*);

inline int soap_read_ns1__CorrectionRecord(struct soap *soap, ns1__CorrectionRecord *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CorrectionRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CorrectionRecord(struct soap *soap, const char *URL, ns1__CorrectionRecord *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CorrectionRecord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CorrectionRecord(struct soap *soap, ns1__CorrectionRecord *p)
{
	if (::soap_read_ns1__CorrectionRecord(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActionsInstrumentData_DEFINED
#define SOAP_TYPE_ns1__ActionsInstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionsInstrumentData(struct soap*, const char*, int, const ns1__ActionsInstrumentData *, const char*);
SOAP_FMAC3 ns1__ActionsInstrumentData * SOAP_FMAC4 soap_in_ns1__ActionsInstrumentData(struct soap*, const char*, ns1__ActionsInstrumentData *, const char*);
SOAP_FMAC1 ns1__ActionsInstrumentData * SOAP_FMAC2 soap_instantiate_ns1__ActionsInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionsInstrumentData * soap_new_ns1__ActionsInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionsInstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionsInstrumentData * soap_new_req_ns1__ActionsInstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__ActionsInstrumentData *_p = ::soap_new_ns1__ActionsInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionsInstrumentData::code = code;
	}
	return _p;
}

inline ns1__ActionsInstrumentData * soap_new_set_ns1__ActionsInstrumentData(
	struct soap *soap,
	const std::string& code,
	ns1__Instrument *instrument,
	ns1__Macro *macro,
	ns1__ActionStandardFields *standardFields,
	const std::vector<ns1__Data *> & data)
{
	ns1__ActionsInstrumentData *_p = ::soap_new_ns1__ActionsInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionsInstrumentData::code = code;
		_p->ns1__ActionsInstrumentData::instrument = instrument;
		_p->ns1__ActionsInstrumentData::macro = macro;
		_p->ns1__ActionsInstrumentData::standardFields = standardFields;
		_p->ns1__ActionsInstrumentData::data = data;
	}
	return _p;
}

inline int soap_write_ns1__ActionsInstrumentData(struct soap *soap, ns1__ActionsInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentData", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionsInstrumentData(struct soap *soap, const char *URL, ns1__ActionsInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentData", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActionsInstrumentData(struct soap *soap, const char *URL, ns1__ActionsInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentData", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionsInstrumentData(struct soap *soap, const char *URL, ns1__ActionsInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentData", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionsInstrumentData * SOAP_FMAC4 soap_get_ns1__ActionsInstrumentData(struct soap*, ns1__ActionsInstrumentData *, const char*, const char*);

inline int soap_read_ns1__ActionsInstrumentData(struct soap *soap, ns1__ActionsInstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ActionsInstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionsInstrumentData(struct soap *soap, const char *URL, ns1__ActionsInstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActionsInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActionsInstrumentData(struct soap *soap, ns1__ActionsInstrumentData *p)
{
	if (::soap_read_ns1__ActionsInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AllQuotesInstrumentData_DEFINED
#define SOAP_TYPE_ns1__AllQuotesInstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AllQuotesInstrumentData(struct soap*, const char*, int, const ns1__AllQuotesInstrumentData *, const char*);
SOAP_FMAC3 ns1__AllQuotesInstrumentData * SOAP_FMAC4 soap_in_ns1__AllQuotesInstrumentData(struct soap*, const char*, ns1__AllQuotesInstrumentData *, const char*);
SOAP_FMAC1 ns1__AllQuotesInstrumentData * SOAP_FMAC2 soap_instantiate_ns1__AllQuotesInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AllQuotesInstrumentData * soap_new_ns1__AllQuotesInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AllQuotesInstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__AllQuotesInstrumentData * soap_new_req_ns1__AllQuotesInstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__AllQuotesInstrumentData *_p = ::soap_new_ns1__AllQuotesInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AllQuotesInstrumentData::code = code;
	}
	return _p;
}

inline ns1__AllQuotesInstrumentData * soap_new_set_ns1__AllQuotesInstrumentData(
	struct soap *soap,
	ns1__Instrument *instrument,
	ns1__Macro *macro,
	std::string *pcs,
	ns1__QRMQuotes *quotes,
	const std::string& code)
{
	ns1__AllQuotesInstrumentData *_p = ::soap_new_ns1__AllQuotesInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AllQuotesInstrumentData::instrument = instrument;
		_p->ns1__AllQuotesInstrumentData::macro = macro;
		_p->ns1__AllQuotesInstrumentData::pcs = pcs;
		_p->ns1__AllQuotesInstrumentData::quotes = quotes;
		_p->ns1__AllQuotesInstrumentData::code = code;
	}
	return _p;
}

inline int soap_write_ns1__AllQuotesInstrumentData(struct soap *soap, ns1__AllQuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AllQuotesInstrumentData(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AllQuotesInstrumentData(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AllQuotesInstrumentData(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AllQuotesInstrumentData * SOAP_FMAC4 soap_get_ns1__AllQuotesInstrumentData(struct soap*, ns1__AllQuotesInstrumentData *, const char*, const char*);

inline int soap_read_ns1__AllQuotesInstrumentData(struct soap *soap, ns1__AllQuotesInstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AllQuotesInstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AllQuotesInstrumentData(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AllQuotesInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AllQuotesInstrumentData(struct soap *soap, ns1__AllQuotesInstrumentData *p)
{
	if (::soap_read_ns1__AllQuotesInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QuotesInstrumentData_DEFINED
#define SOAP_TYPE_ns1__QuotesInstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuotesInstrumentData(struct soap*, const char*, int, const ns1__QuotesInstrumentData *, const char*);
SOAP_FMAC3 ns1__QuotesInstrumentData * SOAP_FMAC4 soap_in_ns1__QuotesInstrumentData(struct soap*, const char*, ns1__QuotesInstrumentData *, const char*);
SOAP_FMAC1 ns1__QuotesInstrumentData * SOAP_FMAC2 soap_instantiate_ns1__QuotesInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QuotesInstrumentData * soap_new_ns1__QuotesInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QuotesInstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__QuotesInstrumentData * soap_new_req_ns1__QuotesInstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__QuotesInstrumentData *_p = ::soap_new_ns1__QuotesInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuotesInstrumentData::code = code;
	}
	return _p;
}

inline ns1__QuotesInstrumentData * soap_new_set_ns1__QuotesInstrumentData(
	struct soap *soap,
	ns1__Instrument *instrument,
	ns1__Macro *macro,
	std::string *pcs,
	ns1__QRQuotes *quotes,
	const std::string& code)
{
	ns1__QuotesInstrumentData *_p = ::soap_new_ns1__QuotesInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuotesInstrumentData::instrument = instrument;
		_p->ns1__QuotesInstrumentData::macro = macro;
		_p->ns1__QuotesInstrumentData::pcs = pcs;
		_p->ns1__QuotesInstrumentData::quotes = quotes;
		_p->ns1__QuotesInstrumentData::code = code;
	}
	return _p;
}

inline int soap_write_ns1__QuotesInstrumentData(struct soap *soap, ns1__QuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuotesInstrumentData(struct soap *soap, const char *URL, ns1__QuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QuotesInstrumentData(struct soap *soap, const char *URL, ns1__QuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuotesInstrumentData(struct soap *soap, const char *URL, ns1__QuotesInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentData", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QuotesInstrumentData * SOAP_FMAC4 soap_get_ns1__QuotesInstrumentData(struct soap*, ns1__QuotesInstrumentData *, const char*, const char*);

inline int soap_read_ns1__QuotesInstrumentData(struct soap *soap, ns1__QuotesInstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QuotesInstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuotesInstrumentData(struct soap *soap, const char *URL, ns1__QuotesInstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QuotesInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QuotesInstrumentData(struct soap *soap, ns1__QuotesInstrumentData *p)
{
	if (::soap_read_ns1__QuotesInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FundInstrumentData_DEFINED
#define SOAP_TYPE_ns1__FundInstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FundInstrumentData(struct soap*, const char*, int, const ns1__FundInstrumentData *, const char*);
SOAP_FMAC3 ns1__FundInstrumentData * SOAP_FMAC4 soap_in_ns1__FundInstrumentData(struct soap*, const char*, ns1__FundInstrumentData *, const char*);
SOAP_FMAC1 ns1__FundInstrumentData * SOAP_FMAC2 soap_instantiate_ns1__FundInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FundInstrumentData * soap_new_ns1__FundInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FundInstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__FundInstrumentData * soap_new_req_ns1__FundInstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__FundInstrumentData *_p = ::soap_new_ns1__FundInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstrumentData::code = code;
	}
	return _p;
}

inline ns1__FundInstrumentData * soap_new_set_ns1__FundInstrumentData(
	struct soap *soap,
	const std::string& code,
	ns1__FundInstrument *instrument,
	ns1__Macro *macro,
	const std::vector<ns1__Data *> & data)
{
	ns1__FundInstrumentData *_p = ::soap_new_ns1__FundInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstrumentData::code = code;
		_p->ns1__FundInstrumentData::instrument = instrument;
		_p->ns1__FundInstrumentData::macro = macro;
		_p->ns1__FundInstrumentData::data = data;
	}
	return _p;
}

inline int soap_write_ns1__FundInstrumentData(struct soap *soap, ns1__FundInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentData", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FundInstrumentData(struct soap *soap, const char *URL, ns1__FundInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentData", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FundInstrumentData(struct soap *soap, const char *URL, ns1__FundInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentData", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FundInstrumentData(struct soap *soap, const char *URL, ns1__FundInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentData", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FundInstrumentData * SOAP_FMAC4 soap_get_ns1__FundInstrumentData(struct soap*, ns1__FundInstrumentData *, const char*, const char*);

inline int soap_read_ns1__FundInstrumentData(struct soap *soap, ns1__FundInstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FundInstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FundInstrumentData(struct soap *soap, const char *URL, ns1__FundInstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FundInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FundInstrumentData(struct soap *soap, ns1__FundInstrumentData *p)
{
	if (::soap_read_ns1__FundInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__HistInstrumentData_DEFINED
#define SOAP_TYPE_ns1__HistInstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HistInstrumentData(struct soap*, const char*, int, const ns1__HistInstrumentData *, const char*);
SOAP_FMAC3 ns1__HistInstrumentData * SOAP_FMAC4 soap_in_ns1__HistInstrumentData(struct soap*, const char*, ns1__HistInstrumentData *, const char*);
SOAP_FMAC1 ns1__HistInstrumentData * SOAP_FMAC2 soap_instantiate_ns1__HistInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__HistInstrumentData * soap_new_ns1__HistInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__HistInstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__HistInstrumentData * soap_new_req_ns1__HistInstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__HistInstrumentData *_p = ::soap_new_ns1__HistInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__HistInstrumentData::code = code;
	}
	return _p;
}

inline ns1__HistInstrumentData * soap_new_set_ns1__HistInstrumentData(
	struct soap *soap,
	const std::string& code,
	ns1__Instrument *instrument,
	ns1__Macro *macro,
	std::string *pricingSource,
	std::string *date,
	const std::vector<ns1__HistData *> & data)
{
	ns1__HistInstrumentData *_p = ::soap_new_ns1__HistInstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__HistInstrumentData::code = code;
		_p->ns1__HistInstrumentData::instrument = instrument;
		_p->ns1__HistInstrumentData::macro = macro;
		_p->ns1__HistInstrumentData::pricingSource = pricingSource;
		_p->ns1__HistInstrumentData::date = date;
		_p->ns1__HistInstrumentData::data = data;
	}
	return _p;
}

inline int soap_write_ns1__HistInstrumentData(struct soap *soap, ns1__HistInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentData", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__HistInstrumentData(struct soap *soap, const char *URL, ns1__HistInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentData", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__HistInstrumentData(struct soap *soap, const char *URL, ns1__HistInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentData", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__HistInstrumentData(struct soap *soap, const char *URL, ns1__HistInstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentData", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__HistInstrumentData * SOAP_FMAC4 soap_get_ns1__HistInstrumentData(struct soap*, ns1__HistInstrumentData *, const char*, const char*);

inline int soap_read_ns1__HistInstrumentData(struct soap *soap, ns1__HistInstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__HistInstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__HistInstrumentData(struct soap *soap, const char *URL, ns1__HistInstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__HistInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__HistInstrumentData(struct soap *soap, ns1__HistInstrumentData *p)
{
	if (::soap_read_ns1__HistInstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InstrumentData_DEFINED
#define SOAP_TYPE_ns1__InstrumentData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstrumentData(struct soap*, const char*, int, const ns1__InstrumentData *, const char*);
SOAP_FMAC3 ns1__InstrumentData * SOAP_FMAC4 soap_in_ns1__InstrumentData(struct soap*, const char*, ns1__InstrumentData *, const char*);
SOAP_FMAC1 ns1__InstrumentData * SOAP_FMAC2 soap_instantiate_ns1__InstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InstrumentData * soap_new_ns1__InstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InstrumentData(soap, n, NULL, NULL, NULL);
}

inline ns1__InstrumentData * soap_new_req_ns1__InstrumentData(
	struct soap *soap,
	const std::string& code)
{
	ns1__InstrumentData *_p = ::soap_new_ns1__InstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstrumentData::code = code;
	}
	return _p;
}

inline ns1__InstrumentData * soap_new_set_ns1__InstrumentData(
	struct soap *soap,
	const std::string& code,
	ns1__Instrument *instrument,
	ns1__Macro *macro,
	const std::vector<ns1__Data *> & data)
{
	ns1__InstrumentData *_p = ::soap_new_ns1__InstrumentData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstrumentData::code = code;
		_p->ns1__InstrumentData::instrument = instrument;
		_p->ns1__InstrumentData::macro = macro;
		_p->ns1__InstrumentData::data = data;
	}
	return _p;
}

inline int soap_write_ns1__InstrumentData(struct soap *soap, ns1__InstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentData", p->soap_type() == SOAP_TYPE_ns1__InstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstrumentData(struct soap *soap, const char *URL, ns1__InstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentData", p->soap_type() == SOAP_TYPE_ns1__InstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InstrumentData(struct soap *soap, const char *URL, ns1__InstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentData", p->soap_type() == SOAP_TYPE_ns1__InstrumentData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstrumentData(struct soap *soap, const char *URL, ns1__InstrumentData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentData", p->soap_type() == SOAP_TYPE_ns1__InstrumentData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InstrumentData * SOAP_FMAC4 soap_get_ns1__InstrumentData(struct soap*, ns1__InstrumentData *, const char*, const char*);

inline int soap_read_ns1__InstrumentData(struct soap *soap, ns1__InstrumentData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InstrumentData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstrumentData(struct soap *soap, const char *URL, ns1__InstrumentData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InstrumentData(struct soap *soap, ns1__InstrumentData *p)
{
	if (::soap_read_ns1__InstrumentData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DataItem_DEFINED
#define SOAP_TYPE_ns1__DataItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataItem(struct soap*, const char*, int, const ns1__DataItem *, const char*);
SOAP_FMAC3 ns1__DataItem * SOAP_FMAC4 soap_in_ns1__DataItem(struct soap*, const char*, ns1__DataItem *, const char*);
SOAP_FMAC1 ns1__DataItem * SOAP_FMAC2 soap_instantiate_ns1__DataItem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DataItem * soap_new_ns1__DataItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DataItem(soap, n, NULL, NULL, NULL);
}

inline ns1__DataItem * soap_new_req_ns1__DataItem(
	struct soap *soap,
	const std::string& value)
{
	ns1__DataItem *_p = ::soap_new_ns1__DataItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItem::value = value;
	}
	return _p;
}

inline ns1__DataItem * soap_new_set_ns1__DataItem(
	struct soap *soap,
	const std::string& value)
{
	ns1__DataItem *_p = ::soap_new_ns1__DataItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DataItem::value = value;
	}
	return _p;
}

inline int soap_write_ns1__DataItem(struct soap *soap, ns1__DataItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItem", p->soap_type() == SOAP_TYPE_ns1__DataItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DataItem(struct soap *soap, const char *URL, ns1__DataItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItem", p->soap_type() == SOAP_TYPE_ns1__DataItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DataItem(struct soap *soap, const char *URL, ns1__DataItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItem", p->soap_type() == SOAP_TYPE_ns1__DataItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DataItem(struct soap *soap, const char *URL, ns1__DataItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataItem", p->soap_type() == SOAP_TYPE_ns1__DataItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DataItem * SOAP_FMAC4 soap_get_ns1__DataItem(struct soap*, ns1__DataItem *, const char*, const char*);

inline int soap_read_ns1__DataItem(struct soap *soap, ns1__DataItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DataItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DataItem(struct soap *soap, const char *URL, ns1__DataItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DataItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DataItem(struct soap *soap, ns1__DataItem *p)
{
	if (::soap_read_ns1__DataItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Actions_DEFINED
#define SOAP_TYPE_ns1__Actions_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Actions(struct soap*, const char*, int, const ns1__Actions *, const char*);
SOAP_FMAC3 ns1__Actions * SOAP_FMAC4 soap_in_ns1__Actions(struct soap*, const char*, ns1__Actions *, const char*);
SOAP_FMAC1 ns1__Actions * SOAP_FMAC2 soap_instantiate_ns1__Actions(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Actions * soap_new_ns1__Actions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Actions(soap, n, NULL, NULL, NULL);
}

inline ns1__Actions * soap_new_req_ns1__Actions(
	struct soap *soap)
{
	ns1__Actions *_p = ::soap_new_ns1__Actions(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Actions * soap_new_set_ns1__Actions(
	struct soap *soap,
	const std::vector<std::string> & action)
{
	ns1__Actions *_p = ::soap_new_ns1__Actions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Actions::action = action;
	}
	return _p;
}

inline int soap_write_ns1__Actions(struct soap *soap, ns1__Actions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Actions", p->soap_type() == SOAP_TYPE_ns1__Actions ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Actions(struct soap *soap, const char *URL, ns1__Actions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Actions", p->soap_type() == SOAP_TYPE_ns1__Actions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Actions(struct soap *soap, const char *URL, ns1__Actions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Actions", p->soap_type() == SOAP_TYPE_ns1__Actions ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Actions(struct soap *soap, const char *URL, ns1__Actions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Actions", p->soap_type() == SOAP_TYPE_ns1__Actions ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Actions * SOAP_FMAC4 soap_get_ns1__Actions(struct soap*, ns1__Actions *, const char*, const char*);

inline int soap_read_ns1__Actions(struct soap *soap, ns1__Actions *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Actions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Actions(struct soap *soap, const char *URL, ns1__Actions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Actions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Actions(struct soap *soap, ns1__Actions *p)
{
	if (::soap_read_ns1__Actions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Override_DEFINED
#define SOAP_TYPE_ns1__Override_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Override(struct soap*, const char*, int, const ns1__Override *, const char*);
SOAP_FMAC3 ns1__Override * SOAP_FMAC4 soap_in_ns1__Override(struct soap*, const char*, ns1__Override *, const char*);
SOAP_FMAC1 ns1__Override * SOAP_FMAC2 soap_instantiate_ns1__Override(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Override * soap_new_ns1__Override(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Override(soap, n, NULL, NULL, NULL);
}

inline ns1__Override * soap_new_req_ns1__Override(
	struct soap *soap,
	const std::string& field,
	const std::string& value)
{
	ns1__Override *_p = ::soap_new_ns1__Override(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Override::field = field;
		_p->ns1__Override::value = value;
	}
	return _p;
}

inline ns1__Override * soap_new_set_ns1__Override(
	struct soap *soap,
	const std::string& field,
	const std::string& value)
{
	ns1__Override *_p = ::soap_new_ns1__Override(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Override::field = field;
		_p->ns1__Override::value = value;
	}
	return _p;
}

inline int soap_write_ns1__Override(struct soap *soap, ns1__Override const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Override", p->soap_type() == SOAP_TYPE_ns1__Override ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Override(struct soap *soap, const char *URL, ns1__Override const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Override", p->soap_type() == SOAP_TYPE_ns1__Override ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Override(struct soap *soap, const char *URL, ns1__Override const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Override", p->soap_type() == SOAP_TYPE_ns1__Override ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Override(struct soap *soap, const char *URL, ns1__Override const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Override", p->soap_type() == SOAP_TYPE_ns1__Override ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Override * SOAP_FMAC4 soap_get_ns1__Override(struct soap*, ns1__Override *, const char*, const char*);

inline int soap_read_ns1__Override(struct soap *soap, ns1__Override *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Override(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Override(struct soap *soap, const char *URL, ns1__Override *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Override(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Override(struct soap *soap, ns1__Override *p)
{
	if (::soap_read_ns1__Override(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SecondaryQualifier_DEFINED
#define SOAP_TYPE_ns1__SecondaryQualifier_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SecondaryQualifier(struct soap*, const char*, int, const ns1__SecondaryQualifier *, const char*);
SOAP_FMAC3 ns1__SecondaryQualifier * SOAP_FMAC4 soap_in_ns1__SecondaryQualifier(struct soap*, const char*, ns1__SecondaryQualifier *, const char*);
SOAP_FMAC1 ns1__SecondaryQualifier * SOAP_FMAC2 soap_instantiate_ns1__SecondaryQualifier(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SecondaryQualifier * soap_new_ns1__SecondaryQualifier(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SecondaryQualifier(soap, n, NULL, NULL, NULL);
}

inline ns1__SecondaryQualifier * soap_new_req_ns1__SecondaryQualifier(
	struct soap *soap,
	enum ns1__SecondaryQualifierType secondaryQualifierType,
	enum ns1__SecondaryQualifierOperator secondaryQualifierOperator,
	const std::string& secondaryQualifierValue)
{
	ns1__SecondaryQualifier *_p = ::soap_new_ns1__SecondaryQualifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SecondaryQualifier::secondaryQualifierType = secondaryQualifierType;
		_p->ns1__SecondaryQualifier::secondaryQualifierOperator = secondaryQualifierOperator;
		_p->ns1__SecondaryQualifier::secondaryQualifierValue = secondaryQualifierValue;
	}
	return _p;
}

inline ns1__SecondaryQualifier * soap_new_set_ns1__SecondaryQualifier(
	struct soap *soap,
	enum ns1__SecondaryQualifierType secondaryQualifierType,
	enum ns1__SecondaryQualifierOperator secondaryQualifierOperator,
	const std::string& secondaryQualifierValue)
{
	ns1__SecondaryQualifier *_p = ::soap_new_ns1__SecondaryQualifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SecondaryQualifier::secondaryQualifierType = secondaryQualifierType;
		_p->ns1__SecondaryQualifier::secondaryQualifierOperator = secondaryQualifierOperator;
		_p->ns1__SecondaryQualifier::secondaryQualifierValue = secondaryQualifierValue;
	}
	return _p;
}

inline int soap_write_ns1__SecondaryQualifier(struct soap *soap, ns1__SecondaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SecondaryQualifier", p->soap_type() == SOAP_TYPE_ns1__SecondaryQualifier ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SecondaryQualifier(struct soap *soap, const char *URL, ns1__SecondaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SecondaryQualifier", p->soap_type() == SOAP_TYPE_ns1__SecondaryQualifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SecondaryQualifier(struct soap *soap, const char *URL, ns1__SecondaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SecondaryQualifier", p->soap_type() == SOAP_TYPE_ns1__SecondaryQualifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SecondaryQualifier(struct soap *soap, const char *URL, ns1__SecondaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SecondaryQualifier", p->soap_type() == SOAP_TYPE_ns1__SecondaryQualifier ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SecondaryQualifier * SOAP_FMAC4 soap_get_ns1__SecondaryQualifier(struct soap*, ns1__SecondaryQualifier *, const char*, const char*);

inline int soap_read_ns1__SecondaryQualifier(struct soap *soap, ns1__SecondaryQualifier *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SecondaryQualifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SecondaryQualifier(struct soap *soap, const char *URL, ns1__SecondaryQualifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SecondaryQualifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SecondaryQualifier(struct soap *soap, ns1__SecondaryQualifier *p)
{
	if (::soap_read_ns1__SecondaryQualifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PrimaryQualifier_DEFINED
#define SOAP_TYPE_ns1__PrimaryQualifier_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrimaryQualifier(struct soap*, const char*, int, const ns1__PrimaryQualifier *, const char*);
SOAP_FMAC3 ns1__PrimaryQualifier * SOAP_FMAC4 soap_in_ns1__PrimaryQualifier(struct soap*, const char*, ns1__PrimaryQualifier *, const char*);
SOAP_FMAC1 ns1__PrimaryQualifier * SOAP_FMAC2 soap_instantiate_ns1__PrimaryQualifier(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PrimaryQualifier * soap_new_ns1__PrimaryQualifier(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PrimaryQualifier(soap, n, NULL, NULL, NULL);
}

inline ns1__PrimaryQualifier * soap_new_req_ns1__PrimaryQualifier(
	struct soap *soap,
	enum ns1__MacroType primaryQualifierType,
	const std::string& primaryQualifierValue)
{
	ns1__PrimaryQualifier *_p = ::soap_new_ns1__PrimaryQualifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PrimaryQualifier::primaryQualifierType = primaryQualifierType;
		_p->ns1__PrimaryQualifier::primaryQualifierValue = primaryQualifierValue;
	}
	return _p;
}

inline ns1__PrimaryQualifier * soap_new_set_ns1__PrimaryQualifier(
	struct soap *soap,
	enum ns1__MacroType primaryQualifierType,
	const std::string& primaryQualifierValue)
{
	ns1__PrimaryQualifier *_p = ::soap_new_ns1__PrimaryQualifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PrimaryQualifier::primaryQualifierType = primaryQualifierType;
		_p->ns1__PrimaryQualifier::primaryQualifierValue = primaryQualifierValue;
	}
	return _p;
}

inline int soap_write_ns1__PrimaryQualifier(struct soap *soap, ns1__PrimaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrimaryQualifier", p->soap_type() == SOAP_TYPE_ns1__PrimaryQualifier ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PrimaryQualifier(struct soap *soap, const char *URL, ns1__PrimaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrimaryQualifier", p->soap_type() == SOAP_TYPE_ns1__PrimaryQualifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PrimaryQualifier(struct soap *soap, const char *URL, ns1__PrimaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrimaryQualifier", p->soap_type() == SOAP_TYPE_ns1__PrimaryQualifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PrimaryQualifier(struct soap *soap, const char *URL, ns1__PrimaryQualifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrimaryQualifier", p->soap_type() == SOAP_TYPE_ns1__PrimaryQualifier ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PrimaryQualifier * SOAP_FMAC4 soap_get_ns1__PrimaryQualifier(struct soap*, ns1__PrimaryQualifier *, const char*, const char*);

inline int soap_read_ns1__PrimaryQualifier(struct soap *soap, ns1__PrimaryQualifier *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PrimaryQualifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PrimaryQualifier(struct soap *soap, const char *URL, ns1__PrimaryQualifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PrimaryQualifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PrimaryQualifier(struct soap *soap, ns1__PrimaryQualifier *p)
{
	if (::soap_read_ns1__PrimaryQualifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Macro_DEFINED
#define SOAP_TYPE_ns1__Macro_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Macro(struct soap*, const char*, int, const ns1__Macro *, const char*);
SOAP_FMAC3 ns1__Macro * SOAP_FMAC4 soap_in_ns1__Macro(struct soap*, const char*, ns1__Macro *, const char*);
SOAP_FMAC1 ns1__Macro * SOAP_FMAC2 soap_instantiate_ns1__Macro(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Macro * soap_new_ns1__Macro(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Macro(soap, n, NULL, NULL, NULL);
}

inline ns1__Macro * soap_new_req_ns1__Macro(
	struct soap *soap,
	ns1__PrimaryQualifier *primaryQualifier)
{
	ns1__Macro *_p = ::soap_new_ns1__Macro(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Macro::primaryQualifier = primaryQualifier;
	}
	return _p;
}

inline ns1__Macro * soap_new_set_ns1__Macro(
	struct soap *soap,
	ns1__PrimaryQualifier *primaryQualifier,
	const std::vector<ns1__SecondaryQualifier *> & secondaryQualifier,
	ns1__Overrides *overrides)
{
	ns1__Macro *_p = ::soap_new_ns1__Macro(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Macro::primaryQualifier = primaryQualifier;
		_p->ns1__Macro::secondaryQualifier = secondaryQualifier;
		_p->ns1__Macro::overrides = overrides;
	}
	return _p;
}

inline int soap_write_ns1__Macro(struct soap *soap, ns1__Macro const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Macro", p->soap_type() == SOAP_TYPE_ns1__Macro ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Macro(struct soap *soap, const char *URL, ns1__Macro const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Macro", p->soap_type() == SOAP_TYPE_ns1__Macro ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Macro(struct soap *soap, const char *URL, ns1__Macro const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Macro", p->soap_type() == SOAP_TYPE_ns1__Macro ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Macro(struct soap *soap, const char *URL, ns1__Macro const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Macro", p->soap_type() == SOAP_TYPE_ns1__Macro ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Macro * SOAP_FMAC4 soap_get_ns1__Macro(struct soap*, ns1__Macro *, const char*, const char*);

inline int soap_read_ns1__Macro(struct soap *soap, ns1__Macro *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Macro(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Macro(struct soap *soap, const char *URL, ns1__Macro *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Macro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Macro(struct soap *soap, ns1__Macro *p)
{
	if (::soap_read_ns1__Macro(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FundInstrument_DEFINED
#define SOAP_TYPE_ns1__FundInstrument_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FundInstrument(struct soap*, const char*, int, const ns1__FundInstrument *, const char*);
SOAP_FMAC3 ns1__FundInstrument * SOAP_FMAC4 soap_in_ns1__FundInstrument(struct soap*, const char*, ns1__FundInstrument *, const char*);
SOAP_FMAC1 ns1__FundInstrument * SOAP_FMAC2 soap_instantiate_ns1__FundInstrument(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FundInstrument * soap_new_ns1__FundInstrument(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FundInstrument(soap, n, NULL, NULL, NULL);
}

inline ns1__FundInstrument * soap_new_req_ns1__FundInstrument(
	struct soap *soap,
	const std::string& id)
{
	ns1__FundInstrument *_p = ::soap_new_ns1__FundInstrument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstrument::id = id;
	}
	return _p;
}

inline ns1__FundInstrument * soap_new_set_ns1__FundInstrument(
	struct soap *soap,
	const std::string& id,
	enum ns1__MarketSector *yellowkey,
	enum ns1__InstrumentType *type,
	ns1__Overrides *overrides,
	ns1__Period *period)
{
	ns1__FundInstrument *_p = ::soap_new_ns1__FundInstrument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstrument::id = id;
		_p->ns1__FundInstrument::yellowkey = yellowkey;
		_p->ns1__FundInstrument::type = type;
		_p->ns1__FundInstrument::overrides = overrides;
		_p->ns1__FundInstrument::period = period;
	}
	return _p;
}

inline int soap_write_ns1__FundInstrument(struct soap *soap, ns1__FundInstrument const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrument", p->soap_type() == SOAP_TYPE_ns1__FundInstrument ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FundInstrument(struct soap *soap, const char *URL, ns1__FundInstrument const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrument", p->soap_type() == SOAP_TYPE_ns1__FundInstrument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FundInstrument(struct soap *soap, const char *URL, ns1__FundInstrument const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrument", p->soap_type() == SOAP_TYPE_ns1__FundInstrument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FundInstrument(struct soap *soap, const char *URL, ns1__FundInstrument const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrument", p->soap_type() == SOAP_TYPE_ns1__FundInstrument ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FundInstrument * SOAP_FMAC4 soap_get_ns1__FundInstrument(struct soap*, ns1__FundInstrument *, const char*, const char*);

inline int soap_read_ns1__FundInstrument(struct soap *soap, ns1__FundInstrument *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FundInstrument(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FundInstrument(struct soap *soap, const char *URL, ns1__FundInstrument *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FundInstrument(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FundInstrument(struct soap *soap, ns1__FundInstrument *p)
{
	if (::soap_read_ns1__FundInstrument(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Instrument_DEFINED
#define SOAP_TYPE_ns1__Instrument_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Instrument(struct soap*, const char*, int, const ns1__Instrument *, const char*);
SOAP_FMAC3 ns1__Instrument * SOAP_FMAC4 soap_in_ns1__Instrument(struct soap*, const char*, ns1__Instrument *, const char*);
SOAP_FMAC1 ns1__Instrument * SOAP_FMAC2 soap_instantiate_ns1__Instrument(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Instrument * soap_new_ns1__Instrument(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Instrument(soap, n, NULL, NULL, NULL);
}

inline ns1__Instrument * soap_new_req_ns1__Instrument(
	struct soap *soap,
	const std::string& id)
{
	ns1__Instrument *_p = ::soap_new_ns1__Instrument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Instrument::id = id;
	}
	return _p;
}

inline ns1__Instrument * soap_new_set_ns1__Instrument(
	struct soap *soap,
	const std::string& id,
	enum ns1__MarketSector *yellowkey,
	enum ns1__InstrumentType *type,
	ns1__Overrides *overrides)
{
	ns1__Instrument *_p = ::soap_new_ns1__Instrument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Instrument::id = id;
		_p->ns1__Instrument::yellowkey = yellowkey;
		_p->ns1__Instrument::type = type;
		_p->ns1__Instrument::overrides = overrides;
	}
	return _p;
}

inline int soap_write_ns1__Instrument(struct soap *soap, ns1__Instrument const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instrument", p->soap_type() == SOAP_TYPE_ns1__Instrument ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Instrument(struct soap *soap, const char *URL, ns1__Instrument const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instrument", p->soap_type() == SOAP_TYPE_ns1__Instrument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Instrument(struct soap *soap, const char *URL, ns1__Instrument const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instrument", p->soap_type() == SOAP_TYPE_ns1__Instrument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Instrument(struct soap *soap, const char *URL, ns1__Instrument const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instrument", p->soap_type() == SOAP_TYPE_ns1__Instrument ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Instrument * SOAP_FMAC4 soap_get_ns1__Instrument(struct soap*, ns1__Instrument *, const char*, const char*);

inline int soap_read_ns1__Instrument(struct soap *soap, ns1__Instrument *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Instrument(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Instrument(struct soap *soap, const char *URL, ns1__Instrument *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Instrument(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Instrument(struct soap *soap, ns1__Instrument *p)
{
	if (::soap_read_ns1__Instrument(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AllQuotesInstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__AllQuotesInstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AllQuotesInstrumentDatas(struct soap*, const char*, int, const ns1__AllQuotesInstrumentDatas *, const char*);
SOAP_FMAC3 ns1__AllQuotesInstrumentDatas * SOAP_FMAC4 soap_in_ns1__AllQuotesInstrumentDatas(struct soap*, const char*, ns1__AllQuotesInstrumentDatas *, const char*);
SOAP_FMAC1 ns1__AllQuotesInstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__AllQuotesInstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AllQuotesInstrumentDatas * soap_new_ns1__AllQuotesInstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AllQuotesInstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__AllQuotesInstrumentDatas * soap_new_req_ns1__AllQuotesInstrumentDatas(
	struct soap *soap)
{
	ns1__AllQuotesInstrumentDatas *_p = ::soap_new_ns1__AllQuotesInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__AllQuotesInstrumentDatas * soap_new_set_ns1__AllQuotesInstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__AllQuotesInstrumentData *> & instrumentData)
{
	ns1__AllQuotesInstrumentDatas *_p = ::soap_new_ns1__AllQuotesInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AllQuotesInstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__AllQuotesInstrumentDatas(struct soap *soap, ns1__AllQuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AllQuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AllQuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AllQuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AllQuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__AllQuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AllQuotesInstrumentDatas * SOAP_FMAC4 soap_get_ns1__AllQuotesInstrumentDatas(struct soap*, ns1__AllQuotesInstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__AllQuotesInstrumentDatas(struct soap *soap, ns1__AllQuotesInstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AllQuotesInstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AllQuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__AllQuotesInstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AllQuotesInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AllQuotesInstrumentDatas(struct soap *soap, ns1__AllQuotesInstrumentDatas *p)
{
	if (::soap_read_ns1__AllQuotesInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QuotesInstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__QuotesInstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuotesInstrumentDatas(struct soap*, const char*, int, const ns1__QuotesInstrumentDatas *, const char*);
SOAP_FMAC3 ns1__QuotesInstrumentDatas * SOAP_FMAC4 soap_in_ns1__QuotesInstrumentDatas(struct soap*, const char*, ns1__QuotesInstrumentDatas *, const char*);
SOAP_FMAC1 ns1__QuotesInstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__QuotesInstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QuotesInstrumentDatas * soap_new_ns1__QuotesInstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QuotesInstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__QuotesInstrumentDatas * soap_new_req_ns1__QuotesInstrumentDatas(
	struct soap *soap)
{
	ns1__QuotesInstrumentDatas *_p = ::soap_new_ns1__QuotesInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QuotesInstrumentDatas * soap_new_set_ns1__QuotesInstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__QuotesInstrumentData *> & instrumentData)
{
	ns1__QuotesInstrumentDatas *_p = ::soap_new_ns1__QuotesInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuotesInstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__QuotesInstrumentDatas(struct soap *soap, ns1__QuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__QuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__QuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__QuotesInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__QuotesInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QuotesInstrumentDatas * SOAP_FMAC4 soap_get_ns1__QuotesInstrumentDatas(struct soap*, ns1__QuotesInstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__QuotesInstrumentDatas(struct soap *soap, ns1__QuotesInstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QuotesInstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuotesInstrumentDatas(struct soap *soap, const char *URL, ns1__QuotesInstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QuotesInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QuotesInstrumentDatas(struct soap *soap, ns1__QuotesInstrumentDatas *p)
{
	if (::soap_read_ns1__QuotesInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CorrectionRecords_DEFINED
#define SOAP_TYPE_ns1__CorrectionRecords_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CorrectionRecords(struct soap*, const char*, int, const ns1__CorrectionRecords *, const char*);
SOAP_FMAC3 ns1__CorrectionRecords * SOAP_FMAC4 soap_in_ns1__CorrectionRecords(struct soap*, const char*, ns1__CorrectionRecords *, const char*);
SOAP_FMAC1 ns1__CorrectionRecords * SOAP_FMAC2 soap_instantiate_ns1__CorrectionRecords(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CorrectionRecords * soap_new_ns1__CorrectionRecords(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CorrectionRecords(soap, n, NULL, NULL, NULL);
}

inline ns1__CorrectionRecords * soap_new_req_ns1__CorrectionRecords(
	struct soap *soap)
{
	ns1__CorrectionRecords *_p = ::soap_new_ns1__CorrectionRecords(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CorrectionRecords * soap_new_set_ns1__CorrectionRecords(
	struct soap *soap,
	const std::vector<ns1__CorrectionRecord *> & correctionRecord)
{
	ns1__CorrectionRecords *_p = ::soap_new_ns1__CorrectionRecords(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CorrectionRecords::correctionRecord = correctionRecord;
	}
	return _p;
}

inline int soap_write_ns1__CorrectionRecords(struct soap *soap, ns1__CorrectionRecords const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecords", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CorrectionRecords(struct soap *soap, const char *URL, ns1__CorrectionRecords const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecords", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecords ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CorrectionRecords(struct soap *soap, const char *URL, ns1__CorrectionRecords const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecords", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecords ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CorrectionRecords(struct soap *soap, const char *URL, ns1__CorrectionRecords const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CorrectionRecords", p->soap_type() == SOAP_TYPE_ns1__CorrectionRecords ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CorrectionRecords * SOAP_FMAC4 soap_get_ns1__CorrectionRecords(struct soap*, ns1__CorrectionRecords *, const char*, const char*);

inline int soap_read_ns1__CorrectionRecords(struct soap *soap, ns1__CorrectionRecords *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CorrectionRecords(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CorrectionRecords(struct soap *soap, const char *URL, ns1__CorrectionRecords *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CorrectionRecords(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CorrectionRecords(struct soap *soap, ns1__CorrectionRecords *p)
{
	if (::soap_read_ns1__CorrectionRecords(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActionsInstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__ActionsInstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionsInstrumentDatas(struct soap*, const char*, int, const ns1__ActionsInstrumentDatas *, const char*);
SOAP_FMAC3 ns1__ActionsInstrumentDatas * SOAP_FMAC4 soap_in_ns1__ActionsInstrumentDatas(struct soap*, const char*, ns1__ActionsInstrumentDatas *, const char*);
SOAP_FMAC1 ns1__ActionsInstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__ActionsInstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionsInstrumentDatas * soap_new_ns1__ActionsInstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionsInstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionsInstrumentDatas * soap_new_req_ns1__ActionsInstrumentDatas(
	struct soap *soap)
{
	ns1__ActionsInstrumentDatas *_p = ::soap_new_ns1__ActionsInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ActionsInstrumentDatas * soap_new_set_ns1__ActionsInstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__ActionsInstrumentData *> & instrumentData)
{
	ns1__ActionsInstrumentDatas *_p = ::soap_new_ns1__ActionsInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionsInstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__ActionsInstrumentDatas(struct soap *soap, ns1__ActionsInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionsInstrumentDatas(struct soap *soap, const char *URL, ns1__ActionsInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActionsInstrumentDatas(struct soap *soap, const char *URL, ns1__ActionsInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionsInstrumentDatas(struct soap *soap, const char *URL, ns1__ActionsInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionsInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__ActionsInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionsInstrumentDatas * SOAP_FMAC4 soap_get_ns1__ActionsInstrumentDatas(struct soap*, ns1__ActionsInstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__ActionsInstrumentDatas(struct soap *soap, ns1__ActionsInstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ActionsInstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionsInstrumentDatas(struct soap *soap, const char *URL, ns1__ActionsInstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActionsInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActionsInstrumentDatas(struct soap *soap, ns1__ActionsInstrumentDatas *p)
{
	if (::soap_read_ns1__ActionsInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FundInstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__FundInstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FundInstrumentDatas(struct soap*, const char*, int, const ns1__FundInstrumentDatas *, const char*);
SOAP_FMAC3 ns1__FundInstrumentDatas * SOAP_FMAC4 soap_in_ns1__FundInstrumentDatas(struct soap*, const char*, ns1__FundInstrumentDatas *, const char*);
SOAP_FMAC1 ns1__FundInstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__FundInstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FundInstrumentDatas * soap_new_ns1__FundInstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FundInstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__FundInstrumentDatas * soap_new_req_ns1__FundInstrumentDatas(
	struct soap *soap)
{
	ns1__FundInstrumentDatas *_p = ::soap_new_ns1__FundInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FundInstrumentDatas * soap_new_set_ns1__FundInstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__FundInstrumentData *> & instrumentData)
{
	ns1__FundInstrumentDatas *_p = ::soap_new_ns1__FundInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__FundInstrumentDatas(struct soap *soap, ns1__FundInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FundInstrumentDatas(struct soap *soap, const char *URL, ns1__FundInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FundInstrumentDatas(struct soap *soap, const char *URL, ns1__FundInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FundInstrumentDatas(struct soap *soap, const char *URL, ns1__FundInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__FundInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FundInstrumentDatas * SOAP_FMAC4 soap_get_ns1__FundInstrumentDatas(struct soap*, ns1__FundInstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__FundInstrumentDatas(struct soap *soap, ns1__FundInstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FundInstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FundInstrumentDatas(struct soap *soap, const char *URL, ns1__FundInstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FundInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FundInstrumentDatas(struct soap *soap, ns1__FundInstrumentDatas *p)
{
	if (::soap_read_ns1__FundInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__HistInstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__HistInstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__HistInstrumentDatas(struct soap*, const char*, int, const ns1__HistInstrumentDatas *, const char*);
SOAP_FMAC3 ns1__HistInstrumentDatas * SOAP_FMAC4 soap_in_ns1__HistInstrumentDatas(struct soap*, const char*, ns1__HistInstrumentDatas *, const char*);
SOAP_FMAC1 ns1__HistInstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__HistInstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__HistInstrumentDatas * soap_new_ns1__HistInstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__HistInstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__HistInstrumentDatas * soap_new_req_ns1__HistInstrumentDatas(
	struct soap *soap)
{
	ns1__HistInstrumentDatas *_p = ::soap_new_ns1__HistInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__HistInstrumentDatas * soap_new_set_ns1__HistInstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__HistInstrumentData *> & instrumentData)
{
	ns1__HistInstrumentDatas *_p = ::soap_new_ns1__HistInstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__HistInstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__HistInstrumentDatas(struct soap *soap, ns1__HistInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__HistInstrumentDatas(struct soap *soap, const char *URL, ns1__HistInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__HistInstrumentDatas(struct soap *soap, const char *URL, ns1__HistInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__HistInstrumentDatas(struct soap *soap, const char *URL, ns1__HistInstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:HistInstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__HistInstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__HistInstrumentDatas * SOAP_FMAC4 soap_get_ns1__HistInstrumentDatas(struct soap*, ns1__HistInstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__HistInstrumentDatas(struct soap *soap, ns1__HistInstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__HistInstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__HistInstrumentDatas(struct soap *soap, const char *URL, ns1__HistInstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__HistInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__HistInstrumentDatas(struct soap *soap, ns1__HistInstrumentDatas *p)
{
	if (::soap_read_ns1__HistInstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InstrumentDatas_DEFINED
#define SOAP_TYPE_ns1__InstrumentDatas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstrumentDatas(struct soap*, const char*, int, const ns1__InstrumentDatas *, const char*);
SOAP_FMAC3 ns1__InstrumentDatas * SOAP_FMAC4 soap_in_ns1__InstrumentDatas(struct soap*, const char*, ns1__InstrumentDatas *, const char*);
SOAP_FMAC1 ns1__InstrumentDatas * SOAP_FMAC2 soap_instantiate_ns1__InstrumentDatas(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InstrumentDatas * soap_new_ns1__InstrumentDatas(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InstrumentDatas(soap, n, NULL, NULL, NULL);
}

inline ns1__InstrumentDatas * soap_new_req_ns1__InstrumentDatas(
	struct soap *soap)
{
	ns1__InstrumentDatas *_p = ::soap_new_ns1__InstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__InstrumentDatas * soap_new_set_ns1__InstrumentDatas(
	struct soap *soap,
	const std::vector<ns1__InstrumentData *> & instrumentData)
{
	ns1__InstrumentDatas *_p = ::soap_new_ns1__InstrumentDatas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstrumentDatas::instrumentData = instrumentData;
	}
	return _p;
}

inline int soap_write_ns1__InstrumentDatas(struct soap *soap, ns1__InstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__InstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstrumentDatas(struct soap *soap, const char *URL, ns1__InstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__InstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InstrumentDatas(struct soap *soap, const char *URL, ns1__InstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__InstrumentDatas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstrumentDatas(struct soap *soap, const char *URL, ns1__InstrumentDatas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstrumentDatas", p->soap_type() == SOAP_TYPE_ns1__InstrumentDatas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InstrumentDatas * SOAP_FMAC4 soap_get_ns1__InstrumentDatas(struct soap*, ns1__InstrumentDatas *, const char*, const char*);

inline int soap_read_ns1__InstrumentDatas(struct soap *soap, ns1__InstrumentDatas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InstrumentDatas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstrumentDatas(struct soap *soap, const char *URL, ns1__InstrumentDatas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InstrumentDatas(struct soap *soap, ns1__InstrumentDatas *p)
{
	if (::soap_read_ns1__InstrumentDatas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FundInstruments_DEFINED
#define SOAP_TYPE_ns1__FundInstruments_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FundInstruments(struct soap*, const char*, int, const ns1__FundInstruments *, const char*);
SOAP_FMAC3 ns1__FundInstruments * SOAP_FMAC4 soap_in_ns1__FundInstruments(struct soap*, const char*, ns1__FundInstruments *, const char*);
SOAP_FMAC1 ns1__FundInstruments * SOAP_FMAC2 soap_instantiate_ns1__FundInstruments(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FundInstruments * soap_new_ns1__FundInstruments(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FundInstruments(soap, n, NULL, NULL, NULL);
}

inline ns1__FundInstruments * soap_new_req_ns1__FundInstruments(
	struct soap *soap)
{
	ns1__FundInstruments *_p = ::soap_new_ns1__FundInstruments(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FundInstruments * soap_new_set_ns1__FundInstruments(
	struct soap *soap,
	const std::vector<ns1__FundInstrument *> & instrument,
	const std::vector<ns1__Macro *> & macro)
{
	ns1__FundInstruments *_p = ::soap_new_ns1__FundInstruments(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FundInstruments::instrument = instrument;
		_p->ns1__FundInstruments::macro = macro;
	}
	return _p;
}

inline int soap_write_ns1__FundInstruments(struct soap *soap, ns1__FundInstruments const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstruments", p->soap_type() == SOAP_TYPE_ns1__FundInstruments ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FundInstruments(struct soap *soap, const char *URL, ns1__FundInstruments const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstruments", p->soap_type() == SOAP_TYPE_ns1__FundInstruments ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FundInstruments(struct soap *soap, const char *URL, ns1__FundInstruments const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstruments", p->soap_type() == SOAP_TYPE_ns1__FundInstruments ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FundInstruments(struct soap *soap, const char *URL, ns1__FundInstruments const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FundInstruments", p->soap_type() == SOAP_TYPE_ns1__FundInstruments ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FundInstruments * SOAP_FMAC4 soap_get_ns1__FundInstruments(struct soap*, ns1__FundInstruments *, const char*, const char*);

inline int soap_read_ns1__FundInstruments(struct soap *soap, ns1__FundInstruments *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FundInstruments(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FundInstruments(struct soap *soap, const char *URL, ns1__FundInstruments *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FundInstruments(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FundInstruments(struct soap *soap, ns1__FundInstruments *p)
{
	if (::soap_read_ns1__FundInstruments(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Instruments_DEFINED
#define SOAP_TYPE_ns1__Instruments_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Instruments(struct soap*, const char*, int, const ns1__Instruments *, const char*);
SOAP_FMAC3 ns1__Instruments * SOAP_FMAC4 soap_in_ns1__Instruments(struct soap*, const char*, ns1__Instruments *, const char*);
SOAP_FMAC1 ns1__Instruments * SOAP_FMAC2 soap_instantiate_ns1__Instruments(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Instruments * soap_new_ns1__Instruments(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Instruments(soap, n, NULL, NULL, NULL);
}

inline ns1__Instruments * soap_new_req_ns1__Instruments(
	struct soap *soap)
{
	ns1__Instruments *_p = ::soap_new_ns1__Instruments(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Instruments * soap_new_set_ns1__Instruments(
	struct soap *soap,
	const std::vector<ns1__Instrument *> & instrument,
	const std::vector<ns1__Macro *> & macro)
{
	ns1__Instruments *_p = ::soap_new_ns1__Instruments(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Instruments::instrument = instrument;
		_p->ns1__Instruments::macro = macro;
	}
	return _p;
}

inline int soap_write_ns1__Instruments(struct soap *soap, ns1__Instruments const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instruments", p->soap_type() == SOAP_TYPE_ns1__Instruments ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Instruments(struct soap *soap, const char *URL, ns1__Instruments const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instruments", p->soap_type() == SOAP_TYPE_ns1__Instruments ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Instruments(struct soap *soap, const char *URL, ns1__Instruments const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instruments", p->soap_type() == SOAP_TYPE_ns1__Instruments ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Instruments(struct soap *soap, const char *URL, ns1__Instruments const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Instruments", p->soap_type() == SOAP_TYPE_ns1__Instruments ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Instruments * SOAP_FMAC4 soap_get_ns1__Instruments(struct soap*, ns1__Instruments *, const char*, const char*);

inline int soap_read_ns1__Instruments(struct soap *soap, ns1__Instruments *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Instruments(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Instruments(struct soap *soap, const char *URL, ns1__Instruments *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Instruments(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Instruments(struct soap *soap, ns1__Instruments *p)
{
	if (::soap_read_ns1__Instruments(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Overrides_DEFINED
#define SOAP_TYPE_ns1__Overrides_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Overrides(struct soap*, const char*, int, const ns1__Overrides *, const char*);
SOAP_FMAC3 ns1__Overrides * SOAP_FMAC4 soap_in_ns1__Overrides(struct soap*, const char*, ns1__Overrides *, const char*);
SOAP_FMAC1 ns1__Overrides * SOAP_FMAC2 soap_instantiate_ns1__Overrides(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Overrides * soap_new_ns1__Overrides(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Overrides(soap, n, NULL, NULL, NULL);
}

inline ns1__Overrides * soap_new_req_ns1__Overrides(
	struct soap *soap)
{
	ns1__Overrides *_p = ::soap_new_ns1__Overrides(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Overrides * soap_new_set_ns1__Overrides(
	struct soap *soap,
	const std::vector<ns1__Override *> & override_)
{
	ns1__Overrides *_p = ::soap_new_ns1__Overrides(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Overrides::override_ = override_;
	}
	return _p;
}

inline int soap_write_ns1__Overrides(struct soap *soap, ns1__Overrides const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Overrides", p->soap_type() == SOAP_TYPE_ns1__Overrides ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Overrides(struct soap *soap, const char *URL, ns1__Overrides const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Overrides", p->soap_type() == SOAP_TYPE_ns1__Overrides ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Overrides(struct soap *soap, const char *URL, ns1__Overrides const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Overrides", p->soap_type() == SOAP_TYPE_ns1__Overrides ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Overrides(struct soap *soap, const char *URL, ns1__Overrides const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Overrides", p->soap_type() == SOAP_TYPE_ns1__Overrides ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Overrides * SOAP_FMAC4 soap_get_ns1__Overrides(struct soap*, ns1__Overrides *, const char*, const char*);

inline int soap_read_ns1__Overrides(struct soap *soap, ns1__Overrides *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Overrides(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Overrides(struct soap *soap, const char *URL, ns1__Overrides *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Overrides(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Overrides(struct soap *soap, ns1__Overrides *p)
{
	if (::soap_read_ns1__Overrides(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Fields_DEFINED
#define SOAP_TYPE_ns1__Fields_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Fields(struct soap*, const char*, int, const ns1__Fields *, const char*);
SOAP_FMAC3 ns1__Fields * SOAP_FMAC4 soap_in_ns1__Fields(struct soap*, const char*, ns1__Fields *, const char*);
SOAP_FMAC1 ns1__Fields * SOAP_FMAC2 soap_instantiate_ns1__Fields(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Fields * soap_new_ns1__Fields(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Fields(soap, n, NULL, NULL, NULL);
}

inline ns1__Fields * soap_new_req_ns1__Fields(
	struct soap *soap,
	const std::vector<std::string> & field)
{
	ns1__Fields *_p = ::soap_new_ns1__Fields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Fields::field = field;
	}
	return _p;
}

inline ns1__Fields * soap_new_set_ns1__Fields(
	struct soap *soap,
	const std::vector<std::string> & field)
{
	ns1__Fields *_p = ::soap_new_ns1__Fields(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Fields::field = field;
	}
	return _p;
}

inline int soap_write_ns1__Fields(struct soap *soap, ns1__Fields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Fields", p->soap_type() == SOAP_TYPE_ns1__Fields ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Fields(struct soap *soap, const char *URL, ns1__Fields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Fields", p->soap_type() == SOAP_TYPE_ns1__Fields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Fields(struct soap *soap, const char *URL, ns1__Fields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Fields", p->soap_type() == SOAP_TYPE_ns1__Fields ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Fields(struct soap *soap, const char *URL, ns1__Fields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Fields", p->soap_type() == SOAP_TYPE_ns1__Fields ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Fields * SOAP_FMAC4 soap_get_ns1__Fields(struct soap*, ns1__Fields *, const char*, const char*);

inline int soap_read_ns1__Fields(struct soap *soap, ns1__Fields *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Fields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Fields(struct soap *soap, const char *URL, ns1__Fields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Fields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Fields(struct soap *soap, ns1__Fields *p)
{
	if (::soap_read_ns1__Fields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ScheduledHeaders_DEFINED
#define SOAP_TYPE_ns1__ScheduledHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScheduledHeaders(struct soap*, const char*, int, const ns1__ScheduledHeaders *, const char*);
SOAP_FMAC3 ns1__ScheduledHeaders * SOAP_FMAC4 soap_in_ns1__ScheduledHeaders(struct soap*, const char*, ns1__ScheduledHeaders *, const char*);
SOAP_FMAC1 ns1__ScheduledHeaders * SOAP_FMAC2 soap_instantiate_ns1__ScheduledHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ScheduledHeaders * soap_new_ns1__ScheduledHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ScheduledHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__ScheduledHeaders * soap_new_req_ns1__ScheduledHeaders(
	struct soap *soap)
{
	ns1__ScheduledHeaders *_p = ::soap_new_ns1__ScheduledHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ScheduledHeaders * soap_new_set_ns1__ScheduledHeaders(
	struct soap *soap,
	ns1__GetDataHeaders *getdataHeaders,
	ns1__GetHistoryHeaders *gethistoryHeaders,
	ns1__GetFundamentalsHeaders *getfundamentalsHeaders,
	ns1__GetCompanyHeaders *getcompanyHeaders,
	ns1__GetActionsHeaders *getactionsHeaders,
	ns1__QuotesHeaders *getquotesHeaders,
	ns1__QuotesHeaders *getallquotesHeaders)
{
	ns1__ScheduledHeaders *_p = ::soap_new_ns1__ScheduledHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ScheduledHeaders::getdataHeaders = getdataHeaders;
		_p->ns1__ScheduledHeaders::gethistoryHeaders = gethistoryHeaders;
		_p->ns1__ScheduledHeaders::getfundamentalsHeaders = getfundamentalsHeaders;
		_p->ns1__ScheduledHeaders::getcompanyHeaders = getcompanyHeaders;
		_p->ns1__ScheduledHeaders::getactionsHeaders = getactionsHeaders;
		_p->ns1__ScheduledHeaders::getquotesHeaders = getquotesHeaders;
		_p->ns1__ScheduledHeaders::getallquotesHeaders = getallquotesHeaders;
	}
	return _p;
}

inline int soap_write_ns1__ScheduledHeaders(struct soap *soap, ns1__ScheduledHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledHeaders", p->soap_type() == SOAP_TYPE_ns1__ScheduledHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ScheduledHeaders(struct soap *soap, const char *URL, ns1__ScheduledHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledHeaders", p->soap_type() == SOAP_TYPE_ns1__ScheduledHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ScheduledHeaders(struct soap *soap, const char *URL, ns1__ScheduledHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledHeaders", p->soap_type() == SOAP_TYPE_ns1__ScheduledHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ScheduledHeaders(struct soap *soap, const char *URL, ns1__ScheduledHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ScheduledHeaders", p->soap_type() == SOAP_TYPE_ns1__ScheduledHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ScheduledHeaders * SOAP_FMAC4 soap_get_ns1__ScheduledHeaders(struct soap*, ns1__ScheduledHeaders *, const char*, const char*);

inline int soap_read_ns1__ScheduledHeaders(struct soap *soap, ns1__ScheduledHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ScheduledHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ScheduledHeaders(struct soap *soap, const char *URL, ns1__ScheduledHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ScheduledHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ScheduledHeaders(struct soap *soap, ns1__ScheduledHeaders *p)
{
	if (::soap_read_ns1__ScheduledHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BvalFieldSet_DEFINED
#define SOAP_TYPE_ns1__BvalFieldSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BvalFieldSet(struct soap*, const char*, int, const ns1__BvalFieldSet *, const char*);
SOAP_FMAC3 ns1__BvalFieldSet * SOAP_FMAC4 soap_in_ns1__BvalFieldSet(struct soap*, const char*, ns1__BvalFieldSet *, const char*);
SOAP_FMAC1 ns1__BvalFieldSet * SOAP_FMAC2 soap_instantiate_ns1__BvalFieldSet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BvalFieldSet * soap_new_ns1__BvalFieldSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BvalFieldSet(soap, n, NULL, NULL, NULL);
}

inline ns1__BvalFieldSet * soap_new_req_ns1__BvalFieldSet(
	struct soap *soap,
	enum ns1__BvalFieldMacro fieldmacro)
{
	ns1__BvalFieldSet *_p = ::soap_new_ns1__BvalFieldSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BvalFieldSet::fieldmacro = fieldmacro;
	}
	return _p;
}

inline ns1__BvalFieldSet * soap_new_set_ns1__BvalFieldSet(
	struct soap *soap,
	enum ns1__BvalFieldMacro fieldmacro,
	std::string *date)
{
	ns1__BvalFieldSet *_p = ::soap_new_ns1__BvalFieldSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BvalFieldSet::fieldmacro = fieldmacro;
		_p->ns1__BvalFieldSet::date = date;
	}
	return _p;
}

inline int soap_write_ns1__BvalFieldSet(struct soap *soap, ns1__BvalFieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSet", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BvalFieldSet(struct soap *soap, const char *URL, ns1__BvalFieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSet", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BvalFieldSet(struct soap *soap, const char *URL, ns1__BvalFieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSet", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BvalFieldSet(struct soap *soap, const char *URL, ns1__BvalFieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSet", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BvalFieldSet * SOAP_FMAC4 soap_get_ns1__BvalFieldSet(struct soap*, ns1__BvalFieldSet *, const char*, const char*);

inline int soap_read_ns1__BvalFieldSet(struct soap *soap, ns1__BvalFieldSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BvalFieldSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BvalFieldSet(struct soap *soap, const char *URL, ns1__BvalFieldSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BvalFieldSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BvalFieldSet(struct soap *soap, ns1__BvalFieldSet *p)
{
	if (::soap_read_ns1__BvalFieldSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BvalFieldSets_DEFINED
#define SOAP_TYPE_ns1__BvalFieldSets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BvalFieldSets(struct soap*, const char*, int, const ns1__BvalFieldSets *, const char*);
SOAP_FMAC3 ns1__BvalFieldSets * SOAP_FMAC4 soap_in_ns1__BvalFieldSets(struct soap*, const char*, ns1__BvalFieldSets *, const char*);
SOAP_FMAC1 ns1__BvalFieldSets * SOAP_FMAC2 soap_instantiate_ns1__BvalFieldSets(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BvalFieldSets * soap_new_ns1__BvalFieldSets(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BvalFieldSets(soap, n, NULL, NULL, NULL);
}

inline ns1__BvalFieldSets * soap_new_req_ns1__BvalFieldSets(
	struct soap *soap,
	const std::vector<ns1__BvalFieldSet *> & fieldset)
{
	ns1__BvalFieldSets *_p = ::soap_new_ns1__BvalFieldSets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BvalFieldSets::fieldset = fieldset;
	}
	return _p;
}

inline ns1__BvalFieldSets * soap_new_set_ns1__BvalFieldSets(
	struct soap *soap,
	const std::vector<ns1__BvalFieldSet *> & fieldset)
{
	ns1__BvalFieldSets *_p = ::soap_new_ns1__BvalFieldSets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BvalFieldSets::fieldset = fieldset;
	}
	return _p;
}

inline int soap_write_ns1__BvalFieldSets(struct soap *soap, ns1__BvalFieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSets", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BvalFieldSets(struct soap *soap, const char *URL, ns1__BvalFieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSets", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BvalFieldSets(struct soap *soap, const char *URL, ns1__BvalFieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSets", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BvalFieldSets(struct soap *soap, const char *URL, ns1__BvalFieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BvalFieldSets", p->soap_type() == SOAP_TYPE_ns1__BvalFieldSets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BvalFieldSets * SOAP_FMAC4 soap_get_ns1__BvalFieldSets(struct soap*, ns1__BvalFieldSets *, const char*, const char*);

inline int soap_read_ns1__BvalFieldSets(struct soap *soap, ns1__BvalFieldSets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BvalFieldSets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BvalFieldSets(struct soap *soap, const char *URL, ns1__BvalFieldSets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BvalFieldSets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BvalFieldSets(struct soap *soap, ns1__BvalFieldSets *p)
{
	if (::soap_read_ns1__BvalFieldSets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldSet_DEFINED
#define SOAP_TYPE_ns1__FieldSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldSet(struct soap*, const char*, int, const ns1__FieldSet *, const char*);
SOAP_FMAC3 ns1__FieldSet * SOAP_FMAC4 soap_in_ns1__FieldSet(struct soap*, const char*, ns1__FieldSet *, const char*);
SOAP_FMAC1 ns1__FieldSet * SOAP_FMAC2 soap_instantiate_ns1__FieldSet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FieldSet * soap_new_ns1__FieldSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FieldSet(soap, n, NULL, NULL, NULL);
}

inline ns1__FieldSet * soap_new_req_ns1__FieldSet(
	struct soap *soap,
	enum ns1__FieldMacro fieldmacro)
{
	ns1__FieldSet *_p = ::soap_new_ns1__FieldSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldSet::fieldmacro = fieldmacro;
	}
	return _p;
}

inline ns1__FieldSet * soap_new_set_ns1__FieldSet(
	struct soap *soap,
	enum ns1__FieldMacro fieldmacro,
	std::string *date)
{
	ns1__FieldSet *_p = ::soap_new_ns1__FieldSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldSet::fieldmacro = fieldmacro;
		_p->ns1__FieldSet::date = date;
	}
	return _p;
}

inline int soap_write_ns1__FieldSet(struct soap *soap, ns1__FieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSet", p->soap_type() == SOAP_TYPE_ns1__FieldSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldSet(struct soap *soap, const char *URL, ns1__FieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSet", p->soap_type() == SOAP_TYPE_ns1__FieldSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldSet(struct soap *soap, const char *URL, ns1__FieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSet", p->soap_type() == SOAP_TYPE_ns1__FieldSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldSet(struct soap *soap, const char *URL, ns1__FieldSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSet", p->soap_type() == SOAP_TYPE_ns1__FieldSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FieldSet * SOAP_FMAC4 soap_get_ns1__FieldSet(struct soap*, ns1__FieldSet *, const char*, const char*);

inline int soap_read_ns1__FieldSet(struct soap *soap, ns1__FieldSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FieldSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldSet(struct soap *soap, const char *URL, ns1__FieldSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldSet(struct soap *soap, ns1__FieldSet *p)
{
	if (::soap_read_ns1__FieldSet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FieldSets_DEFINED
#define SOAP_TYPE_ns1__FieldSets_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FieldSets(struct soap*, const char*, int, const ns1__FieldSets *, const char*);
SOAP_FMAC3 ns1__FieldSets * SOAP_FMAC4 soap_in_ns1__FieldSets(struct soap*, const char*, ns1__FieldSets *, const char*);
SOAP_FMAC1 ns1__FieldSets * SOAP_FMAC2 soap_instantiate_ns1__FieldSets(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FieldSets * soap_new_ns1__FieldSets(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FieldSets(soap, n, NULL, NULL, NULL);
}

inline ns1__FieldSets * soap_new_req_ns1__FieldSets(
	struct soap *soap,
	const std::vector<ns1__FieldSet *> & fieldset)
{
	ns1__FieldSets *_p = ::soap_new_ns1__FieldSets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldSets::fieldset = fieldset;
	}
	return _p;
}

inline ns1__FieldSets * soap_new_set_ns1__FieldSets(
	struct soap *soap,
	const std::vector<ns1__FieldSet *> & fieldset)
{
	ns1__FieldSets *_p = ::soap_new_ns1__FieldSets(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FieldSets::fieldset = fieldset;
	}
	return _p;
}

inline int soap_write_ns1__FieldSets(struct soap *soap, ns1__FieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSets", p->soap_type() == SOAP_TYPE_ns1__FieldSets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FieldSets(struct soap *soap, const char *URL, ns1__FieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSets", p->soap_type() == SOAP_TYPE_ns1__FieldSets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FieldSets(struct soap *soap, const char *URL, ns1__FieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSets", p->soap_type() == SOAP_TYPE_ns1__FieldSets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FieldSets(struct soap *soap, const char *URL, ns1__FieldSets const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FieldSets", p->soap_type() == SOAP_TYPE_ns1__FieldSets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FieldSets * SOAP_FMAC4 soap_get_ns1__FieldSets(struct soap*, ns1__FieldSets *, const char*, const char*);

inline int soap_read_ns1__FieldSets(struct soap *soap, ns1__FieldSets *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FieldSets(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FieldSets(struct soap *soap, const char *URL, ns1__FieldSets *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FieldSets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FieldSets(struct soap *soap, ns1__FieldSets *p)
{
	if (::soap_read_ns1__FieldSets(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TickOutputTz_DEFINED
#define SOAP_TYPE_ns1__TickOutputTz_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TickOutputTz(struct soap*, const char*, int, const ns1__TickOutputTz *, const char*);
SOAP_FMAC3 ns1__TickOutputTz * SOAP_FMAC4 soap_in_ns1__TickOutputTz(struct soap*, const char*, ns1__TickOutputTz *, const char*);
SOAP_FMAC1 ns1__TickOutputTz * SOAP_FMAC2 soap_instantiate_ns1__TickOutputTz(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TickOutputTz * soap_new_ns1__TickOutputTz(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TickOutputTz(soap, n, NULL, NULL, NULL);
}

inline ns1__TickOutputTz * soap_new_req_ns1__TickOutputTz(
	struct soap *soap,
	const std::string& timezone)
{
	ns1__TickOutputTz *_p = ::soap_new_ns1__TickOutputTz(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TickOutputTz::timezone = timezone;
	}
	return _p;
}

inline ns1__TickOutputTz * soap_new_set_ns1__TickOutputTz(
	struct soap *soap,
	const std::string& timezone,
	bool *dst)
{
	ns1__TickOutputTz *_p = ::soap_new_ns1__TickOutputTz(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TickOutputTz::timezone = timezone;
		_p->ns1__TickOutputTz::dst = dst;
	}
	return _p;
}

inline int soap_write_ns1__TickOutputTz(struct soap *soap, ns1__TickOutputTz const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TickOutputTz", p->soap_type() == SOAP_TYPE_ns1__TickOutputTz ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TickOutputTz(struct soap *soap, const char *URL, ns1__TickOutputTz const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TickOutputTz", p->soap_type() == SOAP_TYPE_ns1__TickOutputTz ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TickOutputTz(struct soap *soap, const char *URL, ns1__TickOutputTz const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TickOutputTz", p->soap_type() == SOAP_TYPE_ns1__TickOutputTz ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TickOutputTz(struct soap *soap, const char *URL, ns1__TickOutputTz const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TickOutputTz", p->soap_type() == SOAP_TYPE_ns1__TickOutputTz ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TickOutputTz * SOAP_FMAC4 soap_get_ns1__TickOutputTz(struct soap*, ns1__TickOutputTz *, const char*, const char*);

inline int soap_read_ns1__TickOutputTz(struct soap *soap, ns1__TickOutputTz *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TickOutputTz(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TickOutputTz(struct soap *soap, const char *URL, ns1__TickOutputTz *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TickOutputTz(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TickOutputTz(struct soap *soap, ns1__TickOutputTz *p)
{
	if (::soap_read_ns1__TickOutputTz(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DateTimeRange_DEFINED
#define SOAP_TYPE_ns1__DateTimeRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DateTimeRange(struct soap*, const char*, int, const ns1__DateTimeRange *, const char*);
SOAP_FMAC3 ns1__DateTimeRange * SOAP_FMAC4 soap_in_ns1__DateTimeRange(struct soap*, const char*, ns1__DateTimeRange *, const char*);
SOAP_FMAC1 ns1__DateTimeRange * SOAP_FMAC2 soap_instantiate_ns1__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DateTimeRange * soap_new_ns1__DateTimeRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DateTimeRange(soap, n, NULL, NULL, NULL);
}

inline ns1__DateTimeRange * soap_new_req_ns1__DateTimeRange(
	struct soap *soap,
	time_t startDateTime,
	time_t endDateTime,
	const std::string& region)
{
	ns1__DateTimeRange *_p = ::soap_new_ns1__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateTimeRange::startDateTime = startDateTime;
		_p->ns1__DateTimeRange::endDateTime = endDateTime;
		_p->ns1__DateTimeRange::region = region;
	}
	return _p;
}

inline ns1__DateTimeRange * soap_new_set_ns1__DateTimeRange(
	struct soap *soap,
	time_t startDateTime,
	time_t endDateTime,
	const std::string& region,
	bool *dst)
{
	ns1__DateTimeRange *_p = ::soap_new_ns1__DateTimeRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateTimeRange::startDateTime = startDateTime;
		_p->ns1__DateTimeRange::endDateTime = endDateTime;
		_p->ns1__DateTimeRange::region = region;
		_p->ns1__DateTimeRange::dst = dst;
	}
	return _p;
}

inline int soap_write_ns1__DateTimeRange(struct soap *soap, ns1__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateTimeRange", p->soap_type() == SOAP_TYPE_ns1__DateTimeRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DateTimeRange(struct soap *soap, const char *URL, ns1__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateTimeRange", p->soap_type() == SOAP_TYPE_ns1__DateTimeRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DateTimeRange(struct soap *soap, const char *URL, ns1__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateTimeRange", p->soap_type() == SOAP_TYPE_ns1__DateTimeRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DateTimeRange(struct soap *soap, const char *URL, ns1__DateTimeRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateTimeRange", p->soap_type() == SOAP_TYPE_ns1__DateTimeRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DateTimeRange * SOAP_FMAC4 soap_get_ns1__DateTimeRange(struct soap*, ns1__DateTimeRange *, const char*, const char*);

inline int soap_read_ns1__DateTimeRange(struct soap *soap, ns1__DateTimeRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DateTimeRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DateTimeRange(struct soap *soap, const char *URL, ns1__DateTimeRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DateTimeRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DateTimeRange(struct soap *soap, ns1__DateTimeRange *p)
{
	if (::soap_read_ns1__DateTimeRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__QuotesHeaders_DEFINED
#define SOAP_TYPE_ns1__QuotesHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuotesHeaders(struct soap*, const char*, int, const ns1__QuotesHeaders *, const char*);
SOAP_FMAC3 ns1__QuotesHeaders * SOAP_FMAC4 soap_in_ns1__QuotesHeaders(struct soap*, const char*, ns1__QuotesHeaders *, const char*);
SOAP_FMAC1 ns1__QuotesHeaders * SOAP_FMAC2 soap_instantiate_ns1__QuotesHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QuotesHeaders * soap_new_ns1__QuotesHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QuotesHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__QuotesHeaders * soap_new_req_ns1__QuotesHeaders(
	struct soap *soap)
{
	ns1__QuotesHeaders *_p = ::soap_new_ns1__QuotesHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__QuotesHeaders * soap_new_set_ns1__QuotesHeaders(
	struct soap *soap,
	ns1__DateRange *daterange,
	ns1__DateTimeRange *datetimerange,
	bool *displayqrmdate,
	std::string *login,
	enum ns1__PortSecDes *portsecdes,
	std::string *pricing_USCOREsource,
	enum ns1__ProgramFlag *programflag,
	int *prp,
	std::string *rundate,
	enum ns1__InstrumentType *secid,
	int *sn,
	int *tickexchlength,
	bool *ticklocaltz,
	ns1__TickOutputTz *tickoutputtz,
	std::string *time,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey)
{
	ns1__QuotesHeaders *_p = ::soap_new_ns1__QuotesHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuotesHeaders::daterange = daterange;
		_p->ns1__QuotesHeaders::datetimerange = datetimerange;
		_p->ns1__QuotesHeaders::displayqrmdate = displayqrmdate;
		_p->ns1__QuotesHeaders::login = login;
		_p->ns1__QuotesHeaders::portsecdes = portsecdes;
		_p->ns1__QuotesHeaders::pricing_USCOREsource = pricing_USCOREsource;
		_p->ns1__QuotesHeaders::programflag = programflag;
		_p->ns1__QuotesHeaders::prp = prp;
		_p->ns1__QuotesHeaders::rundate = rundate;
		_p->ns1__QuotesHeaders::secid = secid;
		_p->ns1__QuotesHeaders::sn = sn;
		_p->ns1__QuotesHeaders::tickexchlength = tickexchlength;
		_p->ns1__QuotesHeaders::ticklocaltz = ticklocaltz;
		_p->ns1__QuotesHeaders::tickoutputtz = tickoutputtz;
		_p->ns1__QuotesHeaders::time = time;
		_p->ns1__QuotesHeaders::usernumber = usernumber;
		_p->ns1__QuotesHeaders::version = version;
		_p->ns1__QuotesHeaders::ws = ws;
		_p->ns1__QuotesHeaders::yellowkey = yellowkey;
	}
	return _p;
}

inline int soap_write_ns1__QuotesHeaders(struct soap *soap, ns1__QuotesHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesHeaders", p->soap_type() == SOAP_TYPE_ns1__QuotesHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuotesHeaders(struct soap *soap, const char *URL, ns1__QuotesHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesHeaders", p->soap_type() == SOAP_TYPE_ns1__QuotesHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__QuotesHeaders(struct soap *soap, const char *URL, ns1__QuotesHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesHeaders", p->soap_type() == SOAP_TYPE_ns1__QuotesHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuotesHeaders(struct soap *soap, const char *URL, ns1__QuotesHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuotesHeaders", p->soap_type() == SOAP_TYPE_ns1__QuotesHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QuotesHeaders * SOAP_FMAC4 soap_get_ns1__QuotesHeaders(struct soap*, ns1__QuotesHeaders *, const char*, const char*);

inline int soap_read_ns1__QuotesHeaders(struct soap *soap, ns1__QuotesHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__QuotesHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuotesHeaders(struct soap *soap, const char *URL, ns1__QuotesHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__QuotesHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__QuotesHeaders(struct soap *soap, ns1__QuotesHeaders *p)
{
	if (::soap_read_ns1__QuotesHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetPortfolioValidationHeaders_DEFINED
#define SOAP_TYPE_ns1__GetPortfolioValidationHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetPortfolioValidationHeaders(struct soap*, const char*, int, const ns1__GetPortfolioValidationHeaders *, const char*);
SOAP_FMAC3 ns1__GetPortfolioValidationHeaders * SOAP_FMAC4 soap_in_ns1__GetPortfolioValidationHeaders(struct soap*, const char*, ns1__GetPortfolioValidationHeaders *, const char*);
SOAP_FMAC1 ns1__GetPortfolioValidationHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetPortfolioValidationHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetPortfolioValidationHeaders * soap_new_ns1__GetPortfolioValidationHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetPortfolioValidationHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetPortfolioValidationHeaders * soap_new_req_ns1__GetPortfolioValidationHeaders(
	struct soap *soap)
{
	ns1__GetPortfolioValidationHeaders *_p = ::soap_new_ns1__GetPortfolioValidationHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetPortfolioValidationHeaders * soap_new_set_ns1__GetPortfolioValidationHeaders(
	struct soap *soap,
	bool *closingvalues,
	enum ns1__DateFormat *dateformat,
	bool *derived,
	enum ns1__DiffFlag *diffflag,
	std::string *hist_USCOREcrncy,
	bool *historical,
	enum ns1__ProgramFlag *programflag,
	std::string *rundate,
	enum ns1__InstrumentType *secid,
	bool *secmaster,
	int *sn,
	enum ns1__SpecialChar *specialchar,
	std::string *time,
	std::string *login,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey,
	bool *exclusive_USCOREpricing_USCOREsrc,
	enum ns1__BvalTier *bvaltier,
	enum ns1__BvalSnapshot *bvalsnapshot,
	std::string *bvalsnapshotdate,
	bool *bvalbeta,
	std::string *pricing_USCOREsource,
	enum ns1__PortSecDes *portsecdes,
	int *prp)
{
	ns1__GetPortfolioValidationHeaders *_p = ::soap_new_ns1__GetPortfolioValidationHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetPortfolioValidationHeaders::closingvalues = closingvalues;
		_p->ns1__GetPortfolioValidationHeaders::dateformat = dateformat;
		_p->ns1__GetPortfolioValidationHeaders::derived = derived;
		_p->ns1__GetPortfolioValidationHeaders::diffflag = diffflag;
		_p->ns1__GetPortfolioValidationHeaders::hist_USCOREcrncy = hist_USCOREcrncy;
		_p->ns1__GetPortfolioValidationHeaders::historical = historical;
		_p->ns1__GetPortfolioValidationHeaders::programflag = programflag;
		_p->ns1__GetPortfolioValidationHeaders::rundate = rundate;
		_p->ns1__GetPortfolioValidationHeaders::secid = secid;
		_p->ns1__GetPortfolioValidationHeaders::secmaster = secmaster;
		_p->ns1__GetPortfolioValidationHeaders::sn = sn;
		_p->ns1__GetPortfolioValidationHeaders::specialchar = specialchar;
		_p->ns1__GetPortfolioValidationHeaders::time = time;
		_p->ns1__GetPortfolioValidationHeaders::login = login;
		_p->ns1__GetPortfolioValidationHeaders::usernumber = usernumber;
		_p->ns1__GetPortfolioValidationHeaders::version = version;
		_p->ns1__GetPortfolioValidationHeaders::ws = ws;
		_p->ns1__GetPortfolioValidationHeaders::yellowkey = yellowkey;
		_p->ns1__GetPortfolioValidationHeaders::exclusive_USCOREpricing_USCOREsrc = exclusive_USCOREpricing_USCOREsrc;
		_p->ns1__GetPortfolioValidationHeaders::bvaltier = bvaltier;
		_p->ns1__GetPortfolioValidationHeaders::bvalsnapshot = bvalsnapshot;
		_p->ns1__GetPortfolioValidationHeaders::bvalsnapshotdate = bvalsnapshotdate;
		_p->ns1__GetPortfolioValidationHeaders::bvalbeta = bvalbeta;
		_p->ns1__GetPortfolioValidationHeaders::pricing_USCOREsource = pricing_USCOREsource;
		_p->ns1__GetPortfolioValidationHeaders::portsecdes = portsecdes;
		_p->ns1__GetPortfolioValidationHeaders::prp = prp;
	}
	return _p;
}

inline int soap_write_ns1__GetPortfolioValidationHeaders(struct soap *soap, ns1__GetPortfolioValidationHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationHeaders", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetPortfolioValidationHeaders(struct soap *soap, const char *URL, ns1__GetPortfolioValidationHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationHeaders", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetPortfolioValidationHeaders(struct soap *soap, const char *URL, ns1__GetPortfolioValidationHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationHeaders", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetPortfolioValidationHeaders(struct soap *soap, const char *URL, ns1__GetPortfolioValidationHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetPortfolioValidationHeaders", p->soap_type() == SOAP_TYPE_ns1__GetPortfolioValidationHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetPortfolioValidationHeaders * SOAP_FMAC4 soap_get_ns1__GetPortfolioValidationHeaders(struct soap*, ns1__GetPortfolioValidationHeaders *, const char*, const char*);

inline int soap_read_ns1__GetPortfolioValidationHeaders(struct soap *soap, ns1__GetPortfolioValidationHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetPortfolioValidationHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetPortfolioValidationHeaders(struct soap *soap, const char *URL, ns1__GetPortfolioValidationHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetPortfolioValidationHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetPortfolioValidationHeaders(struct soap *soap, ns1__GetPortfolioValidationHeaders *p)
{
	if (::soap_read_ns1__GetPortfolioValidationHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetActionsHeaders_DEFINED
#define SOAP_TYPE_ns1__GetActionsHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetActionsHeaders(struct soap*, const char*, int, const ns1__GetActionsHeaders *, const char*);
SOAP_FMAC3 ns1__GetActionsHeaders * SOAP_FMAC4 soap_in_ns1__GetActionsHeaders(struct soap*, const char*, ns1__GetActionsHeaders *, const char*);
SOAP_FMAC1 ns1__GetActionsHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetActionsHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetActionsHeaders * soap_new_ns1__GetActionsHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetActionsHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetActionsHeaders * soap_new_req_ns1__GetActionsHeaders(
	struct soap *soap)
{
	ns1__GetActionsHeaders *_p = ::soap_new_ns1__GetActionsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetActionsHeaders * soap_new_set_ns1__GetActionsHeaders(
	struct soap *soap,
	ns1__Actions *actions,
	enum ns1__ActionsDate *actions_USCOREdate,
	ns1__DateRange *daterange,
	enum ns1__DateFormat *dateformat,
	enum ns1__ProgramFlag *programflag,
	std::string *rundate,
	std::string *time,
	enum ns1__InstrumentType *secid,
	int *sn,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey)
{
	ns1__GetActionsHeaders *_p = ::soap_new_ns1__GetActionsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetActionsHeaders::actions = actions;
		_p->ns1__GetActionsHeaders::actions_USCOREdate = actions_USCOREdate;
		_p->ns1__GetActionsHeaders::daterange = daterange;
		_p->ns1__GetActionsHeaders::dateformat = dateformat;
		_p->ns1__GetActionsHeaders::programflag = programflag;
		_p->ns1__GetActionsHeaders::rundate = rundate;
		_p->ns1__GetActionsHeaders::time = time;
		_p->ns1__GetActionsHeaders::secid = secid;
		_p->ns1__GetActionsHeaders::sn = sn;
		_p->ns1__GetActionsHeaders::usernumber = usernumber;
		_p->ns1__GetActionsHeaders::version = version;
		_p->ns1__GetActionsHeaders::ws = ws;
		_p->ns1__GetActionsHeaders::yellowkey = yellowkey;
	}
	return _p;
}

inline int soap_write_ns1__GetActionsHeaders(struct soap *soap, ns1__GetActionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetActionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetActionsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetActionsHeaders(struct soap *soap, const char *URL, ns1__GetActionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetActionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetActionsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetActionsHeaders(struct soap *soap, const char *URL, ns1__GetActionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetActionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetActionsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetActionsHeaders(struct soap *soap, const char *URL, ns1__GetActionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetActionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetActionsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetActionsHeaders * SOAP_FMAC4 soap_get_ns1__GetActionsHeaders(struct soap*, ns1__GetActionsHeaders *, const char*, const char*);

inline int soap_read_ns1__GetActionsHeaders(struct soap *soap, ns1__GetActionsHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetActionsHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetActionsHeaders(struct soap *soap, const char *URL, ns1__GetActionsHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetActionsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetActionsHeaders(struct soap *soap, ns1__GetActionsHeaders *p)
{
	if (::soap_read_ns1__GetActionsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetCompanyHeaders_DEFINED
#define SOAP_TYPE_ns1__GetCompanyHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetCompanyHeaders(struct soap*, const char*, int, const ns1__GetCompanyHeaders *, const char*);
SOAP_FMAC3 ns1__GetCompanyHeaders * SOAP_FMAC4 soap_in_ns1__GetCompanyHeaders(struct soap*, const char*, ns1__GetCompanyHeaders *, const char*);
SOAP_FMAC1 ns1__GetCompanyHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetCompanyHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetCompanyHeaders * soap_new_ns1__GetCompanyHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetCompanyHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetCompanyHeaders * soap_new_req_ns1__GetCompanyHeaders(
	struct soap *soap,
	bool creditrisk)
{
	ns1__GetCompanyHeaders *_p = ::soap_new_ns1__GetCompanyHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetCompanyHeaders::creditrisk = creditrisk;
	}
	return _p;
}

inline ns1__GetCompanyHeaders * soap_new_set_ns1__GetCompanyHeaders(
	struct soap *soap,
	bool creditrisk,
	enum ns1__DateFormat *dateformat,
	enum ns1__ProgramFlag *programflag,
	std::string *rundate,
	enum ns1__InstrumentType *secid,
	int *sn,
	enum ns1__SpecialChar *specialchar,
	std::string *time,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey)
{
	ns1__GetCompanyHeaders *_p = ::soap_new_ns1__GetCompanyHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetCompanyHeaders::creditrisk = creditrisk;
		_p->ns1__GetCompanyHeaders::dateformat = dateformat;
		_p->ns1__GetCompanyHeaders::programflag = programflag;
		_p->ns1__GetCompanyHeaders::rundate = rundate;
		_p->ns1__GetCompanyHeaders::secid = secid;
		_p->ns1__GetCompanyHeaders::sn = sn;
		_p->ns1__GetCompanyHeaders::specialchar = specialchar;
		_p->ns1__GetCompanyHeaders::time = time;
		_p->ns1__GetCompanyHeaders::usernumber = usernumber;
		_p->ns1__GetCompanyHeaders::version = version;
		_p->ns1__GetCompanyHeaders::ws = ws;
		_p->ns1__GetCompanyHeaders::yellowkey = yellowkey;
	}
	return _p;
}

inline int soap_write_ns1__GetCompanyHeaders(struct soap *soap, ns1__GetCompanyHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCompanyHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCompanyHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetCompanyHeaders(struct soap *soap, const char *URL, ns1__GetCompanyHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCompanyHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCompanyHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetCompanyHeaders(struct soap *soap, const char *URL, ns1__GetCompanyHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCompanyHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCompanyHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetCompanyHeaders(struct soap *soap, const char *URL, ns1__GetCompanyHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCompanyHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCompanyHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetCompanyHeaders * SOAP_FMAC4 soap_get_ns1__GetCompanyHeaders(struct soap*, ns1__GetCompanyHeaders *, const char*, const char*);

inline int soap_read_ns1__GetCompanyHeaders(struct soap *soap, ns1__GetCompanyHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetCompanyHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetCompanyHeaders(struct soap *soap, const char *URL, ns1__GetCompanyHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetCompanyHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetCompanyHeaders(struct soap *soap, ns1__GetCompanyHeaders *p)
{
	if (::soap_read_ns1__GetCompanyHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetFundamentalsHeaders_DEFINED
#define SOAP_TYPE_ns1__GetFundamentalsHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetFundamentalsHeaders(struct soap*, const char*, int, const ns1__GetFundamentalsHeaders *, const char*);
SOAP_FMAC3 ns1__GetFundamentalsHeaders * SOAP_FMAC4 soap_in_ns1__GetFundamentalsHeaders(struct soap*, const char*, ns1__GetFundamentalsHeaders *, const char*);
SOAP_FMAC1 ns1__GetFundamentalsHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetFundamentalsHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetFundamentalsHeaders * soap_new_ns1__GetFundamentalsHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetFundamentalsHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetFundamentalsHeaders * soap_new_req_ns1__GetFundamentalsHeaders(
	struct soap *soap,
	ns1__DateRange *daterange)
{
	ns1__GetFundamentalsHeaders *_p = ::soap_new_ns1__GetFundamentalsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetFundamentalsHeaders::daterange = daterange;
	}
	return _p;
}

inline ns1__GetFundamentalsHeaders * soap_new_set_ns1__GetFundamentalsHeaders(
	struct soap *soap,
	enum ns1__FilingStatus *filingstatus,
	std::string *currency,
	ns1__DateRange *daterange,
	enum ns1__Periodicity *periodicity,
	bool *consolidated,
	bool *adjusted,
	enum ns1__ProgramFlag *programflag,
	std::string *rundate,
	std::string *time,
	enum ns1__InstrumentType *secid,
	int *sn,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey)
{
	ns1__GetFundamentalsHeaders *_p = ::soap_new_ns1__GetFundamentalsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetFundamentalsHeaders::filingstatus = filingstatus;
		_p->ns1__GetFundamentalsHeaders::currency = currency;
		_p->ns1__GetFundamentalsHeaders::daterange = daterange;
		_p->ns1__GetFundamentalsHeaders::periodicity = periodicity;
		_p->ns1__GetFundamentalsHeaders::consolidated = consolidated;
		_p->ns1__GetFundamentalsHeaders::adjusted = adjusted;
		_p->ns1__GetFundamentalsHeaders::programflag = programflag;
		_p->ns1__GetFundamentalsHeaders::rundate = rundate;
		_p->ns1__GetFundamentalsHeaders::time = time;
		_p->ns1__GetFundamentalsHeaders::secid = secid;
		_p->ns1__GetFundamentalsHeaders::sn = sn;
		_p->ns1__GetFundamentalsHeaders::usernumber = usernumber;
		_p->ns1__GetFundamentalsHeaders::version = version;
		_p->ns1__GetFundamentalsHeaders::ws = ws;
		_p->ns1__GetFundamentalsHeaders::yellowkey = yellowkey;
	}
	return _p;
}

inline int soap_write_ns1__GetFundamentalsHeaders(struct soap *soap, ns1__GetFundamentalsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFundamentalsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetFundamentalsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetFundamentalsHeaders(struct soap *soap, const char *URL, ns1__GetFundamentalsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFundamentalsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetFundamentalsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetFundamentalsHeaders(struct soap *soap, const char *URL, ns1__GetFundamentalsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFundamentalsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetFundamentalsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetFundamentalsHeaders(struct soap *soap, const char *URL, ns1__GetFundamentalsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFundamentalsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetFundamentalsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetFundamentalsHeaders * SOAP_FMAC4 soap_get_ns1__GetFundamentalsHeaders(struct soap*, ns1__GetFundamentalsHeaders *, const char*, const char*);

inline int soap_read_ns1__GetFundamentalsHeaders(struct soap *soap, ns1__GetFundamentalsHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetFundamentalsHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetFundamentalsHeaders(struct soap *soap, const char *URL, ns1__GetFundamentalsHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetFundamentalsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetFundamentalsHeaders(struct soap *soap, ns1__GetFundamentalsHeaders *p)
{
	if (::soap_read_ns1__GetFundamentalsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetHistoryHeaders_DEFINED
#define SOAP_TYPE_ns1__GetHistoryHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetHistoryHeaders(struct soap*, const char*, int, const ns1__GetHistoryHeaders *, const char*);
SOAP_FMAC3 ns1__GetHistoryHeaders * SOAP_FMAC4 soap_in_ns1__GetHistoryHeaders(struct soap*, const char*, ns1__GetHistoryHeaders *, const char*);
SOAP_FMAC1 ns1__GetHistoryHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetHistoryHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetHistoryHeaders * soap_new_ns1__GetHistoryHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetHistoryHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetHistoryHeaders * soap_new_req_ns1__GetHistoryHeaders(
	struct soap *soap)
{
	ns1__GetHistoryHeaders *_p = ::soap_new_ns1__GetHistoryHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetHistoryHeaders * soap_new_set_ns1__GetHistoryHeaders(
	struct soap *soap,
	ns1__DateRange *daterange,
	std::string *hist_USCOREcrncy,
	enum ns1__HistPeriod *hist_USCOREperiod,
	enum ns1__HistOption *hist_USCOREoption,
	enum ns1__ProgramFlag *programflag,
	std::string *pricing_USCOREsource,
	bool *display_USCOREpricing_USCOREsrc,
	std::string *rundate,
	std::string *time,
	enum ns1__InstrumentType *secid,
	int *sn,
	std::string *login,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey,
	enum ns1__PortSecDes *portsecdes,
	int *prp,
	bool *exclusive_USCOREpricing_USCOREsrc,
	bool *bvalbeta,
	bool *regfvhl,
	bool *regtransparency)
{
	ns1__GetHistoryHeaders *_p = ::soap_new_ns1__GetHistoryHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetHistoryHeaders::daterange = daterange;
		_p->ns1__GetHistoryHeaders::hist_USCOREcrncy = hist_USCOREcrncy;
		_p->ns1__GetHistoryHeaders::hist_USCOREperiod = hist_USCOREperiod;
		_p->ns1__GetHistoryHeaders::hist_USCOREoption = hist_USCOREoption;
		_p->ns1__GetHistoryHeaders::programflag = programflag;
		_p->ns1__GetHistoryHeaders::pricing_USCOREsource = pricing_USCOREsource;
		_p->ns1__GetHistoryHeaders::display_USCOREpricing_USCOREsrc = display_USCOREpricing_USCOREsrc;
		_p->ns1__GetHistoryHeaders::rundate = rundate;
		_p->ns1__GetHistoryHeaders::time = time;
		_p->ns1__GetHistoryHeaders::secid = secid;
		_p->ns1__GetHistoryHeaders::sn = sn;
		_p->ns1__GetHistoryHeaders::login = login;
		_p->ns1__GetHistoryHeaders::usernumber = usernumber;
		_p->ns1__GetHistoryHeaders::version = version;
		_p->ns1__GetHistoryHeaders::ws = ws;
		_p->ns1__GetHistoryHeaders::yellowkey = yellowkey;
		_p->ns1__GetHistoryHeaders::portsecdes = portsecdes;
		_p->ns1__GetHistoryHeaders::prp = prp;
		_p->ns1__GetHistoryHeaders::exclusive_USCOREpricing_USCOREsrc = exclusive_USCOREpricing_USCOREsrc;
		_p->ns1__GetHistoryHeaders::bvalbeta = bvalbeta;
		_p->ns1__GetHistoryHeaders::regfvhl = regfvhl;
		_p->ns1__GetHistoryHeaders::regtransparency = regtransparency;
	}
	return _p;
}

inline int soap_write_ns1__GetHistoryHeaders(struct soap *soap, ns1__GetHistoryHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetHistoryHeaders", p->soap_type() == SOAP_TYPE_ns1__GetHistoryHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetHistoryHeaders(struct soap *soap, const char *URL, ns1__GetHistoryHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetHistoryHeaders", p->soap_type() == SOAP_TYPE_ns1__GetHistoryHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetHistoryHeaders(struct soap *soap, const char *URL, ns1__GetHistoryHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetHistoryHeaders", p->soap_type() == SOAP_TYPE_ns1__GetHistoryHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetHistoryHeaders(struct soap *soap, const char *URL, ns1__GetHistoryHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetHistoryHeaders", p->soap_type() == SOAP_TYPE_ns1__GetHistoryHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetHistoryHeaders * SOAP_FMAC4 soap_get_ns1__GetHistoryHeaders(struct soap*, ns1__GetHistoryHeaders *, const char*, const char*);

inline int soap_read_ns1__GetHistoryHeaders(struct soap *soap, ns1__GetHistoryHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetHistoryHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetHistoryHeaders(struct soap *soap, const char *URL, ns1__GetHistoryHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetHistoryHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetHistoryHeaders(struct soap *soap, ns1__GetHistoryHeaders *p)
{
	if (::soap_read_ns1__GetHistoryHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DateRange_DEFINED
#define SOAP_TYPE_ns1__DateRange_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DateRange(struct soap*, const char*, int, const ns1__DateRange *, const char*);
SOAP_FMAC3 ns1__DateRange * SOAP_FMAC4 soap_in_ns1__DateRange(struct soap*, const char*, ns1__DateRange *, const char*);
SOAP_FMAC1 ns1__DateRange * SOAP_FMAC2 soap_instantiate_ns1__DateRange(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DateRange * soap_new_ns1__DateRange(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DateRange(soap, n, NULL, NULL, NULL);
}

inline ns1__DateRange * soap_new_req_ns1__DateRange(
	struct soap *soap)
{
	ns1__DateRange *_p = ::soap_new_ns1__DateRange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__DateRange * soap_new_set_ns1__DateRange(
	struct soap *soap,
	ns1__Period *period,
	ns1__Duration *duration)
{
	ns1__DateRange *_p = ::soap_new_ns1__DateRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateRange::period = period;
		_p->ns1__DateRange::duration = duration;
	}
	return _p;
}

inline int soap_write_ns1__DateRange(struct soap *soap, ns1__DateRange const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateRange", p->soap_type() == SOAP_TYPE_ns1__DateRange ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DateRange(struct soap *soap, const char *URL, ns1__DateRange const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateRange", p->soap_type() == SOAP_TYPE_ns1__DateRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DateRange(struct soap *soap, const char *URL, ns1__DateRange const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateRange", p->soap_type() == SOAP_TYPE_ns1__DateRange ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DateRange(struct soap *soap, const char *URL, ns1__DateRange const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateRange", p->soap_type() == SOAP_TYPE_ns1__DateRange ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DateRange * SOAP_FMAC4 soap_get_ns1__DateRange(struct soap*, ns1__DateRange *, const char*, const char*);

inline int soap_read_ns1__DateRange(struct soap *soap, ns1__DateRange *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DateRange(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DateRange(struct soap *soap, const char *URL, ns1__DateRange *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DateRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DateRange(struct soap *soap, ns1__DateRange *p)
{
	if (::soap_read_ns1__DateRange(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Duration_DEFINED
#define SOAP_TYPE_ns1__Duration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Duration(struct soap*, const char*, int, const ns1__Duration *, const char*);
SOAP_FMAC3 ns1__Duration * SOAP_FMAC4 soap_in_ns1__Duration(struct soap*, const char*, ns1__Duration *, const char*);
SOAP_FMAC1 ns1__Duration * SOAP_FMAC2 soap_instantiate_ns1__Duration(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Duration * soap_new_ns1__Duration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Duration(soap, n, NULL, NULL, NULL);
}

inline ns1__Duration * soap_new_req_ns1__Duration(
	struct soap *soap,
	int days)
{
	ns1__Duration *_p = ::soap_new_ns1__Duration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Duration::days = days;
	}
	return _p;
}

inline ns1__Duration * soap_new_set_ns1__Duration(
	struct soap *soap,
	int days)
{
	ns1__Duration *_p = ::soap_new_ns1__Duration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Duration::days = days;
	}
	return _p;
}

inline int soap_write_ns1__Duration(struct soap *soap, ns1__Duration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Duration", p->soap_type() == SOAP_TYPE_ns1__Duration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Duration(struct soap *soap, const char *URL, ns1__Duration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Duration", p->soap_type() == SOAP_TYPE_ns1__Duration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Duration(struct soap *soap, const char *URL, ns1__Duration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Duration", p->soap_type() == SOAP_TYPE_ns1__Duration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Duration(struct soap *soap, const char *URL, ns1__Duration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Duration", p->soap_type() == SOAP_TYPE_ns1__Duration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Duration * SOAP_FMAC4 soap_get_ns1__Duration(struct soap*, ns1__Duration *, const char*, const char*);

inline int soap_read_ns1__Duration(struct soap *soap, ns1__Duration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Duration(struct soap *soap, const char *URL, ns1__Duration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Duration(struct soap *soap, ns1__Duration *p)
{
	if (::soap_read_ns1__Duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Period_DEFINED
#define SOAP_TYPE_ns1__Period_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Period(struct soap*, const char*, int, const ns1__Period *, const char*);
SOAP_FMAC3 ns1__Period * SOAP_FMAC4 soap_in_ns1__Period(struct soap*, const char*, ns1__Period *, const char*);
SOAP_FMAC1 ns1__Period * SOAP_FMAC2 soap_instantiate_ns1__Period(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Period * soap_new_ns1__Period(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Period(soap, n, NULL, NULL, NULL);
}

inline ns1__Period * soap_new_req_ns1__Period(
	struct soap *soap,
	const std::string& start,
	const std::string& end)
{
	ns1__Period *_p = ::soap_new_ns1__Period(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Period::start = start;
		_p->ns1__Period::end = end;
	}
	return _p;
}

inline ns1__Period * soap_new_set_ns1__Period(
	struct soap *soap,
	const std::string& start,
	const std::string& end)
{
	ns1__Period *_p = ::soap_new_ns1__Period(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Period::start = start;
		_p->ns1__Period::end = end;
	}
	return _p;
}

inline int soap_write_ns1__Period(struct soap *soap, ns1__Period const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Period", p->soap_type() == SOAP_TYPE_ns1__Period ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Period(struct soap *soap, const char *URL, ns1__Period const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Period", p->soap_type() == SOAP_TYPE_ns1__Period ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Period(struct soap *soap, const char *URL, ns1__Period const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Period", p->soap_type() == SOAP_TYPE_ns1__Period ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Period(struct soap *soap, const char *URL, ns1__Period const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Period", p->soap_type() == SOAP_TYPE_ns1__Period ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Period * SOAP_FMAC4 soap_get_ns1__Period(struct soap*, ns1__Period *, const char*, const char*);

inline int soap_read_ns1__Period(struct soap *soap, ns1__Period *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Period(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Period(struct soap *soap, const char *URL, ns1__Period *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Period(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Period(struct soap *soap, ns1__Period *p)
{
	if (::soap_read_ns1__Period(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetDataHeaders_DEFINED
#define SOAP_TYPE_ns1__GetDataHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetDataHeaders(struct soap*, const char*, int, const ns1__GetDataHeaders *, const char*);
SOAP_FMAC3 ns1__GetDataHeaders * SOAP_FMAC4 soap_in_ns1__GetDataHeaders(struct soap*, const char*, ns1__GetDataHeaders *, const char*);
SOAP_FMAC1 ns1__GetDataHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetDataHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetDataHeaders * soap_new_ns1__GetDataHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetDataHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetDataHeaders * soap_new_req_ns1__GetDataHeaders(
	struct soap *soap)
{
	ns1__GetDataHeaders *_p = ::soap_new_ns1__GetDataHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetDataHeaders * soap_new_set_ns1__GetDataHeaders(
	struct soap *soap,
	bool *closingvalues,
	enum ns1__DateFormat *dateformat,
	bool *derived,
	enum ns1__DiffFlag *diffflag,
	std::string *hist_USCOREcrncy,
	bool *historical,
	enum ns1__ProgramFlag *programflag,
	std::string *rundate,
	enum ns1__InstrumentType *secid,
	bool *secmaster,
	int *sn,
	enum ns1__SpecialChar *specialchar,
	std::string *time,
	std::string *login,
	int *usernumber,
	enum ns1__Version *version,
	int *ws,
	enum ns1__MarketSector *yellowkey,
	bool *quotecomposite,
	bool *creditrisk,
	bool *quotecompositehist,
	bool *exclusive_USCOREpricing_USCOREsrc,
	bool *estimates,
	enum ns1__BvalTier *bvaltier,
	enum ns1__BvalSnapshot *bvalsnapshot,
	std::string *bvalsnapshotdate,
	bool *bvalbeta,
	std::string *pricing_USCOREsource,
	enum ns1__PortSecDes *portsecdes,
	int *prp,
	bool *fundamentals,
	bool *pricing,
	std::string *skip_USCOREpcs,
	bool *vol_USCOREsurface,
	bool *regssfa,
	bool *regfvhl,
	bool *regtransparency,
	bool *regcomp,
	bool *corpstruct,
	bool *capstruct,
	enum ns1__RegSolvency *regsolvency,
	bool *reghqla,
	bool *reghqlaamer,
	bool *reghqlaeuro,
	bool *reghqlaasia,
	bool *regcbe,
	bool *regcfid,
	bool *reglqa,
	bool *mifir,
	bool *defaultrisk,
	bool *ifrs9sppi,
	bool *coltag,
	bool *uswhldtax,
	bool *regecl,
	bool *basictax,
	bool *invstprot,
	std::string *encoding)
{
	ns1__GetDataHeaders *_p = ::soap_new_ns1__GetDataHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetDataHeaders::closingvalues = closingvalues;
		_p->ns1__GetDataHeaders::dateformat = dateformat;
		_p->ns1__GetDataHeaders::derived = derived;
		_p->ns1__GetDataHeaders::diffflag = diffflag;
		_p->ns1__GetDataHeaders::hist_USCOREcrncy = hist_USCOREcrncy;
		_p->ns1__GetDataHeaders::historical = historical;
		_p->ns1__GetDataHeaders::programflag = programflag;
		_p->ns1__GetDataHeaders::rundate = rundate;
		_p->ns1__GetDataHeaders::secid = secid;
		_p->ns1__GetDataHeaders::secmaster = secmaster;
		_p->ns1__GetDataHeaders::sn = sn;
		_p->ns1__GetDataHeaders::specialchar = specialchar;
		_p->ns1__GetDataHeaders::time = time;
		_p->ns1__GetDataHeaders::login = login;
		_p->ns1__GetDataHeaders::usernumber = usernumber;
		_p->ns1__GetDataHeaders::version = version;
		_p->ns1__GetDataHeaders::ws = ws;
		_p->ns1__GetDataHeaders::yellowkey = yellowkey;
		_p->ns1__GetDataHeaders::quotecomposite = quotecomposite;
		_p->ns1__GetDataHeaders::creditrisk = creditrisk;
		_p->ns1__GetDataHeaders::quotecompositehist = quotecompositehist;
		_p->ns1__GetDataHeaders::exclusive_USCOREpricing_USCOREsrc = exclusive_USCOREpricing_USCOREsrc;
		_p->ns1__GetDataHeaders::estimates = estimates;
		_p->ns1__GetDataHeaders::bvaltier = bvaltier;
		_p->ns1__GetDataHeaders::bvalsnapshot = bvalsnapshot;
		_p->ns1__GetDataHeaders::bvalsnapshotdate = bvalsnapshotdate;
		_p->ns1__GetDataHeaders::bvalbeta = bvalbeta;
		_p->ns1__GetDataHeaders::pricing_USCOREsource = pricing_USCOREsource;
		_p->ns1__GetDataHeaders::portsecdes = portsecdes;
		_p->ns1__GetDataHeaders::prp = prp;
		_p->ns1__GetDataHeaders::fundamentals = fundamentals;
		_p->ns1__GetDataHeaders::pricing = pricing;
		_p->ns1__GetDataHeaders::skip_USCOREpcs = skip_USCOREpcs;
		_p->ns1__GetDataHeaders::vol_USCOREsurface = vol_USCOREsurface;
		_p->ns1__GetDataHeaders::regssfa = regssfa;
		_p->ns1__GetDataHeaders::regfvhl = regfvhl;
		_p->ns1__GetDataHeaders::regtransparency = regtransparency;
		_p->ns1__GetDataHeaders::regcomp = regcomp;
		_p->ns1__GetDataHeaders::corpstruct = corpstruct;
		_p->ns1__GetDataHeaders::capstruct = capstruct;
		_p->ns1__GetDataHeaders::regsolvency = regsolvency;
		_p->ns1__GetDataHeaders::reghqla = reghqla;
		_p->ns1__GetDataHeaders::reghqlaamer = reghqlaamer;
		_p->ns1__GetDataHeaders::reghqlaeuro = reghqlaeuro;
		_p->ns1__GetDataHeaders::reghqlaasia = reghqlaasia;
		_p->ns1__GetDataHeaders::regcbe = regcbe;
		_p->ns1__GetDataHeaders::regcfid = regcfid;
		_p->ns1__GetDataHeaders::reglqa = reglqa;
		_p->ns1__GetDataHeaders::mifir = mifir;
		_p->ns1__GetDataHeaders::defaultrisk = defaultrisk;
		_p->ns1__GetDataHeaders::ifrs9sppi = ifrs9sppi;
		_p->ns1__GetDataHeaders::coltag = coltag;
		_p->ns1__GetDataHeaders::uswhldtax = uswhldtax;
		_p->ns1__GetDataHeaders::regecl = regecl;
		_p->ns1__GetDataHeaders::basictax = basictax;
		_p->ns1__GetDataHeaders::invstprot = invstprot;
		_p->ns1__GetDataHeaders::encoding = encoding;
	}
	return _p;
}

inline int soap_write_ns1__GetDataHeaders(struct soap *soap, ns1__GetDataHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDataHeaders", p->soap_type() == SOAP_TYPE_ns1__GetDataHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetDataHeaders(struct soap *soap, const char *URL, ns1__GetDataHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDataHeaders", p->soap_type() == SOAP_TYPE_ns1__GetDataHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetDataHeaders(struct soap *soap, const char *URL, ns1__GetDataHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDataHeaders", p->soap_type() == SOAP_TYPE_ns1__GetDataHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetDataHeaders(struct soap *soap, const char *URL, ns1__GetDataHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDataHeaders", p->soap_type() == SOAP_TYPE_ns1__GetDataHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetDataHeaders * SOAP_FMAC4 soap_get_ns1__GetDataHeaders(struct soap*, ns1__GetDataHeaders *, const char*, const char*);

inline int soap_read_ns1__GetDataHeaders(struct soap *soap, ns1__GetDataHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetDataHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetDataHeaders(struct soap *soap, const char *URL, ns1__GetDataHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetDataHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetDataHeaders(struct soap *soap, ns1__GetDataHeaders *p)
{
	if (::soap_read_ns1__GetDataHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GetCorrectionsHeaders_DEFINED
#define SOAP_TYPE_ns1__GetCorrectionsHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetCorrectionsHeaders(struct soap*, const char*, int, const ns1__GetCorrectionsHeaders *, const char*);
SOAP_FMAC3 ns1__GetCorrectionsHeaders * SOAP_FMAC4 soap_in_ns1__GetCorrectionsHeaders(struct soap*, const char*, ns1__GetCorrectionsHeaders *, const char*);
SOAP_FMAC1 ns1__GetCorrectionsHeaders * SOAP_FMAC2 soap_instantiate_ns1__GetCorrectionsHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetCorrectionsHeaders * soap_new_ns1__GetCorrectionsHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GetCorrectionsHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__GetCorrectionsHeaders * soap_new_req_ns1__GetCorrectionsHeaders(
	struct soap *soap)
{
	ns1__GetCorrectionsHeaders *_p = ::soap_new_ns1__GetCorrectionsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__GetCorrectionsHeaders * soap_new_set_ns1__GetCorrectionsHeaders(
	struct soap *soap,
	enum ns1__DateFormat *dateformat)
{
	ns1__GetCorrectionsHeaders *_p = ::soap_new_ns1__GetCorrectionsHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GetCorrectionsHeaders::dateformat = dateformat;
	}
	return _p;
}

inline int soap_write_ns1__GetCorrectionsHeaders(struct soap *soap, ns1__GetCorrectionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GetCorrectionsHeaders(struct soap *soap, const char *URL, ns1__GetCorrectionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GetCorrectionsHeaders(struct soap *soap, const char *URL, ns1__GetCorrectionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GetCorrectionsHeaders(struct soap *soap, const char *URL, ns1__GetCorrectionsHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCorrectionsHeaders", p->soap_type() == SOAP_TYPE_ns1__GetCorrectionsHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GetCorrectionsHeaders * SOAP_FMAC4 soap_get_ns1__GetCorrectionsHeaders(struct soap*, ns1__GetCorrectionsHeaders *, const char*, const char*);

inline int soap_read_ns1__GetCorrectionsHeaders(struct soap *soap, ns1__GetCorrectionsHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GetCorrectionsHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GetCorrectionsHeaders(struct soap *soap, const char *URL, ns1__GetCorrectionsHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GetCorrectionsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GetCorrectionsHeaders(struct soap *soap, ns1__GetCorrectionsHeaders *p)
{
	if (::soap_read_ns1__GetCorrectionsHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CancelHeaders_DEFINED
#define SOAP_TYPE_ns1__CancelHeaders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CancelHeaders(struct soap*, const char*, int, const ns1__CancelHeaders *, const char*);
SOAP_FMAC3 ns1__CancelHeaders * SOAP_FMAC4 soap_in_ns1__CancelHeaders(struct soap*, const char*, ns1__CancelHeaders *, const char*);
SOAP_FMAC1 ns1__CancelHeaders * SOAP_FMAC2 soap_instantiate_ns1__CancelHeaders(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CancelHeaders * soap_new_ns1__CancelHeaders(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CancelHeaders(soap, n, NULL, NULL, NULL);
}

inline ns1__CancelHeaders * soap_new_req_ns1__CancelHeaders(
	struct soap *soap,
	enum ns1__ProgramFlag programflag)
{
	ns1__CancelHeaders *_p = ::soap_new_ns1__CancelHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelHeaders::programflag = programflag;
	}
	return _p;
}

inline ns1__CancelHeaders * soap_new_set_ns1__CancelHeaders(
	struct soap *soap,
	enum ns1__ProgramFlag programflag)
{
	ns1__CancelHeaders *_p = ::soap_new_ns1__CancelHeaders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CancelHeaders::programflag = programflag;
	}
	return _p;
}

inline int soap_write_ns1__CancelHeaders(struct soap *soap, ns1__CancelHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelHeaders", p->soap_type() == SOAP_TYPE_ns1__CancelHeaders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CancelHeaders(struct soap *soap, const char *URL, ns1__CancelHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelHeaders", p->soap_type() == SOAP_TYPE_ns1__CancelHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CancelHeaders(struct soap *soap, const char *URL, ns1__CancelHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelHeaders", p->soap_type() == SOAP_TYPE_ns1__CancelHeaders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CancelHeaders(struct soap *soap, const char *URL, ns1__CancelHeaders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CancelHeaders", p->soap_type() == SOAP_TYPE_ns1__CancelHeaders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CancelHeaders * SOAP_FMAC4 soap_get_ns1__CancelHeaders(struct soap*, ns1__CancelHeaders *, const char*, const char*);

inline int soap_read_ns1__CancelHeaders(struct soap *soap, ns1__CancelHeaders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CancelHeaders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CancelHeaders(struct soap *soap, const char *URL, ns1__CancelHeaders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CancelHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CancelHeaders(struct soap *soap, ns1__CancelHeaders *p)
{
	if (::soap_read_ns1__CancelHeaders(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__time_DEFINED
#define SOAP_TYPE_xsd__time_DEFINED

inline void soap_default_xsd__time(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__time(struct soap*, const std::string *);

#define soap_xsd__time2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__time(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__time(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "\\d{2}:\\d{2}:\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__time(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__time soap_instantiate_std__string


#define soap_new_xsd__time soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__time(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__time(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__time(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__time(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__time(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__time(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__time(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__time(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__time(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__time(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::string *);

#define soap_xsd__date2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__date soap_instantiate_std__string


#define soap_new_xsd__date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__date(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__retrieveMmktBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveMmktBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, struct __ns1__retrieveMmktBvalDealsUploadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, const struct __ns1__retrieveMmktBvalDealsUploadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, const char*, int, const struct __ns1__retrieveMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_in___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, const char*, struct __ns1__retrieveMmktBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveMmktBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveMmktBvalDealsUploadResponse * soap_new___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveMmktBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveMmktBvalDealsUploadResponse * soap_new_req___ns1__retrieveMmktBvalDealsUploadResponse(
	struct soap *soap)
{
	struct __ns1__retrieveMmktBvalDealsUploadResponse *_p = ::soap_new___ns1__retrieveMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveMmktBvalDealsUploadResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveMmktBvalDealsUploadResponse * soap_new_set___ns1__retrieveMmktBvalDealsUploadResponse(
	struct soap *soap,
	ns1__RetrieveMmktBvalDealsUploadRequest *ns1__retrieveMmktBvalDealsUploadRequest)
{
	struct __ns1__retrieveMmktBvalDealsUploadResponse *_p = ::soap_new___ns1__retrieveMmktBvalDealsUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveMmktBvalDealsUploadResponse(soap, _p);
		_p->ns1__retrieveMmktBvalDealsUploadRequest = ns1__retrieveMmktBvalDealsUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, const struct __ns1__retrieveMmktBvalDealsUploadResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveMmktBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveMmktBvalDealsUploadResponse(soap, p, "-ns1:retrieveMmktBvalDealsUploadResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveMmktBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveMmktBvalDealsUploadResponse(soap, p, "-ns1:retrieveMmktBvalDealsUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveMmktBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveMmktBvalDealsUploadResponse(soap, p, "-ns1:retrieveMmktBvalDealsUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveMmktBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveMmktBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveMmktBvalDealsUploadResponse(soap, p, "-ns1:retrieveMmktBvalDealsUploadResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveMmktBvalDealsUploadResponse * SOAP_FMAC4 soap_get___ns1__retrieveMmktBvalDealsUploadResponse(struct soap*, struct __ns1__retrieveMmktBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveMmktBvalDealsUploadResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveMmktBvalDealsUploadResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveMmktBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveMmktBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveMmktBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveMmktBvalDealsUploadResponse *p)
{
	if (::soap_read___ns1__retrieveMmktBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitMmktBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE___ns1__submitMmktBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitMmktBvalDealsUploadRequest(struct soap*, struct __ns1__submitMmktBvalDealsUploadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitMmktBvalDealsUploadRequest(struct soap*, const struct __ns1__submitMmktBvalDealsUploadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitMmktBvalDealsUploadRequest(struct soap*, const char*, int, const struct __ns1__submitMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_in___ns1__submitMmktBvalDealsUploadRequest(struct soap*, const char*, struct __ns1__submitMmktBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitMmktBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate___ns1__submitMmktBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitMmktBvalDealsUploadRequest * soap_new___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitMmktBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitMmktBvalDealsUploadRequest * soap_new_req___ns1__submitMmktBvalDealsUploadRequest(
	struct soap *soap)
{
	struct __ns1__submitMmktBvalDealsUploadRequest *_p = ::soap_new___ns1__submitMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitMmktBvalDealsUploadRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitMmktBvalDealsUploadRequest * soap_new_set___ns1__submitMmktBvalDealsUploadRequest(
	struct soap *soap,
	ns1__SubmitMmktBvalDealsUploadRequest *ns1__submitMmktBvalDealsUploadRequest)
{
	struct __ns1__submitMmktBvalDealsUploadRequest *_p = ::soap_new___ns1__submitMmktBvalDealsUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitMmktBvalDealsUploadRequest(soap, _p);
		_p->ns1__submitMmktBvalDealsUploadRequest = ns1__submitMmktBvalDealsUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitMmktBvalDealsUploadRequest(struct soap*, const struct __ns1__submitMmktBvalDealsUploadRequest *, const char*, const char*);

inline int soap_write___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitMmktBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitMmktBvalDealsUploadRequest(soap, p, "-ns1:submitMmktBvalDealsUploadRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitMmktBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitMmktBvalDealsUploadRequest(soap, p, "-ns1:submitMmktBvalDealsUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitMmktBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitMmktBvalDealsUploadRequest(soap, p, "-ns1:submitMmktBvalDealsUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitMmktBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitMmktBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitMmktBvalDealsUploadRequest(soap, p, "-ns1:submitMmktBvalDealsUploadRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitMmktBvalDealsUploadRequest * SOAP_FMAC4 soap_get___ns1__submitMmktBvalDealsUploadRequest(struct soap*, struct __ns1__submitMmktBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitMmktBvalDealsUploadRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitMmktBvalDealsUploadRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitMmktBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitMmktBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitMmktBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitMmktBvalDealsUploadRequest *p)
{
	if (::soap_read___ns1__submitMmktBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getFields_DEFINED
#define SOAP_TYPE___ns1__getFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getFields(struct soap*, struct __ns1__getFields *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getFields(struct soap*, const struct __ns1__getFields *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getFields(struct soap*, const char*, int, const struct __ns1__getFields *, const char*);
SOAP_FMAC3 struct __ns1__getFields * SOAP_FMAC4 soap_in___ns1__getFields(struct soap*, const char*, struct __ns1__getFields *, const char*);
SOAP_FMAC1 struct __ns1__getFields * SOAP_FMAC2 soap_instantiate___ns1__getFields(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getFields * soap_new___ns1__getFields(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getFields(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getFields * soap_new_req___ns1__getFields(
	struct soap *soap)
{
	struct __ns1__getFields *_p = ::soap_new___ns1__getFields(soap);
	if (_p)
	{	::soap_default___ns1__getFields(soap, _p);
	}
	return _p;
}

inline struct __ns1__getFields * soap_new_set___ns1__getFields(
	struct soap *soap,
	ns1__GetFieldsRequest *ns1__getFieldsRequest)
{
	struct __ns1__getFields *_p = ::soap_new___ns1__getFields(soap);
	if (_p)
	{	::soap_default___ns1__getFields(soap, _p);
		_p->ns1__getFieldsRequest = ns1__getFieldsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getFields(struct soap*, const struct __ns1__getFields *, const char*, const char*);

inline int soap_write___ns1__getFields(struct soap *soap, struct __ns1__getFields const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getFields(soap, p), 0) || ::soap_put___ns1__getFields(soap, p, "-ns1:getFields", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getFields(struct soap *soap, const char *URL, struct __ns1__getFields const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getFields(soap, p), 0) || ::soap_put___ns1__getFields(soap, p, "-ns1:getFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getFields(struct soap *soap, const char *URL, struct __ns1__getFields const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getFields(soap, p), 0) || ::soap_put___ns1__getFields(soap, p, "-ns1:getFields", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getFields(struct soap *soap, const char *URL, struct __ns1__getFields const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getFields(soap, p), 0) || ::soap_put___ns1__getFields(soap, p, "-ns1:getFields", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getFields * SOAP_FMAC4 soap_get___ns1__getFields(struct soap*, struct __ns1__getFields *, const char*, const char*);

inline int soap_read___ns1__getFields(struct soap *soap, struct __ns1__getFields *p)
{
	if (p)
	{	::soap_default___ns1__getFields(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getFields(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getFields(struct soap *soap, const char *URL, struct __ns1__getFields *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getFields(struct soap *soap, struct __ns1__getFields *p)
{
	if (::soap_read___ns1__getFields(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveOtcBvalDealsUploadResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveOtcBvalDealsUploadResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, struct __ns1__retrieveOtcBvalDealsUploadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, const struct __ns1__retrieveOtcBvalDealsUploadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, const char*, int, const struct __ns1__retrieveOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_in___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, const char*, struct __ns1__retrieveOtcBvalDealsUploadResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveOtcBvalDealsUploadResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveOtcBvalDealsUploadResponse * soap_new___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveOtcBvalDealsUploadResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveOtcBvalDealsUploadResponse * soap_new_req___ns1__retrieveOtcBvalDealsUploadResponse(
	struct soap *soap)
{
	struct __ns1__retrieveOtcBvalDealsUploadResponse *_p = ::soap_new___ns1__retrieveOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveOtcBvalDealsUploadResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveOtcBvalDealsUploadResponse * soap_new_set___ns1__retrieveOtcBvalDealsUploadResponse(
	struct soap *soap,
	ns1__RetrieveOtcBvalDealsUploadRequest *ns1__retrieveOtcBvalDealsUploadRequest)
{
	struct __ns1__retrieveOtcBvalDealsUploadResponse *_p = ::soap_new___ns1__retrieveOtcBvalDealsUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveOtcBvalDealsUploadResponse(soap, _p);
		_p->ns1__retrieveOtcBvalDealsUploadRequest = ns1__retrieveOtcBvalDealsUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, const struct __ns1__retrieveOtcBvalDealsUploadResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveOtcBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcBvalDealsUploadResponse(soap, p, "-ns1:retrieveOtcBvalDealsUploadResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcBvalDealsUploadResponse(soap, p, "-ns1:retrieveOtcBvalDealsUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcBvalDealsUploadResponse(soap, p, "-ns1:retrieveOtcBvalDealsUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcBvalDealsUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcBvalDealsUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcBvalDealsUploadResponse(soap, p, "-ns1:retrieveOtcBvalDealsUploadResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveOtcBvalDealsUploadResponse * SOAP_FMAC4 soap_get___ns1__retrieveOtcBvalDealsUploadResponse(struct soap*, struct __ns1__retrieveOtcBvalDealsUploadResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveOtcBvalDealsUploadResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveOtcBvalDealsUploadResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveOtcBvalDealsUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcBvalDealsUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveOtcBvalDealsUploadResponse(struct soap *soap, struct __ns1__retrieveOtcBvalDealsUploadResponse *p)
{
	if (::soap_read___ns1__retrieveOtcBvalDealsUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitOtcBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE___ns1__submitOtcBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitOtcBvalDealsUploadRequest(struct soap*, struct __ns1__submitOtcBvalDealsUploadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitOtcBvalDealsUploadRequest(struct soap*, const struct __ns1__submitOtcBvalDealsUploadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitOtcBvalDealsUploadRequest(struct soap*, const char*, int, const struct __ns1__submitOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_in___ns1__submitOtcBvalDealsUploadRequest(struct soap*, const char*, struct __ns1__submitOtcBvalDealsUploadRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitOtcBvalDealsUploadRequest * SOAP_FMAC2 soap_instantiate___ns1__submitOtcBvalDealsUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitOtcBvalDealsUploadRequest * soap_new___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitOtcBvalDealsUploadRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitOtcBvalDealsUploadRequest * soap_new_req___ns1__submitOtcBvalDealsUploadRequest(
	struct soap *soap)
{
	struct __ns1__submitOtcBvalDealsUploadRequest *_p = ::soap_new___ns1__submitOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitOtcBvalDealsUploadRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitOtcBvalDealsUploadRequest * soap_new_set___ns1__submitOtcBvalDealsUploadRequest(
	struct soap *soap,
	ns1__SubmitOtcBvalDealsUploadRequest *ns1__submitOtcBvalDealsUploadRequest)
{
	struct __ns1__submitOtcBvalDealsUploadRequest *_p = ::soap_new___ns1__submitOtcBvalDealsUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitOtcBvalDealsUploadRequest(soap, _p);
		_p->ns1__submitOtcBvalDealsUploadRequest = ns1__submitOtcBvalDealsUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitOtcBvalDealsUploadRequest(struct soap*, const struct __ns1__submitOtcBvalDealsUploadRequest *, const char*, const char*);

inline int soap_write___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitOtcBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcBvalDealsUploadRequest(soap, p, "-ns1:submitOtcBvalDealsUploadRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcBvalDealsUploadRequest(soap, p, "-ns1:submitOtcBvalDealsUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcBvalDealsUploadRequest(soap, p, "-ns1:submitOtcBvalDealsUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcBvalDealsUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcBvalDealsUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcBvalDealsUploadRequest(soap, p, "-ns1:submitOtcBvalDealsUploadRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitOtcBvalDealsUploadRequest * SOAP_FMAC4 soap_get___ns1__submitOtcBvalDealsUploadRequest(struct soap*, struct __ns1__submitOtcBvalDealsUploadRequest *, const char*, const char*);

inline int soap_read___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitOtcBvalDealsUploadRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitOtcBvalDealsUploadRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitOtcBvalDealsUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcBvalDealsUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitOtcBvalDealsUploadRequest(struct soap *soap, struct __ns1__submitOtcBvalDealsUploadRequest *p)
{
	if (::soap_read___ns1__submitOtcBvalDealsUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveOtcbvalUploadResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveOtcbvalUploadResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveOtcbvalUploadResponse(struct soap*, struct __ns1__retrieveOtcbvalUploadResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveOtcbvalUploadResponse(struct soap*, const struct __ns1__retrieveOtcbvalUploadResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveOtcbvalUploadResponse(struct soap*, const char*, int, const struct __ns1__retrieveOtcbvalUploadResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveOtcbvalUploadResponse * SOAP_FMAC4 soap_in___ns1__retrieveOtcbvalUploadResponse(struct soap*, const char*, struct __ns1__retrieveOtcbvalUploadResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveOtcbvalUploadResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveOtcbvalUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveOtcbvalUploadResponse * soap_new___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveOtcbvalUploadResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveOtcbvalUploadResponse * soap_new_req___ns1__retrieveOtcbvalUploadResponse(
	struct soap *soap)
{
	struct __ns1__retrieveOtcbvalUploadResponse *_p = ::soap_new___ns1__retrieveOtcbvalUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveOtcbvalUploadResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveOtcbvalUploadResponse * soap_new_set___ns1__retrieveOtcbvalUploadResponse(
	struct soap *soap,
	ns1__RetrieveOtcbvalUploadRequest *ns1__retrieveOtcbvalUploadRequest)
{
	struct __ns1__retrieveOtcbvalUploadResponse *_p = ::soap_new___ns1__retrieveOtcbvalUploadResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveOtcbvalUploadResponse(soap, _p);
		_p->ns1__retrieveOtcbvalUploadRequest = ns1__retrieveOtcbvalUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveOtcbvalUploadResponse(struct soap*, const struct __ns1__retrieveOtcbvalUploadResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, struct __ns1__retrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveOtcbvalUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcbvalUploadResponse(soap, p, "-ns1:retrieveOtcbvalUploadResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcbvalUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcbvalUploadResponse(soap, p, "-ns1:retrieveOtcbvalUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcbvalUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcbvalUploadResponse(soap, p, "-ns1:retrieveOtcbvalUploadResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcbvalUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveOtcbvalUploadResponse(soap, p), 0) || ::soap_put___ns1__retrieveOtcbvalUploadResponse(soap, p, "-ns1:retrieveOtcbvalUploadResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveOtcbvalUploadResponse * SOAP_FMAC4 soap_get___ns1__retrieveOtcbvalUploadResponse(struct soap*, struct __ns1__retrieveOtcbvalUploadResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, struct __ns1__retrieveOtcbvalUploadResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveOtcbvalUploadResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveOtcbvalUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, const char *URL, struct __ns1__retrieveOtcbvalUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveOtcbvalUploadResponse(struct soap *soap, struct __ns1__retrieveOtcbvalUploadResponse *p)
{
	if (::soap_read___ns1__retrieveOtcbvalUploadResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitOtcbvalUploadRequest_DEFINED
#define SOAP_TYPE___ns1__submitOtcbvalUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitOtcbvalUploadRequest(struct soap*, struct __ns1__submitOtcbvalUploadRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitOtcbvalUploadRequest(struct soap*, const struct __ns1__submitOtcbvalUploadRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitOtcbvalUploadRequest(struct soap*, const char*, int, const struct __ns1__submitOtcbvalUploadRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitOtcbvalUploadRequest * SOAP_FMAC4 soap_in___ns1__submitOtcbvalUploadRequest(struct soap*, const char*, struct __ns1__submitOtcbvalUploadRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitOtcbvalUploadRequest * SOAP_FMAC2 soap_instantiate___ns1__submitOtcbvalUploadRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitOtcbvalUploadRequest * soap_new___ns1__submitOtcbvalUploadRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitOtcbvalUploadRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitOtcbvalUploadRequest * soap_new_req___ns1__submitOtcbvalUploadRequest(
	struct soap *soap)
{
	struct __ns1__submitOtcbvalUploadRequest *_p = ::soap_new___ns1__submitOtcbvalUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitOtcbvalUploadRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitOtcbvalUploadRequest * soap_new_set___ns1__submitOtcbvalUploadRequest(
	struct soap *soap,
	ns1__SubmitOtcbvalUploadRequest *ns1__submitOtcbvalUploadRequest)
{
	struct __ns1__submitOtcbvalUploadRequest *_p = ::soap_new___ns1__submitOtcbvalUploadRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitOtcbvalUploadRequest(soap, _p);
		_p->ns1__submitOtcbvalUploadRequest = ns1__submitOtcbvalUploadRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitOtcbvalUploadRequest(struct soap*, const struct __ns1__submitOtcbvalUploadRequest *, const char*, const char*);

inline int soap_write___ns1__submitOtcbvalUploadRequest(struct soap *soap, struct __ns1__submitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitOtcbvalUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcbvalUploadRequest(soap, p, "-ns1:submitOtcbvalUploadRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitOtcbvalUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcbvalUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcbvalUploadRequest(soap, p, "-ns1:submitOtcbvalUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitOtcbvalUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcbvalUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcbvalUploadRequest(soap, p, "-ns1:submitOtcbvalUploadRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitOtcbvalUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcbvalUploadRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitOtcbvalUploadRequest(soap, p), 0) || ::soap_put___ns1__submitOtcbvalUploadRequest(soap, p, "-ns1:submitOtcbvalUploadRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitOtcbvalUploadRequest * SOAP_FMAC4 soap_get___ns1__submitOtcbvalUploadRequest(struct soap*, struct __ns1__submitOtcbvalUploadRequest *, const char*, const char*);

inline int soap_read___ns1__submitOtcbvalUploadRequest(struct soap *soap, struct __ns1__submitOtcbvalUploadRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitOtcbvalUploadRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitOtcbvalUploadRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitOtcbvalUploadRequest(struct soap *soap, const char *URL, struct __ns1__submitOtcbvalUploadRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitOtcbvalUploadRequest(struct soap *soap, struct __ns1__submitOtcbvalUploadRequest *p)
{
	if (::soap_read___ns1__submitOtcbvalUploadRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetAllQuotesResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetAllQuotesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetAllQuotesResponse(struct soap*, struct __ns1__retrieveGetAllQuotesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetAllQuotesResponse(struct soap*, const struct __ns1__retrieveGetAllQuotesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetAllQuotesResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetAllQuotesResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetAllQuotesResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetAllQuotesResponse(struct soap*, const char*, struct __ns1__retrieveGetAllQuotesResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetAllQuotesResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetAllQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetAllQuotesResponse * soap_new___ns1__retrieveGetAllQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetAllQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetAllQuotesResponse * soap_new_req___ns1__retrieveGetAllQuotesResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetAllQuotesResponse *_p = ::soap_new___ns1__retrieveGetAllQuotesResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetAllQuotesResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetAllQuotesResponse * soap_new_set___ns1__retrieveGetAllQuotesResponse(
	struct soap *soap,
	ns1__RetrieveGetAllQuotesRequest *ns1__retrieveGetAllQuotesRequest)
{
	struct __ns1__retrieveGetAllQuotesResponse *_p = ::soap_new___ns1__retrieveGetAllQuotesResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetAllQuotesResponse(soap, _p);
		_p->ns1__retrieveGetAllQuotesRequest = ns1__retrieveGetAllQuotesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetAllQuotesResponse(struct soap*, const struct __ns1__retrieveGetAllQuotesResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetAllQuotesResponse(struct soap *soap, struct __ns1__retrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetAllQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetAllQuotesResponse(soap, p, "-ns1:retrieveGetAllQuotesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetAllQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetAllQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetAllQuotesResponse(soap, p, "-ns1:retrieveGetAllQuotesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetAllQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetAllQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetAllQuotesResponse(soap, p, "-ns1:retrieveGetAllQuotesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetAllQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetAllQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetAllQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetAllQuotesResponse(soap, p, "-ns1:retrieveGetAllQuotesResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetAllQuotesResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetAllQuotesResponse(struct soap*, struct __ns1__retrieveGetAllQuotesResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetAllQuotesResponse(struct soap *soap, struct __ns1__retrieveGetAllQuotesResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetAllQuotesResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetAllQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetAllQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetAllQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetAllQuotesResponse(struct soap *soap, struct __ns1__retrieveGetAllQuotesResponse *p)
{
	if (::soap_read___ns1__retrieveGetAllQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetAllQuotesRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetAllQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetAllQuotesRequest(struct soap*, struct __ns1__submitGetAllQuotesRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetAllQuotesRequest(struct soap*, const struct __ns1__submitGetAllQuotesRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetAllQuotesRequest(struct soap*, const char*, int, const struct __ns1__submitGetAllQuotesRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetAllQuotesRequest * SOAP_FMAC4 soap_in___ns1__submitGetAllQuotesRequest(struct soap*, const char*, struct __ns1__submitGetAllQuotesRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetAllQuotesRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetAllQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetAllQuotesRequest * soap_new___ns1__submitGetAllQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetAllQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetAllQuotesRequest * soap_new_req___ns1__submitGetAllQuotesRequest(
	struct soap *soap)
{
	struct __ns1__submitGetAllQuotesRequest *_p = ::soap_new___ns1__submitGetAllQuotesRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetAllQuotesRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetAllQuotesRequest * soap_new_set___ns1__submitGetAllQuotesRequest(
	struct soap *soap,
	ns1__SubmitGetAllQuotesRequest *ns1__submitGetAllQuotesRequest)
{
	struct __ns1__submitGetAllQuotesRequest *_p = ::soap_new___ns1__submitGetAllQuotesRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetAllQuotesRequest(soap, _p);
		_p->ns1__submitGetAllQuotesRequest = ns1__submitGetAllQuotesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetAllQuotesRequest(struct soap*, const struct __ns1__submitGetAllQuotesRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetAllQuotesRequest(struct soap *soap, struct __ns1__submitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetAllQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetAllQuotesRequest(soap, p, "-ns1:submitGetAllQuotesRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetAllQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetAllQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetAllQuotesRequest(soap, p, "-ns1:submitGetAllQuotesRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetAllQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetAllQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetAllQuotesRequest(soap, p, "-ns1:submitGetAllQuotesRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetAllQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetAllQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetAllQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetAllQuotesRequest(soap, p, "-ns1:submitGetAllQuotesRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetAllQuotesRequest * SOAP_FMAC4 soap_get___ns1__submitGetAllQuotesRequest(struct soap*, struct __ns1__submitGetAllQuotesRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetAllQuotesRequest(struct soap *soap, struct __ns1__submitGetAllQuotesRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetAllQuotesRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetAllQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetAllQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetAllQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetAllQuotesRequest(struct soap *soap, struct __ns1__submitGetAllQuotesRequest *p)
{
	if (::soap_read___ns1__submitGetAllQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetQuotesResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetQuotesResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetQuotesResponse(struct soap*, struct __ns1__retrieveGetQuotesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetQuotesResponse(struct soap*, const struct __ns1__retrieveGetQuotesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetQuotesResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetQuotesResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetQuotesResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetQuotesResponse(struct soap*, const char*, struct __ns1__retrieveGetQuotesResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetQuotesResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetQuotesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetQuotesResponse * soap_new___ns1__retrieveGetQuotesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetQuotesResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetQuotesResponse * soap_new_req___ns1__retrieveGetQuotesResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetQuotesResponse *_p = ::soap_new___ns1__retrieveGetQuotesResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetQuotesResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetQuotesResponse * soap_new_set___ns1__retrieveGetQuotesResponse(
	struct soap *soap,
	ns1__RetrieveGetQuotesRequest *ns1__retrieveGetQuotesRequest)
{
	struct __ns1__retrieveGetQuotesResponse *_p = ::soap_new___ns1__retrieveGetQuotesResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetQuotesResponse(soap, _p);
		_p->ns1__retrieveGetQuotesRequest = ns1__retrieveGetQuotesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetQuotesResponse(struct soap*, const struct __ns1__retrieveGetQuotesResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetQuotesResponse(struct soap *soap, struct __ns1__retrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetQuotesResponse(soap, p, "-ns1:retrieveGetQuotesResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetQuotesResponse(soap, p, "-ns1:retrieveGetQuotesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetQuotesResponse(soap, p, "-ns1:retrieveGetQuotesResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetQuotesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetQuotesResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetQuotesResponse(soap, p, "-ns1:retrieveGetQuotesResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetQuotesResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetQuotesResponse(struct soap*, struct __ns1__retrieveGetQuotesResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetQuotesResponse(struct soap *soap, struct __ns1__retrieveGetQuotesResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetQuotesResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetQuotesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetQuotesResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetQuotesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetQuotesResponse(struct soap *soap, struct __ns1__retrieveGetQuotesResponse *p)
{
	if (::soap_read___ns1__retrieveGetQuotesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetQuotesRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetQuotesRequest(struct soap*, struct __ns1__submitGetQuotesRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetQuotesRequest(struct soap*, const struct __ns1__submitGetQuotesRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetQuotesRequest(struct soap*, const char*, int, const struct __ns1__submitGetQuotesRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetQuotesRequest * SOAP_FMAC4 soap_in___ns1__submitGetQuotesRequest(struct soap*, const char*, struct __ns1__submitGetQuotesRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetQuotesRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetQuotesRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetQuotesRequest * soap_new___ns1__submitGetQuotesRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetQuotesRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetQuotesRequest * soap_new_req___ns1__submitGetQuotesRequest(
	struct soap *soap)
{
	struct __ns1__submitGetQuotesRequest *_p = ::soap_new___ns1__submitGetQuotesRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetQuotesRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetQuotesRequest * soap_new_set___ns1__submitGetQuotesRequest(
	struct soap *soap,
	ns1__SubmitGetQuotesRequest *ns1__submitGetQuotesRequest)
{
	struct __ns1__submitGetQuotesRequest *_p = ::soap_new___ns1__submitGetQuotesRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetQuotesRequest(soap, _p);
		_p->ns1__submitGetQuotesRequest = ns1__submitGetQuotesRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetQuotesRequest(struct soap*, const struct __ns1__submitGetQuotesRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetQuotesRequest(struct soap *soap, struct __ns1__submitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetQuotesRequest(soap, p, "-ns1:submitGetQuotesRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetQuotesRequest(soap, p, "-ns1:submitGetQuotesRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetQuotesRequest(soap, p, "-ns1:submitGetQuotesRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetQuotesRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetQuotesRequest(soap, p), 0) || ::soap_put___ns1__submitGetQuotesRequest(soap, p, "-ns1:submitGetQuotesRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetQuotesRequest * SOAP_FMAC4 soap_get___ns1__submitGetQuotesRequest(struct soap*, struct __ns1__submitGetQuotesRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetQuotesRequest(struct soap *soap, struct __ns1__submitGetQuotesRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetQuotesRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetQuotesRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetQuotesRequest(struct soap *soap, const char *URL, struct __ns1__submitGetQuotesRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetQuotesRequest(struct soap *soap, struct __ns1__submitGetQuotesRequest *p)
{
	if (::soap_read___ns1__submitGetQuotesRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getPortfolioValidation_DEFINED
#define SOAP_TYPE___ns1__getPortfolioValidation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPortfolioValidation(struct soap*, struct __ns1__getPortfolioValidation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPortfolioValidation(struct soap*, const struct __ns1__getPortfolioValidation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPortfolioValidation(struct soap*, const char*, int, const struct __ns1__getPortfolioValidation *, const char*);
SOAP_FMAC3 struct __ns1__getPortfolioValidation * SOAP_FMAC4 soap_in___ns1__getPortfolioValidation(struct soap*, const char*, struct __ns1__getPortfolioValidation *, const char*);
SOAP_FMAC1 struct __ns1__getPortfolioValidation * SOAP_FMAC2 soap_instantiate___ns1__getPortfolioValidation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getPortfolioValidation * soap_new___ns1__getPortfolioValidation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getPortfolioValidation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getPortfolioValidation * soap_new_req___ns1__getPortfolioValidation(
	struct soap *soap)
{
	struct __ns1__getPortfolioValidation *_p = ::soap_new___ns1__getPortfolioValidation(soap);
	if (_p)
	{	::soap_default___ns1__getPortfolioValidation(soap, _p);
	}
	return _p;
}

inline struct __ns1__getPortfolioValidation * soap_new_set___ns1__getPortfolioValidation(
	struct soap *soap,
	ns1__GetPortfolioValidationRequest *ns1__getPortfolioValidationRequest)
{
	struct __ns1__getPortfolioValidation *_p = ::soap_new___ns1__getPortfolioValidation(soap);
	if (_p)
	{	::soap_default___ns1__getPortfolioValidation(soap, _p);
		_p->ns1__getPortfolioValidationRequest = ns1__getPortfolioValidationRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPortfolioValidation(struct soap*, const struct __ns1__getPortfolioValidation *, const char*, const char*);

inline int soap_write___ns1__getPortfolioValidation(struct soap *soap, struct __ns1__getPortfolioValidation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getPortfolioValidation(soap, p), 0) || ::soap_put___ns1__getPortfolioValidation(soap, p, "-ns1:getPortfolioValidation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getPortfolioValidation(struct soap *soap, const char *URL, struct __ns1__getPortfolioValidation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getPortfolioValidation(soap, p), 0) || ::soap_put___ns1__getPortfolioValidation(soap, p, "-ns1:getPortfolioValidation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getPortfolioValidation(struct soap *soap, const char *URL, struct __ns1__getPortfolioValidation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getPortfolioValidation(soap, p), 0) || ::soap_put___ns1__getPortfolioValidation(soap, p, "-ns1:getPortfolioValidation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getPortfolioValidation(struct soap *soap, const char *URL, struct __ns1__getPortfolioValidation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getPortfolioValidation(soap, p), 0) || ::soap_put___ns1__getPortfolioValidation(soap, p, "-ns1:getPortfolioValidation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getPortfolioValidation * SOAP_FMAC4 soap_get___ns1__getPortfolioValidation(struct soap*, struct __ns1__getPortfolioValidation *, const char*, const char*);

inline int soap_read___ns1__getPortfolioValidation(struct soap *soap, struct __ns1__getPortfolioValidation *p)
{
	if (p)
	{	::soap_default___ns1__getPortfolioValidation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getPortfolioValidation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getPortfolioValidation(struct soap *soap, const char *URL, struct __ns1__getPortfolioValidation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getPortfolioValidation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getPortfolioValidation(struct soap *soap, struct __ns1__getPortfolioValidation *p)
{
	if (::soap_read___ns1__getPortfolioValidation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetActionsResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetActionsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetActionsResponse(struct soap*, struct __ns1__retrieveGetActionsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetActionsResponse(struct soap*, const struct __ns1__retrieveGetActionsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetActionsResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetActionsResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetActionsResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetActionsResponse(struct soap*, const char*, struct __ns1__retrieveGetActionsResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetActionsResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetActionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetActionsResponse * soap_new___ns1__retrieveGetActionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetActionsResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetActionsResponse * soap_new_req___ns1__retrieveGetActionsResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetActionsResponse *_p = ::soap_new___ns1__retrieveGetActionsResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetActionsResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetActionsResponse * soap_new_set___ns1__retrieveGetActionsResponse(
	struct soap *soap,
	ns1__RetrieveGetActionsRequest *ns1__retrieveGetActionsRequest)
{
	struct __ns1__retrieveGetActionsResponse *_p = ::soap_new___ns1__retrieveGetActionsResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetActionsResponse(soap, _p);
		_p->ns1__retrieveGetActionsRequest = ns1__retrieveGetActionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetActionsResponse(struct soap*, const struct __ns1__retrieveGetActionsResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetActionsResponse(struct soap *soap, struct __ns1__retrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetActionsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetActionsResponse(soap, p, "-ns1:retrieveGetActionsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetActionsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetActionsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetActionsResponse(soap, p, "-ns1:retrieveGetActionsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetActionsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetActionsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetActionsResponse(soap, p, "-ns1:retrieveGetActionsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetActionsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetActionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetActionsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetActionsResponse(soap, p, "-ns1:retrieveGetActionsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetActionsResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetActionsResponse(struct soap*, struct __ns1__retrieveGetActionsResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetActionsResponse(struct soap *soap, struct __ns1__retrieveGetActionsResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetActionsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetActionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetActionsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetActionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetActionsResponse(struct soap *soap, struct __ns1__retrieveGetActionsResponse *p)
{
	if (::soap_read___ns1__retrieveGetActionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetActionsRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetActionsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetActionsRequest(struct soap*, struct __ns1__submitGetActionsRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetActionsRequest(struct soap*, const struct __ns1__submitGetActionsRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetActionsRequest(struct soap*, const char*, int, const struct __ns1__submitGetActionsRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetActionsRequest * SOAP_FMAC4 soap_in___ns1__submitGetActionsRequest(struct soap*, const char*, struct __ns1__submitGetActionsRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetActionsRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetActionsRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetActionsRequest * soap_new___ns1__submitGetActionsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetActionsRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetActionsRequest * soap_new_req___ns1__submitGetActionsRequest(
	struct soap *soap)
{
	struct __ns1__submitGetActionsRequest *_p = ::soap_new___ns1__submitGetActionsRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetActionsRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetActionsRequest * soap_new_set___ns1__submitGetActionsRequest(
	struct soap *soap,
	ns1__SubmitGetActionsRequest *ns1__submitGetActionsRequest)
{
	struct __ns1__submitGetActionsRequest *_p = ::soap_new___ns1__submitGetActionsRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetActionsRequest(soap, _p);
		_p->ns1__submitGetActionsRequest = ns1__submitGetActionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetActionsRequest(struct soap*, const struct __ns1__submitGetActionsRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetActionsRequest(struct soap *soap, struct __ns1__submitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetActionsRequest(soap, p), 0) || ::soap_put___ns1__submitGetActionsRequest(soap, p, "-ns1:submitGetActionsRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetActionsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetActionsRequest(soap, p), 0) || ::soap_put___ns1__submitGetActionsRequest(soap, p, "-ns1:submitGetActionsRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetActionsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetActionsRequest(soap, p), 0) || ::soap_put___ns1__submitGetActionsRequest(soap, p, "-ns1:submitGetActionsRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetActionsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetActionsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetActionsRequest(soap, p), 0) || ::soap_put___ns1__submitGetActionsRequest(soap, p, "-ns1:submitGetActionsRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetActionsRequest * SOAP_FMAC4 soap_get___ns1__submitGetActionsRequest(struct soap*, struct __ns1__submitGetActionsRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetActionsRequest(struct soap *soap, struct __ns1__submitGetActionsRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetActionsRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetActionsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetActionsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetActionsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetActionsRequest(struct soap *soap, struct __ns1__submitGetActionsRequest *p)
{
	if (::soap_read___ns1__submitGetActionsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetCompanyResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetCompanyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetCompanyResponse(struct soap*, struct __ns1__retrieveGetCompanyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetCompanyResponse(struct soap*, const struct __ns1__retrieveGetCompanyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetCompanyResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetCompanyResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetCompanyResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetCompanyResponse(struct soap*, const char*, struct __ns1__retrieveGetCompanyResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetCompanyResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetCompanyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetCompanyResponse * soap_new___ns1__retrieveGetCompanyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetCompanyResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetCompanyResponse * soap_new_req___ns1__retrieveGetCompanyResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetCompanyResponse *_p = ::soap_new___ns1__retrieveGetCompanyResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetCompanyResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetCompanyResponse * soap_new_set___ns1__retrieveGetCompanyResponse(
	struct soap *soap,
	ns1__RetrieveGetCompanyRequest *ns1__retrieveGetCompanyRequest)
{
	struct __ns1__retrieveGetCompanyResponse *_p = ::soap_new___ns1__retrieveGetCompanyResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetCompanyResponse(soap, _p);
		_p->ns1__retrieveGetCompanyRequest = ns1__retrieveGetCompanyRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetCompanyResponse(struct soap*, const struct __ns1__retrieveGetCompanyResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetCompanyResponse(struct soap *soap, struct __ns1__retrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetCompanyResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetCompanyResponse(soap, p, "-ns1:retrieveGetCompanyResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetCompanyResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetCompanyResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetCompanyResponse(soap, p, "-ns1:retrieveGetCompanyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetCompanyResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetCompanyResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetCompanyResponse(soap, p, "-ns1:retrieveGetCompanyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetCompanyResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetCompanyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetCompanyResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetCompanyResponse(soap, p, "-ns1:retrieveGetCompanyResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetCompanyResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetCompanyResponse(struct soap*, struct __ns1__retrieveGetCompanyResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetCompanyResponse(struct soap *soap, struct __ns1__retrieveGetCompanyResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetCompanyResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetCompanyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetCompanyResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetCompanyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetCompanyResponse(struct soap *soap, struct __ns1__retrieveGetCompanyResponse *p)
{
	if (::soap_read___ns1__retrieveGetCompanyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetCompanyRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetCompanyRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetCompanyRequest(struct soap*, struct __ns1__submitGetCompanyRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetCompanyRequest(struct soap*, const struct __ns1__submitGetCompanyRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetCompanyRequest(struct soap*, const char*, int, const struct __ns1__submitGetCompanyRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetCompanyRequest * SOAP_FMAC4 soap_in___ns1__submitGetCompanyRequest(struct soap*, const char*, struct __ns1__submitGetCompanyRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetCompanyRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetCompanyRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetCompanyRequest * soap_new___ns1__submitGetCompanyRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetCompanyRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetCompanyRequest * soap_new_req___ns1__submitGetCompanyRequest(
	struct soap *soap)
{
	struct __ns1__submitGetCompanyRequest *_p = ::soap_new___ns1__submitGetCompanyRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetCompanyRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetCompanyRequest * soap_new_set___ns1__submitGetCompanyRequest(
	struct soap *soap,
	ns1__SubmitGetCompanyRequest *ns1__submitGetCompanyRequest)
{
	struct __ns1__submitGetCompanyRequest *_p = ::soap_new___ns1__submitGetCompanyRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetCompanyRequest(soap, _p);
		_p->ns1__submitGetCompanyRequest = ns1__submitGetCompanyRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetCompanyRequest(struct soap*, const struct __ns1__submitGetCompanyRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetCompanyRequest(struct soap *soap, struct __ns1__submitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetCompanyRequest(soap, p), 0) || ::soap_put___ns1__submitGetCompanyRequest(soap, p, "-ns1:submitGetCompanyRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetCompanyRequest(struct soap *soap, const char *URL, struct __ns1__submitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetCompanyRequest(soap, p), 0) || ::soap_put___ns1__submitGetCompanyRequest(soap, p, "-ns1:submitGetCompanyRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetCompanyRequest(struct soap *soap, const char *URL, struct __ns1__submitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetCompanyRequest(soap, p), 0) || ::soap_put___ns1__submitGetCompanyRequest(soap, p, "-ns1:submitGetCompanyRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetCompanyRequest(struct soap *soap, const char *URL, struct __ns1__submitGetCompanyRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetCompanyRequest(soap, p), 0) || ::soap_put___ns1__submitGetCompanyRequest(soap, p, "-ns1:submitGetCompanyRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetCompanyRequest * SOAP_FMAC4 soap_get___ns1__submitGetCompanyRequest(struct soap*, struct __ns1__submitGetCompanyRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetCompanyRequest(struct soap *soap, struct __ns1__submitGetCompanyRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetCompanyRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetCompanyRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetCompanyRequest(struct soap *soap, const char *URL, struct __ns1__submitGetCompanyRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetCompanyRequest(struct soap *soap, struct __ns1__submitGetCompanyRequest *p)
{
	if (::soap_read___ns1__submitGetCompanyRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetFundamentalsResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetFundamentalsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetFundamentalsResponse(struct soap*, struct __ns1__retrieveGetFundamentalsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetFundamentalsResponse(struct soap*, const struct __ns1__retrieveGetFundamentalsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetFundamentalsResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetFundamentalsResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetFundamentalsResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetFundamentalsResponse(struct soap*, const char*, struct __ns1__retrieveGetFundamentalsResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetFundamentalsResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetFundamentalsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetFundamentalsResponse * soap_new___ns1__retrieveGetFundamentalsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetFundamentalsResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetFundamentalsResponse * soap_new_req___ns1__retrieveGetFundamentalsResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetFundamentalsResponse *_p = ::soap_new___ns1__retrieveGetFundamentalsResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetFundamentalsResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetFundamentalsResponse * soap_new_set___ns1__retrieveGetFundamentalsResponse(
	struct soap *soap,
	ns1__RetrieveGetFundamentalsRequest *ns1__retrieveGetFundamentalsRequest)
{
	struct __ns1__retrieveGetFundamentalsResponse *_p = ::soap_new___ns1__retrieveGetFundamentalsResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetFundamentalsResponse(soap, _p);
		_p->ns1__retrieveGetFundamentalsRequest = ns1__retrieveGetFundamentalsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetFundamentalsResponse(struct soap*, const struct __ns1__retrieveGetFundamentalsResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetFundamentalsResponse(struct soap *soap, struct __ns1__retrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetFundamentalsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetFundamentalsResponse(soap, p, "-ns1:retrieveGetFundamentalsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetFundamentalsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetFundamentalsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetFundamentalsResponse(soap, p, "-ns1:retrieveGetFundamentalsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetFundamentalsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetFundamentalsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetFundamentalsResponse(soap, p, "-ns1:retrieveGetFundamentalsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetFundamentalsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetFundamentalsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetFundamentalsResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetFundamentalsResponse(soap, p, "-ns1:retrieveGetFundamentalsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetFundamentalsResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetFundamentalsResponse(struct soap*, struct __ns1__retrieveGetFundamentalsResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetFundamentalsResponse(struct soap *soap, struct __ns1__retrieveGetFundamentalsResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetFundamentalsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetFundamentalsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetFundamentalsResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetFundamentalsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetFundamentalsResponse(struct soap *soap, struct __ns1__retrieveGetFundamentalsResponse *p)
{
	if (::soap_read___ns1__retrieveGetFundamentalsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetFundamentalsRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetFundamentalsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetFundamentalsRequest(struct soap*, struct __ns1__submitGetFundamentalsRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetFundamentalsRequest(struct soap*, const struct __ns1__submitGetFundamentalsRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetFundamentalsRequest(struct soap*, const char*, int, const struct __ns1__submitGetFundamentalsRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetFundamentalsRequest * SOAP_FMAC4 soap_in___ns1__submitGetFundamentalsRequest(struct soap*, const char*, struct __ns1__submitGetFundamentalsRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetFundamentalsRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetFundamentalsRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetFundamentalsRequest * soap_new___ns1__submitGetFundamentalsRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetFundamentalsRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetFundamentalsRequest * soap_new_req___ns1__submitGetFundamentalsRequest(
	struct soap *soap)
{
	struct __ns1__submitGetFundamentalsRequest *_p = ::soap_new___ns1__submitGetFundamentalsRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetFundamentalsRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetFundamentalsRequest * soap_new_set___ns1__submitGetFundamentalsRequest(
	struct soap *soap,
	ns1__SubmitGetFundamentalsRequest *ns1__submitGetFundamentalsRequest)
{
	struct __ns1__submitGetFundamentalsRequest *_p = ::soap_new___ns1__submitGetFundamentalsRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetFundamentalsRequest(soap, _p);
		_p->ns1__submitGetFundamentalsRequest = ns1__submitGetFundamentalsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetFundamentalsRequest(struct soap*, const struct __ns1__submitGetFundamentalsRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetFundamentalsRequest(struct soap *soap, struct __ns1__submitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetFundamentalsRequest(soap, p), 0) || ::soap_put___ns1__submitGetFundamentalsRequest(soap, p, "-ns1:submitGetFundamentalsRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetFundamentalsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetFundamentalsRequest(soap, p), 0) || ::soap_put___ns1__submitGetFundamentalsRequest(soap, p, "-ns1:submitGetFundamentalsRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetFundamentalsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetFundamentalsRequest(soap, p), 0) || ::soap_put___ns1__submitGetFundamentalsRequest(soap, p, "-ns1:submitGetFundamentalsRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetFundamentalsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetFundamentalsRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetFundamentalsRequest(soap, p), 0) || ::soap_put___ns1__submitGetFundamentalsRequest(soap, p, "-ns1:submitGetFundamentalsRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetFundamentalsRequest * SOAP_FMAC4 soap_get___ns1__submitGetFundamentalsRequest(struct soap*, struct __ns1__submitGetFundamentalsRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetFundamentalsRequest(struct soap *soap, struct __ns1__submitGetFundamentalsRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetFundamentalsRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetFundamentalsRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetFundamentalsRequest(struct soap *soap, const char *URL, struct __ns1__submitGetFundamentalsRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetFundamentalsRequest(struct soap *soap, struct __ns1__submitGetFundamentalsRequest *p)
{
	if (::soap_read___ns1__submitGetFundamentalsRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__getCorrections_DEFINED
#define SOAP_TYPE___ns1__getCorrections_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getCorrections(struct soap*, struct __ns1__getCorrections *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getCorrections(struct soap*, const struct __ns1__getCorrections *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getCorrections(struct soap*, const char*, int, const struct __ns1__getCorrections *, const char*);
SOAP_FMAC3 struct __ns1__getCorrections * SOAP_FMAC4 soap_in___ns1__getCorrections(struct soap*, const char*, struct __ns1__getCorrections *, const char*);
SOAP_FMAC1 struct __ns1__getCorrections * SOAP_FMAC2 soap_instantiate___ns1__getCorrections(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getCorrections * soap_new___ns1__getCorrections(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getCorrections(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getCorrections * soap_new_req___ns1__getCorrections(
	struct soap *soap)
{
	struct __ns1__getCorrections *_p = ::soap_new___ns1__getCorrections(soap);
	if (_p)
	{	::soap_default___ns1__getCorrections(soap, _p);
	}
	return _p;
}

inline struct __ns1__getCorrections * soap_new_set___ns1__getCorrections(
	struct soap *soap,
	ns1__GetCorrectionsRequest *ns1__getCorrectionsRequest)
{
	struct __ns1__getCorrections *_p = ::soap_new___ns1__getCorrections(soap);
	if (_p)
	{	::soap_default___ns1__getCorrections(soap, _p);
		_p->ns1__getCorrectionsRequest = ns1__getCorrectionsRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getCorrections(struct soap*, const struct __ns1__getCorrections *, const char*, const char*);

inline int soap_write___ns1__getCorrections(struct soap *soap, struct __ns1__getCorrections const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getCorrections(soap, p), 0) || ::soap_put___ns1__getCorrections(soap, p, "-ns1:getCorrections", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getCorrections(struct soap *soap, const char *URL, struct __ns1__getCorrections const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCorrections(soap, p), 0) || ::soap_put___ns1__getCorrections(soap, p, "-ns1:getCorrections", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__getCorrections(struct soap *soap, const char *URL, struct __ns1__getCorrections const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCorrections(soap, p), 0) || ::soap_put___ns1__getCorrections(soap, p, "-ns1:getCorrections", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getCorrections(struct soap *soap, const char *URL, struct __ns1__getCorrections const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getCorrections(soap, p), 0) || ::soap_put___ns1__getCorrections(soap, p, "-ns1:getCorrections", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getCorrections * SOAP_FMAC4 soap_get___ns1__getCorrections(struct soap*, struct __ns1__getCorrections *, const char*, const char*);

inline int soap_read___ns1__getCorrections(struct soap *soap, struct __ns1__getCorrections *p)
{
	if (p)
	{	::soap_default___ns1__getCorrections(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getCorrections(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getCorrections(struct soap *soap, const char *URL, struct __ns1__getCorrections *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getCorrections(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__getCorrections(struct soap *soap, struct __ns1__getCorrections *p)
{
	if (::soap_read___ns1__getCorrections(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveCancelResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveCancelResponse(struct soap*, struct __ns1__retrieveCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveCancelResponse(struct soap*, const struct __ns1__retrieveCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveCancelResponse(struct soap*, const char*, int, const struct __ns1__retrieveCancelResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveCancelResponse * SOAP_FMAC4 soap_in___ns1__retrieveCancelResponse(struct soap*, const char*, struct __ns1__retrieveCancelResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveCancelResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveCancelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveCancelResponse * soap_new___ns1__retrieveCancelResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveCancelResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveCancelResponse * soap_new_req___ns1__retrieveCancelResponse(
	struct soap *soap)
{
	struct __ns1__retrieveCancelResponse *_p = ::soap_new___ns1__retrieveCancelResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveCancelResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveCancelResponse * soap_new_set___ns1__retrieveCancelResponse(
	struct soap *soap,
	ns1__RetrieveCancelRequest *ns1__retrieveCancelRequest)
{
	struct __ns1__retrieveCancelResponse *_p = ::soap_new___ns1__retrieveCancelResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveCancelResponse(soap, _p);
		_p->ns1__retrieveCancelRequest = ns1__retrieveCancelRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveCancelResponse(struct soap*, const struct __ns1__retrieveCancelResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveCancelResponse(struct soap *soap, struct __ns1__retrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveCancelResponse(soap, p), 0) || ::soap_put___ns1__retrieveCancelResponse(soap, p, "-ns1:retrieveCancelResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveCancelResponse(struct soap *soap, const char *URL, struct __ns1__retrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveCancelResponse(soap, p), 0) || ::soap_put___ns1__retrieveCancelResponse(soap, p, "-ns1:retrieveCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveCancelResponse(struct soap *soap, const char *URL, struct __ns1__retrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveCancelResponse(soap, p), 0) || ::soap_put___ns1__retrieveCancelResponse(soap, p, "-ns1:retrieveCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveCancelResponse(struct soap *soap, const char *URL, struct __ns1__retrieveCancelResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveCancelResponse(soap, p), 0) || ::soap_put___ns1__retrieveCancelResponse(soap, p, "-ns1:retrieveCancelResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveCancelResponse * SOAP_FMAC4 soap_get___ns1__retrieveCancelResponse(struct soap*, struct __ns1__retrieveCancelResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveCancelResponse(struct soap *soap, struct __ns1__retrieveCancelResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveCancelResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveCancelResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveCancelResponse(struct soap *soap, const char *URL, struct __ns1__retrieveCancelResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveCancelResponse(struct soap *soap, struct __ns1__retrieveCancelResponse *p)
{
	if (::soap_read___ns1__retrieveCancelResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitCancelRequest_DEFINED
#define SOAP_TYPE___ns1__submitCancelRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitCancelRequest(struct soap*, struct __ns1__submitCancelRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitCancelRequest(struct soap*, const struct __ns1__submitCancelRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitCancelRequest(struct soap*, const char*, int, const struct __ns1__submitCancelRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitCancelRequest * SOAP_FMAC4 soap_in___ns1__submitCancelRequest(struct soap*, const char*, struct __ns1__submitCancelRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitCancelRequest * SOAP_FMAC2 soap_instantiate___ns1__submitCancelRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitCancelRequest * soap_new___ns1__submitCancelRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitCancelRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitCancelRequest * soap_new_req___ns1__submitCancelRequest(
	struct soap *soap)
{
	struct __ns1__submitCancelRequest *_p = ::soap_new___ns1__submitCancelRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitCancelRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitCancelRequest * soap_new_set___ns1__submitCancelRequest(
	struct soap *soap,
	ns1__SubmitCancelRequest *ns1__submitCancelRequest)
{
	struct __ns1__submitCancelRequest *_p = ::soap_new___ns1__submitCancelRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitCancelRequest(soap, _p);
		_p->ns1__submitCancelRequest = ns1__submitCancelRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitCancelRequest(struct soap*, const struct __ns1__submitCancelRequest *, const char*, const char*);

inline int soap_write___ns1__submitCancelRequest(struct soap *soap, struct __ns1__submitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitCancelRequest(soap, p), 0) || ::soap_put___ns1__submitCancelRequest(soap, p, "-ns1:submitCancelRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitCancelRequest(struct soap *soap, const char *URL, struct __ns1__submitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitCancelRequest(soap, p), 0) || ::soap_put___ns1__submitCancelRequest(soap, p, "-ns1:submitCancelRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitCancelRequest(struct soap *soap, const char *URL, struct __ns1__submitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitCancelRequest(soap, p), 0) || ::soap_put___ns1__submitCancelRequest(soap, p, "-ns1:submitCancelRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitCancelRequest(struct soap *soap, const char *URL, struct __ns1__submitCancelRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitCancelRequest(soap, p), 0) || ::soap_put___ns1__submitCancelRequest(soap, p, "-ns1:submitCancelRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitCancelRequest * SOAP_FMAC4 soap_get___ns1__submitCancelRequest(struct soap*, struct __ns1__submitCancelRequest *, const char*, const char*);

inline int soap_read___ns1__submitCancelRequest(struct soap *soap, struct __ns1__submitCancelRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitCancelRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitCancelRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitCancelRequest(struct soap *soap, const char *URL, struct __ns1__submitCancelRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitCancelRequest(struct soap *soap, struct __ns1__submitCancelRequest *p)
{
	if (::soap_read___ns1__submitCancelRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveScheduledResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveScheduledResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveScheduledResponse(struct soap*, struct __ns1__retrieveScheduledResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveScheduledResponse(struct soap*, const struct __ns1__retrieveScheduledResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveScheduledResponse(struct soap*, const char*, int, const struct __ns1__retrieveScheduledResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveScheduledResponse * SOAP_FMAC4 soap_in___ns1__retrieveScheduledResponse(struct soap*, const char*, struct __ns1__retrieveScheduledResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveScheduledResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveScheduledResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveScheduledResponse * soap_new___ns1__retrieveScheduledResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveScheduledResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveScheduledResponse * soap_new_req___ns1__retrieveScheduledResponse(
	struct soap *soap)
{
	struct __ns1__retrieveScheduledResponse *_p = ::soap_new___ns1__retrieveScheduledResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveScheduledResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveScheduledResponse * soap_new_set___ns1__retrieveScheduledResponse(
	struct soap *soap,
	ns1__RetrieveScheduledRequest *ns1__retrieveScheduledRequest)
{
	struct __ns1__retrieveScheduledResponse *_p = ::soap_new___ns1__retrieveScheduledResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveScheduledResponse(soap, _p);
		_p->ns1__retrieveScheduledRequest = ns1__retrieveScheduledRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveScheduledResponse(struct soap*, const struct __ns1__retrieveScheduledResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveScheduledResponse(struct soap *soap, struct __ns1__retrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveScheduledResponse(soap, p), 0) || ::soap_put___ns1__retrieveScheduledResponse(soap, p, "-ns1:retrieveScheduledResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveScheduledResponse(struct soap *soap, const char *URL, struct __ns1__retrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveScheduledResponse(soap, p), 0) || ::soap_put___ns1__retrieveScheduledResponse(soap, p, "-ns1:retrieveScheduledResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveScheduledResponse(struct soap *soap, const char *URL, struct __ns1__retrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveScheduledResponse(soap, p), 0) || ::soap_put___ns1__retrieveScheduledResponse(soap, p, "-ns1:retrieveScheduledResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveScheduledResponse(struct soap *soap, const char *URL, struct __ns1__retrieveScheduledResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveScheduledResponse(soap, p), 0) || ::soap_put___ns1__retrieveScheduledResponse(soap, p, "-ns1:retrieveScheduledResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveScheduledResponse * SOAP_FMAC4 soap_get___ns1__retrieveScheduledResponse(struct soap*, struct __ns1__retrieveScheduledResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveScheduledResponse(struct soap *soap, struct __ns1__retrieveScheduledResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveScheduledResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveScheduledResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveScheduledResponse(struct soap *soap, const char *URL, struct __ns1__retrieveScheduledResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveScheduledResponse(struct soap *soap, struct __ns1__retrieveScheduledResponse *p)
{
	if (::soap_read___ns1__retrieveScheduledResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitScheduledRequest_DEFINED
#define SOAP_TYPE___ns1__submitScheduledRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitScheduledRequest(struct soap*, struct __ns1__submitScheduledRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitScheduledRequest(struct soap*, const struct __ns1__submitScheduledRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitScheduledRequest(struct soap*, const char*, int, const struct __ns1__submitScheduledRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitScheduledRequest * SOAP_FMAC4 soap_in___ns1__submitScheduledRequest(struct soap*, const char*, struct __ns1__submitScheduledRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitScheduledRequest * SOAP_FMAC2 soap_instantiate___ns1__submitScheduledRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitScheduledRequest * soap_new___ns1__submitScheduledRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitScheduledRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitScheduledRequest * soap_new_req___ns1__submitScheduledRequest(
	struct soap *soap)
{
	struct __ns1__submitScheduledRequest *_p = ::soap_new___ns1__submitScheduledRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitScheduledRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitScheduledRequest * soap_new_set___ns1__submitScheduledRequest(
	struct soap *soap,
	ns1__SubmitScheduledRequest *ns1__submitScheduledRequest)
{
	struct __ns1__submitScheduledRequest *_p = ::soap_new___ns1__submitScheduledRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitScheduledRequest(soap, _p);
		_p->ns1__submitScheduledRequest = ns1__submitScheduledRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitScheduledRequest(struct soap*, const struct __ns1__submitScheduledRequest *, const char*, const char*);

inline int soap_write___ns1__submitScheduledRequest(struct soap *soap, struct __ns1__submitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitScheduledRequest(soap, p), 0) || ::soap_put___ns1__submitScheduledRequest(soap, p, "-ns1:submitScheduledRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitScheduledRequest(struct soap *soap, const char *URL, struct __ns1__submitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitScheduledRequest(soap, p), 0) || ::soap_put___ns1__submitScheduledRequest(soap, p, "-ns1:submitScheduledRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitScheduledRequest(struct soap *soap, const char *URL, struct __ns1__submitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitScheduledRequest(soap, p), 0) || ::soap_put___ns1__submitScheduledRequest(soap, p, "-ns1:submitScheduledRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitScheduledRequest(struct soap *soap, const char *URL, struct __ns1__submitScheduledRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitScheduledRequest(soap, p), 0) || ::soap_put___ns1__submitScheduledRequest(soap, p, "-ns1:submitScheduledRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitScheduledRequest * SOAP_FMAC4 soap_get___ns1__submitScheduledRequest(struct soap*, struct __ns1__submitScheduledRequest *, const char*, const char*);

inline int soap_read___ns1__submitScheduledRequest(struct soap *soap, struct __ns1__submitScheduledRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitScheduledRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitScheduledRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitScheduledRequest(struct soap *soap, const char *URL, struct __ns1__submitScheduledRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitScheduledRequest(struct soap *soap, struct __ns1__submitScheduledRequest *p)
{
	if (::soap_read___ns1__submitScheduledRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetHistoryResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetHistoryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetHistoryResponse(struct soap*, struct __ns1__retrieveGetHistoryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetHistoryResponse(struct soap*, const struct __ns1__retrieveGetHistoryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetHistoryResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetHistoryResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetHistoryResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetHistoryResponse(struct soap*, const char*, struct __ns1__retrieveGetHistoryResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetHistoryResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetHistoryResponse * soap_new___ns1__retrieveGetHistoryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetHistoryResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetHistoryResponse * soap_new_req___ns1__retrieveGetHistoryResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetHistoryResponse *_p = ::soap_new___ns1__retrieveGetHistoryResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetHistoryResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetHistoryResponse * soap_new_set___ns1__retrieveGetHistoryResponse(
	struct soap *soap,
	ns1__RetrieveGetHistoryRequest *ns1__retrieveGetHistoryRequest)
{
	struct __ns1__retrieveGetHistoryResponse *_p = ::soap_new___ns1__retrieveGetHistoryResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetHistoryResponse(soap, _p);
		_p->ns1__retrieveGetHistoryRequest = ns1__retrieveGetHistoryRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetHistoryResponse(struct soap*, const struct __ns1__retrieveGetHistoryResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetHistoryResponse(struct soap *soap, struct __ns1__retrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetHistoryResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetHistoryResponse(soap, p, "-ns1:retrieveGetHistoryResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetHistoryResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetHistoryResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetHistoryResponse(soap, p, "-ns1:retrieveGetHistoryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetHistoryResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetHistoryResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetHistoryResponse(soap, p, "-ns1:retrieveGetHistoryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetHistoryResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetHistoryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetHistoryResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetHistoryResponse(soap, p, "-ns1:retrieveGetHistoryResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetHistoryResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetHistoryResponse(struct soap*, struct __ns1__retrieveGetHistoryResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetHistoryResponse(struct soap *soap, struct __ns1__retrieveGetHistoryResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetHistoryResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetHistoryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetHistoryResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetHistoryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetHistoryResponse(struct soap *soap, struct __ns1__retrieveGetHistoryResponse *p)
{
	if (::soap_read___ns1__retrieveGetHistoryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetHistoryRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetHistoryRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetHistoryRequest(struct soap*, struct __ns1__submitGetHistoryRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetHistoryRequest(struct soap*, const struct __ns1__submitGetHistoryRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetHistoryRequest(struct soap*, const char*, int, const struct __ns1__submitGetHistoryRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetHistoryRequest * SOAP_FMAC4 soap_in___ns1__submitGetHistoryRequest(struct soap*, const char*, struct __ns1__submitGetHistoryRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetHistoryRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetHistoryRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetHistoryRequest * soap_new___ns1__submitGetHistoryRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetHistoryRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetHistoryRequest * soap_new_req___ns1__submitGetHistoryRequest(
	struct soap *soap)
{
	struct __ns1__submitGetHistoryRequest *_p = ::soap_new___ns1__submitGetHistoryRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetHistoryRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetHistoryRequest * soap_new_set___ns1__submitGetHistoryRequest(
	struct soap *soap,
	ns1__SubmitGetHistoryRequest *ns1__submitGetHistoryRequest)
{
	struct __ns1__submitGetHistoryRequest *_p = ::soap_new___ns1__submitGetHistoryRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetHistoryRequest(soap, _p);
		_p->ns1__submitGetHistoryRequest = ns1__submitGetHistoryRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetHistoryRequest(struct soap*, const struct __ns1__submitGetHistoryRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetHistoryRequest(struct soap *soap, struct __ns1__submitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetHistoryRequest(soap, p), 0) || ::soap_put___ns1__submitGetHistoryRequest(soap, p, "-ns1:submitGetHistoryRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetHistoryRequest(struct soap *soap, const char *URL, struct __ns1__submitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetHistoryRequest(soap, p), 0) || ::soap_put___ns1__submitGetHistoryRequest(soap, p, "-ns1:submitGetHistoryRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetHistoryRequest(struct soap *soap, const char *URL, struct __ns1__submitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetHistoryRequest(soap, p), 0) || ::soap_put___ns1__submitGetHistoryRequest(soap, p, "-ns1:submitGetHistoryRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetHistoryRequest(struct soap *soap, const char *URL, struct __ns1__submitGetHistoryRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetHistoryRequest(soap, p), 0) || ::soap_put___ns1__submitGetHistoryRequest(soap, p, "-ns1:submitGetHistoryRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetHistoryRequest * SOAP_FMAC4 soap_get___ns1__submitGetHistoryRequest(struct soap*, struct __ns1__submitGetHistoryRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetHistoryRequest(struct soap *soap, struct __ns1__submitGetHistoryRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetHistoryRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetHistoryRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetHistoryRequest(struct soap *soap, const char *URL, struct __ns1__submitGetHistoryRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetHistoryRequest(struct soap *soap, struct __ns1__submitGetHistoryRequest *p)
{
	if (::soap_read___ns1__submitGetHistoryRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__retrieveGetDataResponse_DEFINED
#define SOAP_TYPE___ns1__retrieveGetDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__retrieveGetDataResponse(struct soap*, struct __ns1__retrieveGetDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__retrieveGetDataResponse(struct soap*, const struct __ns1__retrieveGetDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__retrieveGetDataResponse(struct soap*, const char*, int, const struct __ns1__retrieveGetDataResponse *, const char*);
SOAP_FMAC3 struct __ns1__retrieveGetDataResponse * SOAP_FMAC4 soap_in___ns1__retrieveGetDataResponse(struct soap*, const char*, struct __ns1__retrieveGetDataResponse *, const char*);
SOAP_FMAC1 struct __ns1__retrieveGetDataResponse * SOAP_FMAC2 soap_instantiate___ns1__retrieveGetDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__retrieveGetDataResponse * soap_new___ns1__retrieveGetDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__retrieveGetDataResponse(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__retrieveGetDataResponse * soap_new_req___ns1__retrieveGetDataResponse(
	struct soap *soap)
{
	struct __ns1__retrieveGetDataResponse *_p = ::soap_new___ns1__retrieveGetDataResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetDataResponse(soap, _p);
	}
	return _p;
}

inline struct __ns1__retrieveGetDataResponse * soap_new_set___ns1__retrieveGetDataResponse(
	struct soap *soap,
	ns1__RetrieveGetDataRequest *ns1__retrieveGetDataRequest)
{
	struct __ns1__retrieveGetDataResponse *_p = ::soap_new___ns1__retrieveGetDataResponse(soap);
	if (_p)
	{	::soap_default___ns1__retrieveGetDataResponse(soap, _p);
		_p->ns1__retrieveGetDataRequest = ns1__retrieveGetDataRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__retrieveGetDataResponse(struct soap*, const struct __ns1__retrieveGetDataResponse *, const char*, const char*);

inline int soap_write___ns1__retrieveGetDataResponse(struct soap *soap, struct __ns1__retrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__retrieveGetDataResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetDataResponse(soap, p, "-ns1:retrieveGetDataResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__retrieveGetDataResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetDataResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetDataResponse(soap, p, "-ns1:retrieveGetDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__retrieveGetDataResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetDataResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetDataResponse(soap, p, "-ns1:retrieveGetDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__retrieveGetDataResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__retrieveGetDataResponse(soap, p), 0) || ::soap_put___ns1__retrieveGetDataResponse(soap, p, "-ns1:retrieveGetDataResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__retrieveGetDataResponse * SOAP_FMAC4 soap_get___ns1__retrieveGetDataResponse(struct soap*, struct __ns1__retrieveGetDataResponse *, const char*, const char*);

inline int soap_read___ns1__retrieveGetDataResponse(struct soap *soap, struct __ns1__retrieveGetDataResponse *p)
{
	if (p)
	{	::soap_default___ns1__retrieveGetDataResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__retrieveGetDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__retrieveGetDataResponse(struct soap *soap, const char *URL, struct __ns1__retrieveGetDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__retrieveGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__retrieveGetDataResponse(struct soap *soap, struct __ns1__retrieveGetDataResponse *p)
{
	if (::soap_read___ns1__retrieveGetDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__submitGetDataRequest_DEFINED
#define SOAP_TYPE___ns1__submitGetDataRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__submitGetDataRequest(struct soap*, struct __ns1__submitGetDataRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__submitGetDataRequest(struct soap*, const struct __ns1__submitGetDataRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__submitGetDataRequest(struct soap*, const char*, int, const struct __ns1__submitGetDataRequest *, const char*);
SOAP_FMAC3 struct __ns1__submitGetDataRequest * SOAP_FMAC4 soap_in___ns1__submitGetDataRequest(struct soap*, const char*, struct __ns1__submitGetDataRequest *, const char*);
SOAP_FMAC1 struct __ns1__submitGetDataRequest * SOAP_FMAC2 soap_instantiate___ns1__submitGetDataRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__submitGetDataRequest * soap_new___ns1__submitGetDataRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__submitGetDataRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__submitGetDataRequest * soap_new_req___ns1__submitGetDataRequest(
	struct soap *soap)
{
	struct __ns1__submitGetDataRequest *_p = ::soap_new___ns1__submitGetDataRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetDataRequest(soap, _p);
	}
	return _p;
}

inline struct __ns1__submitGetDataRequest * soap_new_set___ns1__submitGetDataRequest(
	struct soap *soap,
	ns1__SubmitGetDataRequest *ns1__submitGetDataRequest)
{
	struct __ns1__submitGetDataRequest *_p = ::soap_new___ns1__submitGetDataRequest(soap);
	if (_p)
	{	::soap_default___ns1__submitGetDataRequest(soap, _p);
		_p->ns1__submitGetDataRequest = ns1__submitGetDataRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__submitGetDataRequest(struct soap*, const struct __ns1__submitGetDataRequest *, const char*, const char*);

inline int soap_write___ns1__submitGetDataRequest(struct soap *soap, struct __ns1__submitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__submitGetDataRequest(soap, p), 0) || ::soap_put___ns1__submitGetDataRequest(soap, p, "-ns1:submitGetDataRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__submitGetDataRequest(struct soap *soap, const char *URL, struct __ns1__submitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetDataRequest(soap, p), 0) || ::soap_put___ns1__submitGetDataRequest(soap, p, "-ns1:submitGetDataRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__submitGetDataRequest(struct soap *soap, const char *URL, struct __ns1__submitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetDataRequest(soap, p), 0) || ::soap_put___ns1__submitGetDataRequest(soap, p, "-ns1:submitGetDataRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__submitGetDataRequest(struct soap *soap, const char *URL, struct __ns1__submitGetDataRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__submitGetDataRequest(soap, p), 0) || ::soap_put___ns1__submitGetDataRequest(soap, p, "-ns1:submitGetDataRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__submitGetDataRequest * SOAP_FMAC4 soap_get___ns1__submitGetDataRequest(struct soap*, struct __ns1__submitGetDataRequest *, const char*, const char*);

inline int soap_read___ns1__submitGetDataRequest(struct soap *soap, struct __ns1__submitGetDataRequest *p)
{
	if (p)
	{	::soap_default___ns1__submitGetDataRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__submitGetDataRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__submitGetDataRequest(struct soap *soap, const char *URL, struct __ns1__submitGetDataRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__submitGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__submitGetDataRequest(struct soap *soap, struct __ns1__submitGetDataRequest *p)
{
	if (::soap_read___ns1__submitGetDataRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveMmktBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveMmktBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveMmktBvalDealsUploadRequest(struct soap*, ns1__RetrieveMmktBvalDealsUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveMmktBvalDealsUploadRequest(struct soap*, const char *, int, ns1__RetrieveMmktBvalDealsUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveMmktBvalDealsUploadRequest(struct soap*, const char*, ns1__RetrieveMmktBvalDealsUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveMmktBvalDealsUploadRequest(struct soap*, ns1__RetrieveMmktBvalDealsUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveMmktBvalDealsUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveMmktBvalDealsUploadRequest(struct soap*, ns1__RetrieveMmktBvalDealsUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitMmktBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitMmktBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitMmktBvalDealsUploadRequest(struct soap*, ns1__SubmitMmktBvalDealsUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitMmktBvalDealsUploadRequest(struct soap*, const char *, int, ns1__SubmitMmktBvalDealsUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitMmktBvalDealsUploadRequest(struct soap*, const char*, ns1__SubmitMmktBvalDealsUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitMmktBvalDealsUploadRequest(struct soap*, ns1__SubmitMmktBvalDealsUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitMmktBvalDealsUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitMmktBvalDealsUploadRequest(struct soap*, ns1__SubmitMmktBvalDealsUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetFieldsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__GetFieldsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetFieldsRequest(struct soap*, ns1__GetFieldsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetFieldsRequest(struct soap*, const char *, int, ns1__GetFieldsRequest *const*, const char *);
SOAP_FMAC3 ns1__GetFieldsRequest ** SOAP_FMAC4 soap_in_PointerTons1__GetFieldsRequest(struct soap*, const char*, ns1__GetFieldsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetFieldsRequest(struct soap*, ns1__GetFieldsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetFieldsRequest ** SOAP_FMAC4 soap_get_PointerTons1__GetFieldsRequest(struct soap*, ns1__GetFieldsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveOtcBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveOtcBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveOtcBvalDealsUploadRequest(struct soap*, ns1__RetrieveOtcBvalDealsUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveOtcBvalDealsUploadRequest(struct soap*, const char *, int, ns1__RetrieveOtcBvalDealsUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveOtcBvalDealsUploadRequest(struct soap*, const char*, ns1__RetrieveOtcBvalDealsUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveOtcBvalDealsUploadRequest(struct soap*, ns1__RetrieveOtcBvalDealsUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveOtcBvalDealsUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveOtcBvalDealsUploadRequest(struct soap*, ns1__RetrieveOtcBvalDealsUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitOtcBvalDealsUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitOtcBvalDealsUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitOtcBvalDealsUploadRequest(struct soap*, ns1__SubmitOtcBvalDealsUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitOtcBvalDealsUploadRequest(struct soap*, const char *, int, ns1__SubmitOtcBvalDealsUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitOtcBvalDealsUploadRequest(struct soap*, const char*, ns1__SubmitOtcBvalDealsUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitOtcBvalDealsUploadRequest(struct soap*, ns1__SubmitOtcBvalDealsUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitOtcBvalDealsUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitOtcBvalDealsUploadRequest(struct soap*, ns1__SubmitOtcBvalDealsUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveOtcbvalUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveOtcbvalUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveOtcbvalUploadRequest(struct soap*, ns1__RetrieveOtcbvalUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveOtcbvalUploadRequest(struct soap*, const char *, int, ns1__RetrieveOtcbvalUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveOtcbvalUploadRequest(struct soap*, const char*, ns1__RetrieveOtcbvalUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveOtcbvalUploadRequest(struct soap*, ns1__RetrieveOtcbvalUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveOtcbvalUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveOtcbvalUploadRequest(struct soap*, ns1__RetrieveOtcbvalUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitOtcbvalUploadRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitOtcbvalUploadRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitOtcbvalUploadRequest(struct soap*, ns1__SubmitOtcbvalUploadRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitOtcbvalUploadRequest(struct soap*, const char *, int, ns1__SubmitOtcbvalUploadRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitOtcbvalUploadRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitOtcbvalUploadRequest(struct soap*, const char*, ns1__SubmitOtcbvalUploadRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitOtcbvalUploadRequest(struct soap*, ns1__SubmitOtcbvalUploadRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitOtcbvalUploadRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitOtcbvalUploadRequest(struct soap*, ns1__SubmitOtcbvalUploadRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetAllQuotesRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetAllQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetAllQuotesRequest(struct soap*, ns1__RetrieveGetAllQuotesRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetAllQuotesRequest(struct soap*, const char *, int, ns1__RetrieveGetAllQuotesRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetAllQuotesRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetAllQuotesRequest(struct soap*, const char*, ns1__RetrieveGetAllQuotesRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetAllQuotesRequest(struct soap*, ns1__RetrieveGetAllQuotesRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetAllQuotesRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetAllQuotesRequest(struct soap*, ns1__RetrieveGetAllQuotesRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetAllQuotesRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetAllQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetAllQuotesRequest(struct soap*, ns1__SubmitGetAllQuotesRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetAllQuotesRequest(struct soap*, const char *, int, ns1__SubmitGetAllQuotesRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetAllQuotesRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetAllQuotesRequest(struct soap*, const char*, ns1__SubmitGetAllQuotesRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetAllQuotesRequest(struct soap*, ns1__SubmitGetAllQuotesRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetAllQuotesRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetAllQuotesRequest(struct soap*, ns1__SubmitGetAllQuotesRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetQuotesRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetQuotesRequest(struct soap*, ns1__RetrieveGetQuotesRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetQuotesRequest(struct soap*, const char *, int, ns1__RetrieveGetQuotesRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetQuotesRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetQuotesRequest(struct soap*, const char*, ns1__RetrieveGetQuotesRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetQuotesRequest(struct soap*, ns1__RetrieveGetQuotesRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetQuotesRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetQuotesRequest(struct soap*, ns1__RetrieveGetQuotesRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetQuotesRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetQuotesRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetQuotesRequest(struct soap*, ns1__SubmitGetQuotesRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetQuotesRequest(struct soap*, const char *, int, ns1__SubmitGetQuotesRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetQuotesRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetQuotesRequest(struct soap*, const char*, ns1__SubmitGetQuotesRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetQuotesRequest(struct soap*, ns1__SubmitGetQuotesRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetQuotesRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetQuotesRequest(struct soap*, ns1__SubmitGetQuotesRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetPortfolioValidationRequest_DEFINED
#define SOAP_TYPE_PointerTons1__GetPortfolioValidationRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetPortfolioValidationRequest(struct soap*, ns1__GetPortfolioValidationRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetPortfolioValidationRequest(struct soap*, const char *, int, ns1__GetPortfolioValidationRequest *const*, const char *);
SOAP_FMAC3 ns1__GetPortfolioValidationRequest ** SOAP_FMAC4 soap_in_PointerTons1__GetPortfolioValidationRequest(struct soap*, const char*, ns1__GetPortfolioValidationRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetPortfolioValidationRequest(struct soap*, ns1__GetPortfolioValidationRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetPortfolioValidationRequest ** SOAP_FMAC4 soap_get_PointerTons1__GetPortfolioValidationRequest(struct soap*, ns1__GetPortfolioValidationRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetActionsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetActionsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetActionsRequest(struct soap*, ns1__RetrieveGetActionsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetActionsRequest(struct soap*, const char *, int, ns1__RetrieveGetActionsRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetActionsRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetActionsRequest(struct soap*, const char*, ns1__RetrieveGetActionsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetActionsRequest(struct soap*, ns1__RetrieveGetActionsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetActionsRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetActionsRequest(struct soap*, ns1__RetrieveGetActionsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetActionsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetActionsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetActionsRequest(struct soap*, ns1__SubmitGetActionsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetActionsRequest(struct soap*, const char *, int, ns1__SubmitGetActionsRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetActionsRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetActionsRequest(struct soap*, const char*, ns1__SubmitGetActionsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetActionsRequest(struct soap*, ns1__SubmitGetActionsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetActionsRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetActionsRequest(struct soap*, ns1__SubmitGetActionsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetCompanyRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetCompanyRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetCompanyRequest(struct soap*, ns1__RetrieveGetCompanyRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetCompanyRequest(struct soap*, const char *, int, ns1__RetrieveGetCompanyRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetCompanyRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetCompanyRequest(struct soap*, const char*, ns1__RetrieveGetCompanyRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetCompanyRequest(struct soap*, ns1__RetrieveGetCompanyRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetCompanyRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetCompanyRequest(struct soap*, ns1__RetrieveGetCompanyRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetCompanyRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetCompanyRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetCompanyRequest(struct soap*, ns1__SubmitGetCompanyRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetCompanyRequest(struct soap*, const char *, int, ns1__SubmitGetCompanyRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetCompanyRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetCompanyRequest(struct soap*, const char*, ns1__SubmitGetCompanyRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetCompanyRequest(struct soap*, ns1__SubmitGetCompanyRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetCompanyRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetCompanyRequest(struct soap*, ns1__SubmitGetCompanyRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetFundamentalsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetFundamentalsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetFundamentalsRequest(struct soap*, ns1__RetrieveGetFundamentalsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetFundamentalsRequest(struct soap*, const char *, int, ns1__RetrieveGetFundamentalsRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetFundamentalsRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetFundamentalsRequest(struct soap*, const char*, ns1__RetrieveGetFundamentalsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetFundamentalsRequest(struct soap*, ns1__RetrieveGetFundamentalsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetFundamentalsRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetFundamentalsRequest(struct soap*, ns1__RetrieveGetFundamentalsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetFundamentalsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetFundamentalsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetFundamentalsRequest(struct soap*, ns1__SubmitGetFundamentalsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetFundamentalsRequest(struct soap*, const char *, int, ns1__SubmitGetFundamentalsRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetFundamentalsRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetFundamentalsRequest(struct soap*, const char*, ns1__SubmitGetFundamentalsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetFundamentalsRequest(struct soap*, ns1__SubmitGetFundamentalsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetFundamentalsRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetFundamentalsRequest(struct soap*, ns1__SubmitGetFundamentalsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetCorrectionsRequest_DEFINED
#define SOAP_TYPE_PointerTons1__GetCorrectionsRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetCorrectionsRequest(struct soap*, ns1__GetCorrectionsRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetCorrectionsRequest(struct soap*, const char *, int, ns1__GetCorrectionsRequest *const*, const char *);
SOAP_FMAC3 ns1__GetCorrectionsRequest ** SOAP_FMAC4 soap_in_PointerTons1__GetCorrectionsRequest(struct soap*, const char*, ns1__GetCorrectionsRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetCorrectionsRequest(struct soap*, ns1__GetCorrectionsRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetCorrectionsRequest ** SOAP_FMAC4 soap_get_PointerTons1__GetCorrectionsRequest(struct soap*, ns1__GetCorrectionsRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveCancelRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveCancelRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveCancelRequest(struct soap*, ns1__RetrieveCancelRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveCancelRequest(struct soap*, const char *, int, ns1__RetrieveCancelRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveCancelRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveCancelRequest(struct soap*, const char*, ns1__RetrieveCancelRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveCancelRequest(struct soap*, ns1__RetrieveCancelRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveCancelRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveCancelRequest(struct soap*, ns1__RetrieveCancelRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitCancelRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitCancelRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitCancelRequest(struct soap*, ns1__SubmitCancelRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitCancelRequest(struct soap*, const char *, int, ns1__SubmitCancelRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitCancelRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitCancelRequest(struct soap*, const char*, ns1__SubmitCancelRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitCancelRequest(struct soap*, ns1__SubmitCancelRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitCancelRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitCancelRequest(struct soap*, ns1__SubmitCancelRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveScheduledRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveScheduledRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveScheduledRequest(struct soap*, ns1__RetrieveScheduledRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveScheduledRequest(struct soap*, const char *, int, ns1__RetrieveScheduledRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveScheduledRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveScheduledRequest(struct soap*, const char*, ns1__RetrieveScheduledRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveScheduledRequest(struct soap*, ns1__RetrieveScheduledRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveScheduledRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveScheduledRequest(struct soap*, ns1__RetrieveScheduledRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitScheduledRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitScheduledRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitScheduledRequest(struct soap*, ns1__SubmitScheduledRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitScheduledRequest(struct soap*, const char *, int, ns1__SubmitScheduledRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitScheduledRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitScheduledRequest(struct soap*, const char*, ns1__SubmitScheduledRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitScheduledRequest(struct soap*, ns1__SubmitScheduledRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitScheduledRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitScheduledRequest(struct soap*, ns1__SubmitScheduledRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetHistoryRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetHistoryRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetHistoryRequest(struct soap*, ns1__RetrieveGetHistoryRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetHistoryRequest(struct soap*, const char *, int, ns1__RetrieveGetHistoryRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetHistoryRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetHistoryRequest(struct soap*, const char*, ns1__RetrieveGetHistoryRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetHistoryRequest(struct soap*, ns1__RetrieveGetHistoryRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetHistoryRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetHistoryRequest(struct soap*, ns1__RetrieveGetHistoryRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetHistoryRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetHistoryRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetHistoryRequest(struct soap*, ns1__SubmitGetHistoryRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetHistoryRequest(struct soap*, const char *, int, ns1__SubmitGetHistoryRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetHistoryRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetHistoryRequest(struct soap*, const char*, ns1__SubmitGetHistoryRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetHistoryRequest(struct soap*, ns1__SubmitGetHistoryRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetHistoryRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetHistoryRequest(struct soap*, ns1__SubmitGetHistoryRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RetrieveGetDataRequest_DEFINED
#define SOAP_TYPE_PointerTons1__RetrieveGetDataRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetrieveGetDataRequest(struct soap*, ns1__RetrieveGetDataRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetrieveGetDataRequest(struct soap*, const char *, int, ns1__RetrieveGetDataRequest *const*, const char *);
SOAP_FMAC3 ns1__RetrieveGetDataRequest ** SOAP_FMAC4 soap_in_PointerTons1__RetrieveGetDataRequest(struct soap*, const char*, ns1__RetrieveGetDataRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetrieveGetDataRequest(struct soap*, ns1__RetrieveGetDataRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__RetrieveGetDataRequest ** SOAP_FMAC4 soap_get_PointerTons1__RetrieveGetDataRequest(struct soap*, ns1__RetrieveGetDataRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitGetDataRequest_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitGetDataRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitGetDataRequest(struct soap*, ns1__SubmitGetDataRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitGetDataRequest(struct soap*, const char *, int, ns1__SubmitGetDataRequest *const*, const char *);
SOAP_FMAC3 ns1__SubmitGetDataRequest ** SOAP_FMAC4 soap_in_PointerTons1__SubmitGetDataRequest(struct soap*, const char*, ns1__SubmitGetDataRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitGetDataRequest(struct soap*, ns1__SubmitGetDataRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitGetDataRequest ** SOAP_FMAC4 soap_get_PointerTons1__SubmitGetDataRequest(struct soap*, ns1__SubmitGetDataRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MmktBvalDealInfos_DEFINED
#define SOAP_TYPE_PointerTons1__MmktBvalDealInfos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MmktBvalDealInfos(struct soap*, ns1__MmktBvalDealInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MmktBvalDealInfos(struct soap*, const char *, int, ns1__MmktBvalDealInfos *const*, const char *);
SOAP_FMAC3 ns1__MmktBvalDealInfos ** SOAP_FMAC4 soap_in_PointerTons1__MmktBvalDealInfos(struct soap*, const char*, ns1__MmktBvalDealInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MmktBvalDealInfos(struct soap*, ns1__MmktBvalDealInfos *const*, const char*, const char*);
SOAP_FMAC3 ns1__MmktBvalDealInfos ** SOAP_FMAC4 soap_get_PointerTons1__MmktBvalDealInfos(struct soap*, ns1__MmktBvalDealInfos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldInfos_DEFINED
#define SOAP_TYPE_PointerTons1__FieldInfos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldInfos(struct soap*, ns1__FieldInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldInfos(struct soap*, const char *, int, ns1__FieldInfos *const*, const char *);
SOAP_FMAC3 ns1__FieldInfos ** SOAP_FMAC4 soap_in_PointerTons1__FieldInfos(struct soap*, const char*, ns1__FieldInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldInfos(struct soap*, ns1__FieldInfos *const*, const char*, const char*);
SOAP_FMAC3 ns1__FieldInfos ** SOAP_FMAC4 soap_get_PointerTons1__FieldInfos(struct soap*, ns1__FieldInfos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OtcDealInfos_DEFINED
#define SOAP_TYPE_PointerTons1__OtcDealInfos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OtcDealInfos(struct soap*, ns1__OtcDealInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OtcDealInfos(struct soap*, const char *, int, ns1__OtcDealInfos *const*, const char *);
SOAP_FMAC3 ns1__OtcDealInfos ** SOAP_FMAC4 soap_in_PointerTons1__OtcDealInfos(struct soap*, const char*, ns1__OtcDealInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OtcDealInfos(struct soap*, ns1__OtcDealInfos *const*, const char*, const char*);
SOAP_FMAC3 ns1__OtcDealInfos ** SOAP_FMAC4 soap_get_PointerTons1__OtcDealInfos(struct soap*, ns1__OtcDealInfos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AllQuotesInstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__AllQuotesInstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AllQuotesInstrumentDatas(struct soap*, ns1__AllQuotesInstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AllQuotesInstrumentDatas(struct soap*, const char *, int, ns1__AllQuotesInstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__AllQuotesInstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__AllQuotesInstrumentDatas(struct soap*, const char*, ns1__AllQuotesInstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AllQuotesInstrumentDatas(struct soap*, ns1__AllQuotesInstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__AllQuotesInstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__AllQuotesInstrumentDatas(struct soap*, ns1__AllQuotesInstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QuotesInstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__QuotesInstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QuotesInstrumentDatas(struct soap*, ns1__QuotesInstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QuotesInstrumentDatas(struct soap*, const char *, int, ns1__QuotesInstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__QuotesInstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__QuotesInstrumentDatas(struct soap*, const char*, ns1__QuotesInstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QuotesInstrumentDatas(struct soap*, ns1__QuotesInstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__QuotesInstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__QuotesInstrumentDatas(struct soap*, ns1__QuotesInstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionsInstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__ActionsInstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionsInstrumentDatas(struct soap*, ns1__ActionsInstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionsInstrumentDatas(struct soap*, const char *, int, ns1__ActionsInstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__ActionsInstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__ActionsInstrumentDatas(struct soap*, const char*, ns1__ActionsInstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionsInstrumentDatas(struct soap*, ns1__ActionsInstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionsInstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__ActionsInstrumentDatas(struct soap*, ns1__ActionsInstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetPortfolioValidationHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetPortfolioValidationHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetPortfolioValidationHeaders(struct soap*, ns1__GetPortfolioValidationHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetPortfolioValidationHeaders(struct soap*, const char *, int, ns1__GetPortfolioValidationHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetPortfolioValidationHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetPortfolioValidationHeaders(struct soap*, const char*, ns1__GetPortfolioValidationHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetPortfolioValidationHeaders(struct soap*, ns1__GetPortfolioValidationHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetPortfolioValidationHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetPortfolioValidationHeaders(struct soap*, ns1__GetPortfolioValidationHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FundInstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__FundInstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FundInstrumentDatas(struct soap*, ns1__FundInstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FundInstrumentDatas(struct soap*, const char *, int, ns1__FundInstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__FundInstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__FundInstrumentDatas(struct soap*, const char*, ns1__FundInstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FundInstrumentDatas(struct soap*, ns1__FundInstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__FundInstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__FundInstrumentDatas(struct soap*, ns1__FundInstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledResponses_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledResponses_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledResponses(struct soap*, ns1__ScheduledResponses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledResponses(struct soap*, const char *, int, ns1__ScheduledResponses *const*, const char *);
SOAP_FMAC3 ns1__ScheduledResponses ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledResponses(struct soap*, const char*, ns1__ScheduledResponses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledResponses(struct soap*, ns1__ScheduledResponses *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledResponses ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledResponses(struct soap*, ns1__ScheduledResponses **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CorrectionRecords_DEFINED
#define SOAP_TYPE_PointerTons1__CorrectionRecords_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CorrectionRecords(struct soap*, ns1__CorrectionRecords *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CorrectionRecords(struct soap*, const char *, int, ns1__CorrectionRecords *const*, const char *);
SOAP_FMAC3 ns1__CorrectionRecords ** SOAP_FMAC4 soap_in_PointerTons1__CorrectionRecords(struct soap*, const char*, ns1__CorrectionRecords **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CorrectionRecords(struct soap*, ns1__CorrectionRecords *const*, const char*, const char*);
SOAP_FMAC3 ns1__CorrectionRecords ** SOAP_FMAC4 soap_get_PointerTons1__CorrectionRecords(struct soap*, ns1__CorrectionRecords **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetCorrectionsHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetCorrectionsHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetCorrectionsHeaders(struct soap*, ns1__GetCorrectionsHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetCorrectionsHeaders(struct soap*, const char *, int, ns1__GetCorrectionsHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetCorrectionsHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetCorrectionsHeaders(struct soap*, const char*, ns1__GetCorrectionsHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetCorrectionsHeaders(struct soap*, ns1__GetCorrectionsHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetCorrectionsHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetCorrectionsHeaders(struct soap*, ns1__GetCorrectionsHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CancelResponseStatus_DEFINED
#define SOAP_TYPE_PointerTons1__CancelResponseStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CancelResponseStatus(struct soap*, ns1__CancelResponseStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CancelResponseStatus(struct soap*, const char *, int, ns1__CancelResponseStatus *const*, const char *);
SOAP_FMAC3 ns1__CancelResponseStatus ** SOAP_FMAC4 soap_in_PointerTons1__CancelResponseStatus(struct soap*, const char*, ns1__CancelResponseStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CancelResponseStatus(struct soap*, ns1__CancelResponseStatus *const*, const char*, const char*);
SOAP_FMAC3 ns1__CancelResponseStatus ** SOAP_FMAC4 soap_get_PointerTons1__CancelResponseStatus(struct soap*, ns1__CancelResponseStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__HistInstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__HistInstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__HistInstrumentDatas(struct soap*, ns1__HistInstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__HistInstrumentDatas(struct soap*, const char *, int, ns1__HistInstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__HistInstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__HistInstrumentDatas(struct soap*, const char*, ns1__HistInstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__HistInstrumentDatas(struct soap*, ns1__HistInstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__HistInstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__HistInstrumentDatas(struct soap*, ns1__HistInstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstrumentDatas_DEFINED
#define SOAP_TYPE_PointerTons1__InstrumentDatas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstrumentDatas(struct soap*, ns1__InstrumentDatas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstrumentDatas(struct soap*, const char *, int, ns1__InstrumentDatas *const*, const char *);
SOAP_FMAC3 ns1__InstrumentDatas ** SOAP_FMAC4 soap_in_PointerTons1__InstrumentDatas(struct soap*, const char*, ns1__InstrumentDatas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstrumentDatas(struct soap*, ns1__InstrumentDatas *const*, const char*, const char*);
SOAP_FMAC3 ns1__InstrumentDatas ** SOAP_FMAC4 soap_get_PointerTons1__InstrumentDatas(struct soap*, ns1__InstrumentDatas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MmktBvalDealInformation_DEFINED
#define SOAP_TYPE_PointerTons1__MmktBvalDealInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MmktBvalDealInformation(struct soap*, ns1__MmktBvalDealInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MmktBvalDealInformation(struct soap*, const char *, int, ns1__MmktBvalDealInformation *const*, const char *);
SOAP_FMAC3 ns1__MmktBvalDealInformation ** SOAP_FMAC4 soap_in_PointerTons1__MmktBvalDealInformation(struct soap*, const char*, ns1__MmktBvalDealInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MmktBvalDealInformation(struct soap*, ns1__MmktBvalDealInformation *const*, const char*, const char*);
SOAP_FMAC3 ns1__MmktBvalDealInformation ** SOAP_FMAC4 soap_get_PointerTons1__MmktBvalDealInformation(struct soap*, ns1__MmktBvalDealInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MmktBvalHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__MmktBvalHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MmktBvalHeaders(struct soap*, ns1__MmktBvalHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MmktBvalHeaders(struct soap*, const char *, int, ns1__MmktBvalHeaders *const*, const char *);
SOAP_FMAC3 ns1__MmktBvalHeaders ** SOAP_FMAC4 soap_in_PointerTons1__MmktBvalHeaders(struct soap*, const char*, ns1__MmktBvalHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MmktBvalHeaders(struct soap*, ns1__MmktBvalHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__MmktBvalHeaders ** SOAP_FMAC4 soap_get_PointerTons1__MmktBvalHeaders(struct soap*, ns1__MmktBvalHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldSearchCriteria_DEFINED
#define SOAP_TYPE_PointerTons1__FieldSearchCriteria_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldSearchCriteria(struct soap*, ns1__FieldSearchCriteria *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldSearchCriteria(struct soap*, const char *, int, ns1__FieldSearchCriteria *const*, const char *);
SOAP_FMAC3 ns1__FieldSearchCriteria ** SOAP_FMAC4 soap_in_PointerTons1__FieldSearchCriteria(struct soap*, const char*, ns1__FieldSearchCriteria **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldSearchCriteria(struct soap*, ns1__FieldSearchCriteria *const*, const char*, const char*);
SOAP_FMAC3 ns1__FieldSearchCriteria ** SOAP_FMAC4 soap_get_PointerTons1__FieldSearchCriteria(struct soap*, ns1__FieldSearchCriteria **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OtcBvalHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__OtcBvalHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OtcBvalHeaders(struct soap*, ns1__OtcBvalHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OtcBvalHeaders(struct soap*, const char *, int, ns1__OtcBvalHeaders *const*, const char *);
SOAP_FMAC3 ns1__OtcBvalHeaders ** SOAP_FMAC4 soap_in_PointerTons1__OtcBvalHeaders(struct soap*, const char*, ns1__OtcBvalHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OtcBvalHeaders(struct soap*, ns1__OtcBvalHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__OtcBvalHeaders ** SOAP_FMAC4 soap_get_PointerTons1__OtcBvalHeaders(struct soap*, ns1__OtcBvalHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FundInstruments_DEFINED
#define SOAP_TYPE_PointerTons1__FundInstruments_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FundInstruments(struct soap*, ns1__FundInstruments *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FundInstruments(struct soap*, const char *, int, ns1__FundInstruments *const*, const char *);
SOAP_FMAC3 ns1__FundInstruments ** SOAP_FMAC4 soap_in_PointerTons1__FundInstruments(struct soap*, const char*, ns1__FundInstruments **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FundInstruments(struct soap*, ns1__FundInstruments *const*, const char*, const char*);
SOAP_FMAC3 ns1__FundInstruments ** SOAP_FMAC4 soap_get_PointerTons1__FundInstruments(struct soap*, ns1__FundInstruments **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__time_DEFINED
#define SOAP_TYPE_PointerToxsd__time_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__time(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__time(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__time(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__time(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__time(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldSets_DEFINED
#define SOAP_TYPE_PointerTons1__FieldSets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldSets(struct soap*, ns1__FieldSets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldSets(struct soap*, const char *, int, ns1__FieldSets *const*, const char *);
SOAP_FMAC3 ns1__FieldSets ** SOAP_FMAC4 soap_in_PointerTons1__FieldSets(struct soap*, const char*, ns1__FieldSets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldSets(struct soap*, ns1__FieldSets *const*, const char*, const char*);
SOAP_FMAC3 ns1__FieldSets ** SOAP_FMAC4 soap_get_PointerTons1__FieldSets(struct soap*, ns1__FieldSets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledHeaders(struct soap*, ns1__ScheduledHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledHeaders(struct soap*, const char *, int, ns1__ScheduledHeaders *const*, const char *);
SOAP_FMAC3 ns1__ScheduledHeaders ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledHeaders(struct soap*, const char*, ns1__ScheduledHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledHeaders(struct soap*, ns1__ScheduledHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledHeaders ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledHeaders(struct soap*, ns1__ScheduledHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ScheduledResponse_DEFINED
#define SOAP_TYPE_PointerTons1__ScheduledResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScheduledResponse(struct soap*, ns1__ScheduledResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScheduledResponse(struct soap*, const char *, int, ns1__ScheduledResponse *const*, const char *);
SOAP_FMAC3 ns1__ScheduledResponse ** SOAP_FMAC4 soap_in_PointerTons1__ScheduledResponse(struct soap*, const char*, ns1__ScheduledResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScheduledResponse(struct soap*, ns1__ScheduledResponse *const*, const char*, const char*);
SOAP_FMAC3 ns1__ScheduledResponse ** SOAP_FMAC4 soap_get_PointerTons1__ScheduledResponse(struct soap*, ns1__ScheduledResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CancelHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__CancelHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CancelHeaders(struct soap*, ns1__CancelHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CancelHeaders(struct soap*, const char *, int, ns1__CancelHeaders *const*, const char *);
SOAP_FMAC3 ns1__CancelHeaders ** SOAP_FMAC4 soap_in_PointerTons1__CancelHeaders(struct soap*, const char*, ns1__CancelHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CancelHeaders(struct soap*, ns1__CancelHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__CancelHeaders ** SOAP_FMAC4 soap_get_PointerTons1__CancelHeaders(struct soap*, ns1__CancelHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Instruments_DEFINED
#define SOAP_TYPE_PointerTons1__Instruments_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Instruments(struct soap*, ns1__Instruments *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Instruments(struct soap*, const char *, int, ns1__Instruments *const*, const char *);
SOAP_FMAC3 ns1__Instruments ** SOAP_FMAC4 soap_in_PointerTons1__Instruments(struct soap*, const char*, ns1__Instruments **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Instruments(struct soap*, ns1__Instruments *const*, const char*, const char*);
SOAP_FMAC3 ns1__Instruments ** SOAP_FMAC4 soap_get_PointerTons1__Instruments(struct soap*, ns1__Instruments **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Fields_DEFINED
#define SOAP_TYPE_PointerTons1__Fields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Fields(struct soap*, ns1__Fields *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Fields(struct soap*, const char *, int, ns1__Fields *const*, const char *);
SOAP_FMAC3 ns1__Fields ** SOAP_FMAC4 soap_in_PointerTons1__Fields(struct soap*, const char*, ns1__Fields **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Fields(struct soap*, ns1__Fields *const*, const char*, const char*);
SOAP_FMAC3 ns1__Fields ** SOAP_FMAC4 soap_get_PointerTons1__Fields(struct soap*, ns1__Fields **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BvalFieldSets_DEFINED
#define SOAP_TYPE_PointerTons1__BvalFieldSets_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BvalFieldSets(struct soap*, ns1__BvalFieldSets *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BvalFieldSets(struct soap*, const char *, int, ns1__BvalFieldSets *const*, const char *);
SOAP_FMAC3 ns1__BvalFieldSets ** SOAP_FMAC4 soap_in_PointerTons1__BvalFieldSets(struct soap*, const char*, ns1__BvalFieldSets **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BvalFieldSets(struct soap*, ns1__BvalFieldSets *const*, const char*, const char*);
SOAP_FMAC3 ns1__BvalFieldSets ** SOAP_FMAC4 soap_get_PointerTons1__BvalFieldSets(struct soap*, ns1__BvalFieldSets **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OtcDealInformation_DEFINED
#define SOAP_TYPE_PointerTons1__OtcDealInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OtcDealInformation(struct soap*, ns1__OtcDealInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OtcDealInformation(struct soap*, const char *, int, ns1__OtcDealInformation *const*, const char *);
SOAP_FMAC3 ns1__OtcDealInformation ** SOAP_FMAC4 soap_in_PointerTons1__OtcDealInformation(struct soap*, const char*, ns1__OtcDealInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OtcDealInformation(struct soap*, ns1__OtcDealInformation *const*, const char*, const char*);
SOAP_FMAC3 ns1__OtcDealInformation ** SOAP_FMAC4 soap_get_PointerTons1__OtcDealInformation(struct soap*, ns1__OtcDealInformation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OtcBvalAction_DEFINED
#define SOAP_TYPE_PointerTons1__OtcBvalAction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OtcBvalAction(struct soap*, enum ns1__OtcBvalAction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OtcBvalAction(struct soap*, const char *, int, enum ns1__OtcBvalAction *const*, const char *);
SOAP_FMAC3 enum ns1__OtcBvalAction ** SOAP_FMAC4 soap_in_PointerTons1__OtcBvalAction(struct soap*, const char*, enum ns1__OtcBvalAction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OtcBvalAction(struct soap*, enum ns1__OtcBvalAction *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__OtcBvalAction ** SOAP_FMAC4 soap_get_PointerTons1__OtcBvalAction(struct soap*, enum ns1__OtcBvalAction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ResponseStatus_DEFINED
#define SOAP_TYPE_PointerTons1__ResponseStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ResponseStatus(struct soap*, ns1__ResponseStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ResponseStatus(struct soap*, const char *, int, ns1__ResponseStatus *const*, const char *);
SOAP_FMAC3 ns1__ResponseStatus ** SOAP_FMAC4 soap_in_PointerTons1__ResponseStatus(struct soap*, const char*, ns1__ResponseStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ResponseStatus(struct soap*, ns1__ResponseStatus *const*, const char*, const char*);
SOAP_FMAC3 ns1__ResponseStatus ** SOAP_FMAC4 soap_get_PointerTons1__ResponseStatus(struct soap*, ns1__ResponseStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DLCategory2_DEFINED
#define SOAP_TYPE_PointerTons1__DLCategory2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DLCategory2(struct soap*, enum ns1__DLCategory2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DLCategory2(struct soap*, const char *, int, enum ns1__DLCategory2 *const*, const char *);
SOAP_FMAC3 enum ns1__DLCategory2 ** SOAP_FMAC4 soap_in_PointerTons1__DLCategory2(struct soap*, const char*, enum ns1__DLCategory2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DLCategory2(struct soap*, enum ns1__DLCategory2 *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__DLCategory2 ** SOAP_FMAC4 soap_get_PointerTons1__DLCategory2(struct soap*, enum ns1__DLCategory2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DLCategory_DEFINED
#define SOAP_TYPE_PointerTons1__DLCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DLCategory(struct soap*, enum ns1__DLCategory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DLCategory(struct soap*, const char *, int, enum ns1__DLCategory *const*, const char *);
SOAP_FMAC3 enum ns1__DLCategory ** SOAP_FMAC4 soap_in_PointerTons1__DLCategory(struct soap*, const char*, enum ns1__DLCategory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DLCategory(struct soap*, enum ns1__DLCategory *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__DLCategory ** SOAP_FMAC4 soap_get_PointerTons1__DLCategory(struct soap*, enum ns1__DLCategory **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldInfo_DEFINED
#define SOAP_TYPE_PointerTons1__FieldInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldInfo(struct soap*, ns1__FieldInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldInfo(struct soap*, const char *, int, ns1__FieldInfo *const*, const char *);
SOAP_FMAC3 ns1__FieldInfo ** SOAP_FMAC4 soap_in_PointerTons1__FieldInfo(struct soap*, const char*, ns1__FieldInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldInfo(struct soap*, ns1__FieldInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__FieldInfo ** SOAP_FMAC4 soap_get_PointerTons1__FieldInfo(struct soap*, ns1__FieldInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldType_DEFINED
#define SOAP_TYPE_PointerTons1__FieldType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldType(struct soap*, enum ns1__FieldType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldType(struct soap*, const char *, int, enum ns1__FieldType *const*, const char *);
SOAP_FMAC3 enum ns1__FieldType ** SOAP_FMAC4 soap_in_PointerTons1__FieldType(struct soap*, const char*, enum ns1__FieldType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldType(struct soap*, enum ns1__FieldType *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__FieldType ** SOAP_FMAC4 soap_get_PointerTons1__FieldType(struct soap*, enum ns1__FieldType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BulkArrayEntry_DEFINED
#define SOAP_TYPE_PointerTons1__BulkArrayEntry_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BulkArrayEntry(struct soap*, ns1__BulkArrayEntry *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BulkArrayEntry(struct soap*, const char *, int, ns1__BulkArrayEntry *const*, const char *);
SOAP_FMAC3 ns1__BulkArrayEntry ** SOAP_FMAC4 soap_in_PointerTons1__BulkArrayEntry(struct soap*, const char*, ns1__BulkArrayEntry **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BulkArrayEntry(struct soap*, ns1__BulkArrayEntry *const*, const char*, const char*);
SOAP_FMAC3 ns1__BulkArrayEntry ** SOAP_FMAC4 soap_get_PointerTons1__BulkArrayEntry(struct soap*, ns1__BulkArrayEntry **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QRMQuoteData_DEFINED
#define SOAP_TYPE_PointerTons1__QRMQuoteData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QRMQuoteData(struct soap*, ns1__QRMQuoteData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QRMQuoteData(struct soap*, const char *, int, ns1__QRMQuoteData *const*, const char *);
SOAP_FMAC3 ns1__QRMQuoteData ** SOAP_FMAC4 soap_in_PointerTons1__QRMQuoteData(struct soap*, const char*, ns1__QRMQuoteData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QRMQuoteData(struct soap*, ns1__QRMQuoteData *const*, const char*, const char*);
SOAP_FMAC3 ns1__QRMQuoteData ** SOAP_FMAC4 soap_get_PointerTons1__QRMQuoteData(struct soap*, ns1__QRMQuoteData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QRMQuote_DEFINED
#define SOAP_TYPE_PointerTons1__QRMQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QRMQuote(struct soap*, ns1__QRMQuote *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QRMQuote(struct soap*, const char *, int, ns1__QRMQuote *const*, const char *);
SOAP_FMAC3 ns1__QRMQuote ** SOAP_FMAC4 soap_in_PointerTons1__QRMQuote(struct soap*, const char*, ns1__QRMQuote **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QRMQuote(struct soap*, ns1__QRMQuote *const*, const char*, const char*);
SOAP_FMAC3 ns1__QRMQuote ** SOAP_FMAC4 soap_get_PointerTons1__QRMQuote(struct soap*, ns1__QRMQuote **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QRQuote_DEFINED
#define SOAP_TYPE_PointerTons1__QRQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QRQuote(struct soap*, ns1__QRQuote *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QRQuote(struct soap*, const char *, int, ns1__QRQuote *const*, const char *);
SOAP_FMAC3 ns1__QRQuote ** SOAP_FMAC4 soap_in_PointerTons1__QRQuote(struct soap*, const char*, ns1__QRQuote **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QRQuote(struct soap*, ns1__QRQuote *const*, const char*, const char*);
SOAP_FMAC3 ns1__QRQuote ** SOAP_FMAC4 soap_get_PointerTons1__QRQuote(struct soap*, ns1__QRQuote **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BulkArray_DEFINED
#define SOAP_TYPE_PointerTons1__BulkArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BulkArray(struct soap*, ns1__BulkArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BulkArray(struct soap*, const char *, int, ns1__BulkArray *const*, const char *);
SOAP_FMAC3 ns1__BulkArray ** SOAP_FMAC4 soap_in_PointerTons1__BulkArray(struct soap*, const char*, ns1__BulkArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BulkArray(struct soap*, ns1__BulkArray *const*, const char*, const char*);
SOAP_FMAC3 ns1__BulkArray ** SOAP_FMAC4 soap_get_PointerTons1__BulkArray(struct soap*, ns1__BulkArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionStandardFields_DEFINED
#define SOAP_TYPE_PointerTons1__ActionStandardFields_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionStandardFields(struct soap*, ns1__ActionStandardFields *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionStandardFields(struct soap*, const char *, int, ns1__ActionStandardFields *const*, const char *);
SOAP_FMAC3 ns1__ActionStandardFields ** SOAP_FMAC4 soap_in_PointerTons1__ActionStandardFields(struct soap*, const char*, ns1__ActionStandardFields **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionStandardFields(struct soap*, ns1__ActionStandardFields *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionStandardFields ** SOAP_FMAC4 soap_get_PointerTons1__ActionStandardFields(struct soap*, ns1__ActionStandardFields **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QRMQuotes_DEFINED
#define SOAP_TYPE_PointerTons1__QRMQuotes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QRMQuotes(struct soap*, ns1__QRMQuotes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QRMQuotes(struct soap*, const char *, int, ns1__QRMQuotes *const*, const char *);
SOAP_FMAC3 ns1__QRMQuotes ** SOAP_FMAC4 soap_in_PointerTons1__QRMQuotes(struct soap*, const char*, ns1__QRMQuotes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QRMQuotes(struct soap*, ns1__QRMQuotes *const*, const char*, const char*);
SOAP_FMAC3 ns1__QRMQuotes ** SOAP_FMAC4 soap_get_PointerTons1__QRMQuotes(struct soap*, ns1__QRMQuotes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QRQuotes_DEFINED
#define SOAP_TYPE_PointerTons1__QRQuotes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QRQuotes(struct soap*, ns1__QRQuotes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QRQuotes(struct soap*, const char *, int, ns1__QRQuotes *const*, const char *);
SOAP_FMAC3 ns1__QRQuotes ** SOAP_FMAC4 soap_in_PointerTons1__QRQuotes(struct soap*, const char*, ns1__QRQuotes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QRQuotes(struct soap*, ns1__QRQuotes *const*, const char*, const char*);
SOAP_FMAC3 ns1__QRQuotes ** SOAP_FMAC4 soap_get_PointerTons1__QRQuotes(struct soap*, ns1__QRQuotes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__HistData_DEFINED
#define SOAP_TYPE_PointerTons1__HistData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__HistData(struct soap*, ns1__HistData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__HistData(struct soap*, const char *, int, ns1__HistData *const*, const char *);
SOAP_FMAC3 ns1__HistData ** SOAP_FMAC4 soap_in_PointerTons1__HistData(struct soap*, const char*, ns1__HistData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__HistData(struct soap*, ns1__HistData *const*, const char*, const char*);
SOAP_FMAC3 ns1__HistData ** SOAP_FMAC4 soap_get_PointerTons1__HistData(struct soap*, ns1__HistData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Data_DEFINED
#define SOAP_TYPE_PointerTons1__Data_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Data(struct soap*, ns1__Data *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Data(struct soap*, const char *, int, ns1__Data *const*, const char *);
SOAP_FMAC3 ns1__Data ** SOAP_FMAC4 soap_in_PointerTons1__Data(struct soap*, const char*, ns1__Data **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Data(struct soap*, ns1__Data *const*, const char*, const char*);
SOAP_FMAC3 ns1__Data ** SOAP_FMAC4 soap_get_PointerTons1__Data(struct soap*, ns1__Data **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SecondaryQualifier_DEFINED
#define SOAP_TYPE_PointerTons1__SecondaryQualifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SecondaryQualifier(struct soap*, ns1__SecondaryQualifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SecondaryQualifier(struct soap*, const char *, int, ns1__SecondaryQualifier *const*, const char *);
SOAP_FMAC3 ns1__SecondaryQualifier ** SOAP_FMAC4 soap_in_PointerTons1__SecondaryQualifier(struct soap*, const char*, ns1__SecondaryQualifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SecondaryQualifier(struct soap*, ns1__SecondaryQualifier *const*, const char*, const char*);
SOAP_FMAC3 ns1__SecondaryQualifier ** SOAP_FMAC4 soap_get_PointerTons1__SecondaryQualifier(struct soap*, ns1__SecondaryQualifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PrimaryQualifier_DEFINED
#define SOAP_TYPE_PointerTons1__PrimaryQualifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PrimaryQualifier(struct soap*, ns1__PrimaryQualifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PrimaryQualifier(struct soap*, const char *, int, ns1__PrimaryQualifier *const*, const char *);
SOAP_FMAC3 ns1__PrimaryQualifier ** SOAP_FMAC4 soap_in_PointerTons1__PrimaryQualifier(struct soap*, const char*, ns1__PrimaryQualifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PrimaryQualifier(struct soap*, ns1__PrimaryQualifier *const*, const char*, const char*);
SOAP_FMAC3 ns1__PrimaryQualifier ** SOAP_FMAC4 soap_get_PointerTons1__PrimaryQualifier(struct soap*, ns1__PrimaryQualifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Overrides_DEFINED
#define SOAP_TYPE_PointerTons1__Overrides_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Overrides(struct soap*, ns1__Overrides *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Overrides(struct soap*, const char *, int, ns1__Overrides *const*, const char *);
SOAP_FMAC3 ns1__Overrides ** SOAP_FMAC4 soap_in_PointerTons1__Overrides(struct soap*, const char*, ns1__Overrides **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Overrides(struct soap*, ns1__Overrides *const*, const char*, const char*);
SOAP_FMAC3 ns1__Overrides ** SOAP_FMAC4 soap_get_PointerTons1__Overrides(struct soap*, ns1__Overrides **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AllQuotesInstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__AllQuotesInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AllQuotesInstrumentData(struct soap*, ns1__AllQuotesInstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AllQuotesInstrumentData(struct soap*, const char *, int, ns1__AllQuotesInstrumentData *const*, const char *);
SOAP_FMAC3 ns1__AllQuotesInstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__AllQuotesInstrumentData(struct soap*, const char*, ns1__AllQuotesInstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AllQuotesInstrumentData(struct soap*, ns1__AllQuotesInstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__AllQuotesInstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__AllQuotesInstrumentData(struct soap*, ns1__AllQuotesInstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QuotesInstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__QuotesInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QuotesInstrumentData(struct soap*, ns1__QuotesInstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QuotesInstrumentData(struct soap*, const char *, int, ns1__QuotesInstrumentData *const*, const char *);
SOAP_FMAC3 ns1__QuotesInstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__QuotesInstrumentData(struct soap*, const char*, ns1__QuotesInstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QuotesInstrumentData(struct soap*, ns1__QuotesInstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__QuotesInstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__QuotesInstrumentData(struct soap*, ns1__QuotesInstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CorrectionRecord_DEFINED
#define SOAP_TYPE_PointerTons1__CorrectionRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CorrectionRecord(struct soap*, ns1__CorrectionRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CorrectionRecord(struct soap*, const char *, int, ns1__CorrectionRecord *const*, const char *);
SOAP_FMAC3 ns1__CorrectionRecord ** SOAP_FMAC4 soap_in_PointerTons1__CorrectionRecord(struct soap*, const char*, ns1__CorrectionRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CorrectionRecord(struct soap*, ns1__CorrectionRecord *const*, const char*, const char*);
SOAP_FMAC3 ns1__CorrectionRecord ** SOAP_FMAC4 soap_get_PointerTons1__CorrectionRecord(struct soap*, ns1__CorrectionRecord **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionsInstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__ActionsInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionsInstrumentData(struct soap*, ns1__ActionsInstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionsInstrumentData(struct soap*, const char *, int, ns1__ActionsInstrumentData *const*, const char *);
SOAP_FMAC3 ns1__ActionsInstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__ActionsInstrumentData(struct soap*, const char*, ns1__ActionsInstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionsInstrumentData(struct soap*, ns1__ActionsInstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionsInstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__ActionsInstrumentData(struct soap*, ns1__ActionsInstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FundInstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__FundInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FundInstrumentData(struct soap*, ns1__FundInstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FundInstrumentData(struct soap*, const char *, int, ns1__FundInstrumentData *const*, const char *);
SOAP_FMAC3 ns1__FundInstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__FundInstrumentData(struct soap*, const char*, ns1__FundInstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FundInstrumentData(struct soap*, ns1__FundInstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__FundInstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__FundInstrumentData(struct soap*, ns1__FundInstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__HistInstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__HistInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__HistInstrumentData(struct soap*, ns1__HistInstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__HistInstrumentData(struct soap*, const char *, int, ns1__HistInstrumentData *const*, const char *);
SOAP_FMAC3 ns1__HistInstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__HistInstrumentData(struct soap*, const char*, ns1__HistInstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__HistInstrumentData(struct soap*, ns1__HistInstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__HistInstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__HistInstrumentData(struct soap*, ns1__HistInstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstrumentData_DEFINED
#define SOAP_TYPE_PointerTons1__InstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstrumentData(struct soap*, ns1__InstrumentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstrumentData(struct soap*, const char *, int, ns1__InstrumentData *const*, const char *);
SOAP_FMAC3 ns1__InstrumentData ** SOAP_FMAC4 soap_in_PointerTons1__InstrumentData(struct soap*, const char*, ns1__InstrumentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstrumentData(struct soap*, ns1__InstrumentData *const*, const char*, const char*);
SOAP_FMAC3 ns1__InstrumentData ** SOAP_FMAC4 soap_get_PointerTons1__InstrumentData(struct soap*, ns1__InstrumentData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FundInstrument_DEFINED
#define SOAP_TYPE_PointerTons1__FundInstrument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FundInstrument(struct soap*, ns1__FundInstrument *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FundInstrument(struct soap*, const char *, int, ns1__FundInstrument *const*, const char *);
SOAP_FMAC3 ns1__FundInstrument ** SOAP_FMAC4 soap_in_PointerTons1__FundInstrument(struct soap*, const char*, ns1__FundInstrument **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FundInstrument(struct soap*, ns1__FundInstrument *const*, const char*, const char*);
SOAP_FMAC3 ns1__FundInstrument ** SOAP_FMAC4 soap_get_PointerTons1__FundInstrument(struct soap*, ns1__FundInstrument **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Macro_DEFINED
#define SOAP_TYPE_PointerTons1__Macro_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Macro(struct soap*, ns1__Macro *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Macro(struct soap*, const char *, int, ns1__Macro *const*, const char *);
SOAP_FMAC3 ns1__Macro ** SOAP_FMAC4 soap_in_PointerTons1__Macro(struct soap*, const char*, ns1__Macro **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Macro(struct soap*, ns1__Macro *const*, const char*, const char*);
SOAP_FMAC3 ns1__Macro ** SOAP_FMAC4 soap_get_PointerTons1__Macro(struct soap*, ns1__Macro **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Instrument_DEFINED
#define SOAP_TYPE_PointerTons1__Instrument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Instrument(struct soap*, ns1__Instrument *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Instrument(struct soap*, const char *, int, ns1__Instrument *const*, const char *);
SOAP_FMAC3 ns1__Instrument ** SOAP_FMAC4 soap_in_PointerTons1__Instrument(struct soap*, const char*, ns1__Instrument **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Instrument(struct soap*, ns1__Instrument *const*, const char*, const char*);
SOAP_FMAC3 ns1__Instrument ** SOAP_FMAC4 soap_get_PointerTons1__Instrument(struct soap*, ns1__Instrument **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Override_DEFINED
#define SOAP_TYPE_PointerTons1__Override_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Override(struct soap*, ns1__Override *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Override(struct soap*, const char *, int, ns1__Override *const*, const char *);
SOAP_FMAC3 ns1__Override ** SOAP_FMAC4 soap_in_PointerTons1__Override(struct soap*, const char*, ns1__Override **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Override(struct soap*, ns1__Override *const*, const char*, const char*);
SOAP_FMAC3 ns1__Override ** SOAP_FMAC4 soap_get_PointerTons1__Override(struct soap*, ns1__Override **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__QuotesHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__QuotesHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QuotesHeaders(struct soap*, ns1__QuotesHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QuotesHeaders(struct soap*, const char *, int, ns1__QuotesHeaders *const*, const char *);
SOAP_FMAC3 ns1__QuotesHeaders ** SOAP_FMAC4 soap_in_PointerTons1__QuotesHeaders(struct soap*, const char*, ns1__QuotesHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QuotesHeaders(struct soap*, ns1__QuotesHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__QuotesHeaders ** SOAP_FMAC4 soap_get_PointerTons1__QuotesHeaders(struct soap*, ns1__QuotesHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetActionsHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetActionsHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetActionsHeaders(struct soap*, ns1__GetActionsHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetActionsHeaders(struct soap*, const char *, int, ns1__GetActionsHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetActionsHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetActionsHeaders(struct soap*, const char*, ns1__GetActionsHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetActionsHeaders(struct soap*, ns1__GetActionsHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetActionsHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetActionsHeaders(struct soap*, ns1__GetActionsHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetCompanyHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetCompanyHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetCompanyHeaders(struct soap*, ns1__GetCompanyHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetCompanyHeaders(struct soap*, const char *, int, ns1__GetCompanyHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetCompanyHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetCompanyHeaders(struct soap*, const char*, ns1__GetCompanyHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetCompanyHeaders(struct soap*, ns1__GetCompanyHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetCompanyHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetCompanyHeaders(struct soap*, ns1__GetCompanyHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetFundamentalsHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetFundamentalsHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetFundamentalsHeaders(struct soap*, ns1__GetFundamentalsHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetFundamentalsHeaders(struct soap*, const char *, int, ns1__GetFundamentalsHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetFundamentalsHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetFundamentalsHeaders(struct soap*, const char*, ns1__GetFundamentalsHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetFundamentalsHeaders(struct soap*, ns1__GetFundamentalsHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetFundamentalsHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetFundamentalsHeaders(struct soap*, ns1__GetFundamentalsHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetHistoryHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetHistoryHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetHistoryHeaders(struct soap*, ns1__GetHistoryHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetHistoryHeaders(struct soap*, const char *, int, ns1__GetHistoryHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetHistoryHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetHistoryHeaders(struct soap*, const char*, ns1__GetHistoryHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetHistoryHeaders(struct soap*, ns1__GetHistoryHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetHistoryHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetHistoryHeaders(struct soap*, ns1__GetHistoryHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GetDataHeaders_DEFINED
#define SOAP_TYPE_PointerTons1__GetDataHeaders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetDataHeaders(struct soap*, ns1__GetDataHeaders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetDataHeaders(struct soap*, const char *, int, ns1__GetDataHeaders *const*, const char *);
SOAP_FMAC3 ns1__GetDataHeaders ** SOAP_FMAC4 soap_in_PointerTons1__GetDataHeaders(struct soap*, const char*, ns1__GetDataHeaders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetDataHeaders(struct soap*, ns1__GetDataHeaders *const*, const char*, const char*);
SOAP_FMAC3 ns1__GetDataHeaders ** SOAP_FMAC4 soap_get_PointerTons1__GetDataHeaders(struct soap*, ns1__GetDataHeaders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BvalFieldSet_DEFINED
#define SOAP_TYPE_PointerTons1__BvalFieldSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BvalFieldSet(struct soap*, ns1__BvalFieldSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BvalFieldSet(struct soap*, const char *, int, ns1__BvalFieldSet *const*, const char *);
SOAP_FMAC3 ns1__BvalFieldSet ** SOAP_FMAC4 soap_in_PointerTons1__BvalFieldSet(struct soap*, const char*, ns1__BvalFieldSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BvalFieldSet(struct soap*, ns1__BvalFieldSet *const*, const char*, const char*);
SOAP_FMAC3 ns1__BvalFieldSet ** SOAP_FMAC4 soap_get_PointerTons1__BvalFieldSet(struct soap*, ns1__BvalFieldSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__date_DEFINED
#define SOAP_TYPE_PointerToxsd__date_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__date(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__date(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__date(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__date(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__date(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FieldSet_DEFINED
#define SOAP_TYPE_PointerTons1__FieldSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FieldSet(struct soap*, ns1__FieldSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FieldSet(struct soap*, const char *, int, ns1__FieldSet *const*, const char *);
SOAP_FMAC3 ns1__FieldSet ** SOAP_FMAC4 soap_in_PointerTons1__FieldSet(struct soap*, const char*, ns1__FieldSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FieldSet(struct soap*, ns1__FieldSet *const*, const char*, const char*);
SOAP_FMAC3 ns1__FieldSet ** SOAP_FMAC4 soap_get_PointerTons1__FieldSet(struct soap*, ns1__FieldSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TickOutputTz_DEFINED
#define SOAP_TYPE_PointerTons1__TickOutputTz_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TickOutputTz(struct soap*, ns1__TickOutputTz *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TickOutputTz(struct soap*, const char *, int, ns1__TickOutputTz *const*, const char *);
SOAP_FMAC3 ns1__TickOutputTz ** SOAP_FMAC4 soap_in_PointerTons1__TickOutputTz(struct soap*, const char*, ns1__TickOutputTz **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TickOutputTz(struct soap*, ns1__TickOutputTz *const*, const char*, const char*);
SOAP_FMAC3 ns1__TickOutputTz ** SOAP_FMAC4 soap_get_PointerTons1__TickOutputTz(struct soap*, ns1__TickOutputTz **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DateTimeRange_DEFINED
#define SOAP_TYPE_PointerTons1__DateTimeRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DateTimeRange(struct soap*, ns1__DateTimeRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DateTimeRange(struct soap*, const char *, int, ns1__DateTimeRange *const*, const char *);
SOAP_FMAC3 ns1__DateTimeRange ** SOAP_FMAC4 soap_in_PointerTons1__DateTimeRange(struct soap*, const char*, ns1__DateTimeRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DateTimeRange(struct soap*, ns1__DateTimeRange *const*, const char*, const char*);
SOAP_FMAC3 ns1__DateTimeRange ** SOAP_FMAC4 soap_get_PointerTons1__DateTimeRange(struct soap*, ns1__DateTimeRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionsDate_DEFINED
#define SOAP_TYPE_PointerTons1__ActionsDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionsDate(struct soap*, enum ns1__ActionsDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionsDate(struct soap*, const char *, int, enum ns1__ActionsDate *const*, const char *);
SOAP_FMAC3 enum ns1__ActionsDate ** SOAP_FMAC4 soap_in_PointerTons1__ActionsDate(struct soap*, const char*, enum ns1__ActionsDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionsDate(struct soap*, enum ns1__ActionsDate *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__ActionsDate ** SOAP_FMAC4 soap_get_PointerTons1__ActionsDate(struct soap*, enum ns1__ActionsDate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Actions_DEFINED
#define SOAP_TYPE_PointerTons1__Actions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Actions(struct soap*, ns1__Actions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Actions(struct soap*, const char *, int, ns1__Actions *const*, const char *);
SOAP_FMAC3 ns1__Actions ** SOAP_FMAC4 soap_in_PointerTons1__Actions(struct soap*, const char*, ns1__Actions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Actions(struct soap*, ns1__Actions *const*, const char*, const char*);
SOAP_FMAC3 ns1__Actions ** SOAP_FMAC4 soap_get_PointerTons1__Actions(struct soap*, ns1__Actions **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Periodicity_DEFINED
#define SOAP_TYPE_PointerTons1__Periodicity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Periodicity(struct soap*, enum ns1__Periodicity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Periodicity(struct soap*, const char *, int, enum ns1__Periodicity *const*, const char *);
SOAP_FMAC3 enum ns1__Periodicity ** SOAP_FMAC4 soap_in_PointerTons1__Periodicity(struct soap*, const char*, enum ns1__Periodicity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Periodicity(struct soap*, enum ns1__Periodicity *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__Periodicity ** SOAP_FMAC4 soap_get_PointerTons1__Periodicity(struct soap*, enum ns1__Periodicity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FilingStatus_DEFINED
#define SOAP_TYPE_PointerTons1__FilingStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FilingStatus(struct soap*, enum ns1__FilingStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FilingStatus(struct soap*, const char *, int, enum ns1__FilingStatus *const*, const char *);
SOAP_FMAC3 enum ns1__FilingStatus ** SOAP_FMAC4 soap_in_PointerTons1__FilingStatus(struct soap*, const char*, enum ns1__FilingStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FilingStatus(struct soap*, enum ns1__FilingStatus *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__FilingStatus ** SOAP_FMAC4 soap_get_PointerTons1__FilingStatus(struct soap*, enum ns1__FilingStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__HistOption_DEFINED
#define SOAP_TYPE_PointerTons1__HistOption_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__HistOption(struct soap*, enum ns1__HistOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__HistOption(struct soap*, const char *, int, enum ns1__HistOption *const*, const char *);
SOAP_FMAC3 enum ns1__HistOption ** SOAP_FMAC4 soap_in_PointerTons1__HistOption(struct soap*, const char*, enum ns1__HistOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__HistOption(struct soap*, enum ns1__HistOption *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__HistOption ** SOAP_FMAC4 soap_get_PointerTons1__HistOption(struct soap*, enum ns1__HistOption **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__HistPeriod_DEFINED
#define SOAP_TYPE_PointerTons1__HistPeriod_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__HistPeriod(struct soap*, enum ns1__HistPeriod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__HistPeriod(struct soap*, const char *, int, enum ns1__HistPeriod *const*, const char *);
SOAP_FMAC3 enum ns1__HistPeriod ** SOAP_FMAC4 soap_in_PointerTons1__HistPeriod(struct soap*, const char*, enum ns1__HistPeriod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__HistPeriod(struct soap*, enum ns1__HistPeriod *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__HistPeriod ** SOAP_FMAC4 soap_get_PointerTons1__HistPeriod(struct soap*, enum ns1__HistPeriod **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DateRange_DEFINED
#define SOAP_TYPE_PointerTons1__DateRange_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DateRange(struct soap*, ns1__DateRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DateRange(struct soap*, const char *, int, ns1__DateRange *const*, const char *);
SOAP_FMAC3 ns1__DateRange ** SOAP_FMAC4 soap_in_PointerTons1__DateRange(struct soap*, const char*, ns1__DateRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DateRange(struct soap*, ns1__DateRange *const*, const char*, const char*);
SOAP_FMAC3 ns1__DateRange ** SOAP_FMAC4 soap_get_PointerTons1__DateRange(struct soap*, ns1__DateRange **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Duration_DEFINED
#define SOAP_TYPE_PointerTons1__Duration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Duration(struct soap*, ns1__Duration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Duration(struct soap*, const char *, int, ns1__Duration *const*, const char *);
SOAP_FMAC3 ns1__Duration ** SOAP_FMAC4 soap_in_PointerTons1__Duration(struct soap*, const char*, ns1__Duration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Duration(struct soap*, ns1__Duration *const*, const char*, const char*);
SOAP_FMAC3 ns1__Duration ** SOAP_FMAC4 soap_get_PointerTons1__Duration(struct soap*, ns1__Duration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Period_DEFINED
#define SOAP_TYPE_PointerTons1__Period_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Period(struct soap*, ns1__Period *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Period(struct soap*, const char *, int, ns1__Period *const*, const char *);
SOAP_FMAC3 ns1__Period ** SOAP_FMAC4 soap_in_PointerTons1__Period(struct soap*, const char*, ns1__Period **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Period(struct soap*, ns1__Period *const*, const char*, const char*);
SOAP_FMAC3 ns1__Period ** SOAP_FMAC4 soap_get_PointerTons1__Period(struct soap*, ns1__Period **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RegSolvency_DEFINED
#define SOAP_TYPE_PointerTons1__RegSolvency_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RegSolvency(struct soap*, enum ns1__RegSolvency *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RegSolvency(struct soap*, const char *, int, enum ns1__RegSolvency *const*, const char *);
SOAP_FMAC3 enum ns1__RegSolvency ** SOAP_FMAC4 soap_in_PointerTons1__RegSolvency(struct soap*, const char*, enum ns1__RegSolvency **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RegSolvency(struct soap*, enum ns1__RegSolvency *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__RegSolvency ** SOAP_FMAC4 soap_get_PointerTons1__RegSolvency(struct soap*, enum ns1__RegSolvency **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PortSecDes_DEFINED
#define SOAP_TYPE_PointerTons1__PortSecDes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PortSecDes(struct soap*, enum ns1__PortSecDes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PortSecDes(struct soap*, const char *, int, enum ns1__PortSecDes *const*, const char *);
SOAP_FMAC3 enum ns1__PortSecDes ** SOAP_FMAC4 soap_in_PointerTons1__PortSecDes(struct soap*, const char*, enum ns1__PortSecDes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PortSecDes(struct soap*, enum ns1__PortSecDes *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__PortSecDes ** SOAP_FMAC4 soap_get_PointerTons1__PortSecDes(struct soap*, enum ns1__PortSecDes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BvalSnapshot_DEFINED
#define SOAP_TYPE_PointerTons1__BvalSnapshot_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BvalSnapshot(struct soap*, enum ns1__BvalSnapshot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BvalSnapshot(struct soap*, const char *, int, enum ns1__BvalSnapshot *const*, const char *);
SOAP_FMAC3 enum ns1__BvalSnapshot ** SOAP_FMAC4 soap_in_PointerTons1__BvalSnapshot(struct soap*, const char*, enum ns1__BvalSnapshot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BvalSnapshot(struct soap*, enum ns1__BvalSnapshot *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__BvalSnapshot ** SOAP_FMAC4 soap_get_PointerTons1__BvalSnapshot(struct soap*, enum ns1__BvalSnapshot **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BvalTier_DEFINED
#define SOAP_TYPE_PointerTons1__BvalTier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BvalTier(struct soap*, enum ns1__BvalTier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BvalTier(struct soap*, const char *, int, enum ns1__BvalTier *const*, const char *);
SOAP_FMAC3 enum ns1__BvalTier ** SOAP_FMAC4 soap_in_PointerTons1__BvalTier(struct soap*, const char*, enum ns1__BvalTier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BvalTier(struct soap*, enum ns1__BvalTier *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__BvalTier ** SOAP_FMAC4 soap_get_PointerTons1__BvalTier(struct soap*, enum ns1__BvalTier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MarketSector_DEFINED
#define SOAP_TYPE_PointerTons1__MarketSector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MarketSector(struct soap*, enum ns1__MarketSector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MarketSector(struct soap*, const char *, int, enum ns1__MarketSector *const*, const char *);
SOAP_FMAC3 enum ns1__MarketSector ** SOAP_FMAC4 soap_in_PointerTons1__MarketSector(struct soap*, const char*, enum ns1__MarketSector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MarketSector(struct soap*, enum ns1__MarketSector *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__MarketSector ** SOAP_FMAC4 soap_get_PointerTons1__MarketSector(struct soap*, enum ns1__MarketSector **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Version_DEFINED
#define SOAP_TYPE_PointerTons1__Version_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Version(struct soap*, enum ns1__Version *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Version(struct soap*, const char *, int, enum ns1__Version *const*, const char *);
SOAP_FMAC3 enum ns1__Version ** SOAP_FMAC4 soap_in_PointerTons1__Version(struct soap*, const char*, enum ns1__Version **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Version(struct soap*, enum ns1__Version *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__Version ** SOAP_FMAC4 soap_get_PointerTons1__Version(struct soap*, enum ns1__Version **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SpecialChar_DEFINED
#define SOAP_TYPE_PointerTons1__SpecialChar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SpecialChar(struct soap*, enum ns1__SpecialChar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SpecialChar(struct soap*, const char *, int, enum ns1__SpecialChar *const*, const char *);
SOAP_FMAC3 enum ns1__SpecialChar ** SOAP_FMAC4 soap_in_PointerTons1__SpecialChar(struct soap*, const char*, enum ns1__SpecialChar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SpecialChar(struct soap*, enum ns1__SpecialChar *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__SpecialChar ** SOAP_FMAC4 soap_get_PointerTons1__SpecialChar(struct soap*, enum ns1__SpecialChar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstrumentType_DEFINED
#define SOAP_TYPE_PointerTons1__InstrumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstrumentType(struct soap*, enum ns1__InstrumentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstrumentType(struct soap*, const char *, int, enum ns1__InstrumentType *const*, const char *);
SOAP_FMAC3 enum ns1__InstrumentType ** SOAP_FMAC4 soap_in_PointerTons1__InstrumentType(struct soap*, const char*, enum ns1__InstrumentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstrumentType(struct soap*, enum ns1__InstrumentType *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__InstrumentType ** SOAP_FMAC4 soap_get_PointerTons1__InstrumentType(struct soap*, enum ns1__InstrumentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ProgramFlag_DEFINED
#define SOAP_TYPE_PointerTons1__ProgramFlag_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProgramFlag(struct soap*, enum ns1__ProgramFlag *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProgramFlag(struct soap*, const char *, int, enum ns1__ProgramFlag *const*, const char *);
SOAP_FMAC3 enum ns1__ProgramFlag ** SOAP_FMAC4 soap_in_PointerTons1__ProgramFlag(struct soap*, const char*, enum ns1__ProgramFlag **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProgramFlag(struct soap*, enum ns1__ProgramFlag *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__ProgramFlag ** SOAP_FMAC4 soap_get_PointerTons1__ProgramFlag(struct soap*, enum ns1__ProgramFlag **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DiffFlag_DEFINED
#define SOAP_TYPE_PointerTons1__DiffFlag_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DiffFlag(struct soap*, enum ns1__DiffFlag *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DiffFlag(struct soap*, const char *, int, enum ns1__DiffFlag *const*, const char *);
SOAP_FMAC3 enum ns1__DiffFlag ** SOAP_FMAC4 soap_in_PointerTons1__DiffFlag(struct soap*, const char*, enum ns1__DiffFlag **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DiffFlag(struct soap*, enum ns1__DiffFlag *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__DiffFlag ** SOAP_FMAC4 soap_get_PointerTons1__DiffFlag(struct soap*, enum ns1__DiffFlag **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DateFormat_DEFINED
#define SOAP_TYPE_PointerTons1__DateFormat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DateFormat(struct soap*, enum ns1__DateFormat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DateFormat(struct soap*, const char *, int, enum ns1__DateFormat *const*, const char *);
SOAP_FMAC3 enum ns1__DateFormat ** SOAP_FMAC4 soap_in_PointerTons1__DateFormat(struct soap*, const char*, enum ns1__DateFormat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DateFormat(struct soap*, enum ns1__DateFormat *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__DateFormat ** SOAP_FMAC4 soap_get_PointerTons1__DateFormat(struct soap*, enum ns1__DateFormat **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__CancelResponseStatus_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__CancelResponseStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap*, std::vector<ns1__CancelResponseStatus *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap*, const std::vector<ns1__CancelResponseStatus *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap*, const char*, int, const std::vector<ns1__CancelResponseStatus *> *, const char*);
SOAP_FMAC3 std::vector<ns1__CancelResponseStatus *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap*, const char*, std::vector<ns1__CancelResponseStatus *> *, const char*);
SOAP_FMAC1 std::vector<ns1__CancelResponseStatus *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__CancelResponseStatus *>  * soap_new_std__vectorTemplateOfPointerTons1__CancelResponseStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__CancelResponseStatus(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap*, std::vector<ns1__MmktBvalDealInformation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap*, const std::vector<ns1__MmktBvalDealInformation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap*, const char*, int, const std::vector<ns1__MmktBvalDealInformation *> *, const char*);
SOAP_FMAC3 std::vector<ns1__MmktBvalDealInformation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap*, const char*, std::vector<ns1__MmktBvalDealInformation *> *, const char*);
SOAP_FMAC1 std::vector<ns1__MmktBvalDealInformation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__MmktBvalDealInformation *>  * soap_new_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__MmktBvalDealInformation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ScheduledResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ScheduledResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap*, std::vector<ns1__ScheduledResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap*, const std::vector<ns1__ScheduledResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap*, const char*, int, const std::vector<ns1__ScheduledResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ScheduledResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap*, const char*, std::vector<ns1__ScheduledResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ScheduledResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ScheduledResponse *>  * soap_new_std__vectorTemplateOfPointerTons1__ScheduledResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ScheduledResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__OtcDealInformation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__OtcDealInformation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap*, std::vector<ns1__OtcDealInformation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap*, const std::vector<ns1__OtcDealInformation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap*, const char*, int, const std::vector<ns1__OtcDealInformation *> *, const char*);
SOAP_FMAC3 std::vector<ns1__OtcDealInformation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap*, const char*, std::vector<ns1__OtcDealInformation *> *, const char*);
SOAP_FMAC1 std::vector<ns1__OtcDealInformation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__OtcDealInformation *>  * soap_new_std__vectorTemplateOfPointerTons1__OtcDealInformation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__OtcDealInformation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__FieldInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__FieldInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap*, std::vector<ns1__FieldInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap*, const std::vector<ns1__FieldInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap*, const char*, int, const std::vector<ns1__FieldInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FieldInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap*, const char*, std::vector<ns1__FieldInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FieldInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FieldInfo *>  * soap_new_std__vectorTemplateOfPointerTons1__FieldInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__FieldInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__DLCategory2_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__DLCategory2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__DLCategory2(struct soap*, std::vector<enum ns1__DLCategory2> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__DLCategory2(struct soap*, const std::vector<enum ns1__DLCategory2> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__DLCategory2(struct soap*, const char*, int, const std::vector<enum ns1__DLCategory2> *, const char*);
SOAP_FMAC3 std::vector<enum ns1__DLCategory2> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__DLCategory2(struct soap*, const char*, std::vector<enum ns1__DLCategory2> *, const char*);
SOAP_FMAC1 std::vector<enum ns1__DLCategory2>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__DLCategory2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns1__DLCategory2>  * soap_new_std__vectorTemplateOfns1__DLCategory2(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__DLCategory2(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__MarketSector_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__MarketSector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__MarketSector(struct soap*, std::vector<enum ns1__MarketSector> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__MarketSector(struct soap*, const std::vector<enum ns1__MarketSector> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__MarketSector(struct soap*, const char*, int, const std::vector<enum ns1__MarketSector> *, const char*);
SOAP_FMAC3 std::vector<enum ns1__MarketSector> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__MarketSector(struct soap*, const char*, std::vector<enum ns1__MarketSector> *, const char*);
SOAP_FMAC1 std::vector<enum ns1__MarketSector>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__MarketSector(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns1__MarketSector>  * soap_new_std__vectorTemplateOfns1__MarketSector(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__MarketSector(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__DLCategory_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__DLCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__DLCategory(struct soap*, std::vector<enum ns1__DLCategory> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__DLCategory(struct soap*, const std::vector<enum ns1__DLCategory> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__DLCategory(struct soap*, const char*, int, const std::vector<enum ns1__DLCategory> *, const char*);
SOAP_FMAC3 std::vector<enum ns1__DLCategory> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__DLCategory(struct soap*, const char*, std::vector<enum ns1__DLCategory> *, const char*);
SOAP_FMAC1 std::vector<enum ns1__DLCategory>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__DLCategory(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum ns1__DLCategory>  * soap_new_std__vectorTemplateOfns1__DLCategory(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__DLCategory(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__BulkArrayEntry_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__BulkArrayEntry_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap*, std::vector<ns1__BulkArrayEntry *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap*, const std::vector<ns1__BulkArrayEntry *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap*, const char*, int, const std::vector<ns1__BulkArrayEntry *> *, const char*);
SOAP_FMAC3 std::vector<ns1__BulkArrayEntry *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap*, const char*, std::vector<ns1__BulkArrayEntry *> *, const char*);
SOAP_FMAC1 std::vector<ns1__BulkArrayEntry *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__BulkArrayEntry *>  * soap_new_std__vectorTemplateOfPointerTons1__BulkArrayEntry(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__BulkArrayEntry(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRMQuoteData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRMQuoteData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap*, std::vector<ns1__QRMQuoteData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap*, const std::vector<ns1__QRMQuoteData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap*, const char*, int, const std::vector<ns1__QRMQuoteData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QRMQuoteData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap*, const char*, std::vector<ns1__QRMQuoteData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QRMQuoteData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QRMQuoteData *>  * soap_new_std__vectorTemplateOfPointerTons1__QRMQuoteData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__QRMQuoteData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRMQuote_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRMQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap*, std::vector<ns1__QRMQuote *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap*, const std::vector<ns1__QRMQuote *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap*, const char*, int, const std::vector<ns1__QRMQuote *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QRMQuote *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap*, const char*, std::vector<ns1__QRMQuote *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QRMQuote *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QRMQuote *>  * soap_new_std__vectorTemplateOfPointerTons1__QRMQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__QRMQuote(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRQuote_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__QRQuote_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QRQuote(struct soap*, std::vector<ns1__QRQuote *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QRQuote(struct soap*, const std::vector<ns1__QRQuote *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QRQuote(struct soap*, const char*, int, const std::vector<ns1__QRQuote *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QRQuote *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QRQuote(struct soap*, const char*, std::vector<ns1__QRQuote *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QRQuote *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QRQuote(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QRQuote *>  * soap_new_std__vectorTemplateOfPointerTons1__QRQuote(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__QRQuote(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__BulkArray_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__BulkArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__BulkArray(struct soap*, std::vector<ns1__BulkArray *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__BulkArray(struct soap*, const std::vector<ns1__BulkArray *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__BulkArray(struct soap*, const char*, int, const std::vector<ns1__BulkArray *> *, const char*);
SOAP_FMAC3 std::vector<ns1__BulkArray *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__BulkArray(struct soap*, const char*, std::vector<ns1__BulkArray *> *, const char*);
SOAP_FMAC1 std::vector<ns1__BulkArray *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__BulkArray(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__BulkArray *>  * soap_new_std__vectorTemplateOfPointerTons1__BulkArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__BulkArray(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__HistData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__HistData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__HistData(struct soap*, std::vector<ns1__HistData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__HistData(struct soap*, const std::vector<ns1__HistData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__HistData(struct soap*, const char*, int, const std::vector<ns1__HistData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__HistData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__HistData(struct soap*, const char*, std::vector<ns1__HistData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__HistData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__HistData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__HistData *>  * soap_new_std__vectorTemplateOfPointerTons1__HistData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__HistData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Data_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Data_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Data(struct soap*, std::vector<ns1__Data *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Data(struct soap*, const std::vector<ns1__Data *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Data(struct soap*, const char*, int, const std::vector<ns1__Data *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Data *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Data(struct soap*, const char*, std::vector<ns1__Data *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Data *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Data(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Data *>  * soap_new_std__vectorTemplateOfPointerTons1__Data(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Data(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__SecondaryQualifier_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__SecondaryQualifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap*, std::vector<ns1__SecondaryQualifier *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap*, const std::vector<ns1__SecondaryQualifier *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap*, const char*, int, const std::vector<ns1__SecondaryQualifier *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SecondaryQualifier *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap*, const char*, std::vector<ns1__SecondaryQualifier *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SecondaryQualifier *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SecondaryQualifier *>  * soap_new_std__vectorTemplateOfPointerTons1__SecondaryQualifier(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__SecondaryQualifier(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap*, std::vector<ns1__AllQuotesInstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap*, const std::vector<ns1__AllQuotesInstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap*, const char*, int, const std::vector<ns1__AllQuotesInstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__AllQuotesInstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap*, const char*, std::vector<ns1__AllQuotesInstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__AllQuotesInstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__AllQuotesInstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__AllQuotesInstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__QuotesInstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__QuotesInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap*, std::vector<ns1__QuotesInstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap*, const std::vector<ns1__QuotesInstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap*, const char*, int, const std::vector<ns1__QuotesInstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QuotesInstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap*, const char*, std::vector<ns1__QuotesInstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QuotesInstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QuotesInstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__QuotesInstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__CorrectionRecord_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__CorrectionRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap*, std::vector<ns1__CorrectionRecord *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap*, const std::vector<ns1__CorrectionRecord *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap*, const char*, int, const std::vector<ns1__CorrectionRecord *> *, const char*);
SOAP_FMAC3 std::vector<ns1__CorrectionRecord *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap*, const char*, std::vector<ns1__CorrectionRecord *> *, const char*);
SOAP_FMAC1 std::vector<ns1__CorrectionRecord *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__CorrectionRecord *>  * soap_new_std__vectorTemplateOfPointerTons1__CorrectionRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__CorrectionRecord(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ActionsInstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ActionsInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap*, std::vector<ns1__ActionsInstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap*, const std::vector<ns1__ActionsInstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap*, const char*, int, const std::vector<ns1__ActionsInstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ActionsInstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap*, const char*, std::vector<ns1__ActionsInstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ActionsInstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ActionsInstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ActionsInstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__FundInstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__FundInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap*, std::vector<ns1__FundInstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap*, const std::vector<ns1__FundInstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap*, const char*, int, const std::vector<ns1__FundInstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FundInstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap*, const char*, std::vector<ns1__FundInstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FundInstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FundInstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__FundInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__FundInstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__HistInstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__HistInstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap*, std::vector<ns1__HistInstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap*, const std::vector<ns1__HistInstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap*, const char*, int, const std::vector<ns1__HistInstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__HistInstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap*, const char*, std::vector<ns1__HistInstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__HistInstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__HistInstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__HistInstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__HistInstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstrumentData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstrumentData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap*, std::vector<ns1__InstrumentData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap*, const std::vector<ns1__InstrumentData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap*, const char*, int, const std::vector<ns1__InstrumentData *> *, const char*);
SOAP_FMAC3 std::vector<ns1__InstrumentData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap*, const char*, std::vector<ns1__InstrumentData *> *, const char*);
SOAP_FMAC1 std::vector<ns1__InstrumentData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__InstrumentData *>  * soap_new_std__vectorTemplateOfPointerTons1__InstrumentData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__InstrumentData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__FundInstrument_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__FundInstrument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap*, std::vector<ns1__FundInstrument *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap*, const std::vector<ns1__FundInstrument *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap*, const char*, int, const std::vector<ns1__FundInstrument *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FundInstrument *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap*, const char*, std::vector<ns1__FundInstrument *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FundInstrument *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FundInstrument *>  * soap_new_std__vectorTemplateOfPointerTons1__FundInstrument(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__FundInstrument(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Macro_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Macro_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Macro(struct soap*, std::vector<ns1__Macro *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Macro(struct soap*, const std::vector<ns1__Macro *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Macro(struct soap*, const char*, int, const std::vector<ns1__Macro *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Macro *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Macro(struct soap*, const char*, std::vector<ns1__Macro *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Macro *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Macro(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Macro *>  * soap_new_std__vectorTemplateOfPointerTons1__Macro(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Macro(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Instrument_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Instrument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Instrument(struct soap*, std::vector<ns1__Instrument *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Instrument(struct soap*, const std::vector<ns1__Instrument *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Instrument(struct soap*, const char*, int, const std::vector<ns1__Instrument *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Instrument *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Instrument(struct soap*, const char*, std::vector<ns1__Instrument *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Instrument *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Instrument(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Instrument *>  * soap_new_std__vectorTemplateOfPointerTons1__Instrument(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Instrument(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Override_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Override_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Override(struct soap*, std::vector<ns1__Override *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Override(struct soap*, const std::vector<ns1__Override *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Override(struct soap*, const char*, int, const std::vector<ns1__Override *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Override *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Override(struct soap*, const char*, std::vector<ns1__Override *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Override *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Override(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Override *>  * soap_new_std__vectorTemplateOfPointerTons1__Override(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Override(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__BvalFieldSet_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__BvalFieldSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap*, std::vector<ns1__BvalFieldSet *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap*, const std::vector<ns1__BvalFieldSet *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap*, const char*, int, const std::vector<ns1__BvalFieldSet *> *, const char*);
SOAP_FMAC3 std::vector<ns1__BvalFieldSet *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap*, const char*, std::vector<ns1__BvalFieldSet *> *, const char*);
SOAP_FMAC1 std::vector<ns1__BvalFieldSet *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__BvalFieldSet *>  * soap_new_std__vectorTemplateOfPointerTons1__BvalFieldSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__BvalFieldSet(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__FieldSet_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__FieldSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FieldSet(struct soap*, std::vector<ns1__FieldSet *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FieldSet(struct soap*, const std::vector<ns1__FieldSet *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FieldSet(struct soap*, const char*, int, const std::vector<ns1__FieldSet *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FieldSet *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FieldSet(struct soap*, const char*, std::vector<ns1__FieldSet *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FieldSet *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FieldSet(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FieldSet *>  * soap_new_std__vectorTemplateOfPointerTons1__FieldSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__FieldSet(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
